var searchIndex = JSON.parse('{\
"array_init":{"doc":"The <code>array-init</code> crate allows you to initialize arrays with …","t":[5,5,5,5],"n":["array_init","from_iter","from_iter_reversed","try_array_init"],"q":["array_init","","",""],"d":["Initialize an array given an initializer expression.","Initialize an array given an iterator","Initialize an array in reverse given an iterator","Initialize an array given an initializer expression that …"],"i":[0,0,0,0],"f":[[[]],[[],1],[[],1],[[],2]],"p":[[4,"Option"],[4,"Result"]]},\
"arrayref":{"doc":"This package contains just four macros, which enable the …","t":[14,14,14,14],"n":["array_mut_ref","array_ref","array_refs","mut_array_refs"],"q":["arrayref","","",""],"d":["You can use <code>array_mut_ref</code> to generate a mutable array …","You can use <code>array_ref</code> to generate an array reference to a …","You can use <code>array_refs</code> to generate a series of array …","You can use <code>mut_array_refs</code> to generate a series of mutable …"],"i":[0,0,0,0],"f":[0,0,0,0],"p":[]},\
"arrayvec":{"doc":"<strong>arrayvec</strong> provides the types <code>ArrayVec</code> and <code>ArrayString</code>:  …","t":[3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ArrayString","ArrayVec","CapacityError","Drain","IntoIter","as_mut","as_mut_ptr","as_mut_slice","as_mut_str","as_ptr","as_ref","as_ref","as_slice","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","clear","clear","clone","clone","clone","clone","clone_from","clone_from","cmp","cmp","cmp","default","default","deref","deref","deref_mut","deref_mut","drain","drop","drop","drop","element","eq","eq","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_byte_string","from_iter","from_str","ge","ge","ge","gt","gt","gt","hash","hash","insert","into","into","into","into","into","into_inner","into_inner_unchecked","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_full","is_full","le","le","le","len","len","lt","lt","lt","new","new","new","new_const","new_const","next","next","next_back","next_back","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pop","pop","pop_at","push","push","push_str","push_unchecked","remaining_capacity","remaining_capacity","remove","remove","retain","set_len","set_len","simplify","size_hint","size_hint","swap_pop","swap_remove","take","truncate","truncate","try_extend_from_slice","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_push","try_push","try_push_str","type_id","type_id","type_id","type_id","type_id","write_char","write_str","zero_filled"],"q":["arrayvecd":["A string with a fixed capacity.","A vector with a fixed capacity.","Error value indicating insufficient capacity","A draining iterator for <code>ArrayVec</code>.","By-value iterator for <code>ArrayVec</code>.","","Return a raw mutable pointer to the vector’s buffer.","Return a mutable slice containing all elements of the …","Return a mutable string slice of the whole <code>ArrayString</code>.","Return a raw pointer to the vector’s buffer.","","","Return a slice containing all elements of the vector.","Return a string slice of the whole <code>ArrayString</code>.","","","","","","","","","","","","","","Return the capacity of the <code>ArrayVec</code>.","Return the capacity of the <code>ArrayString</code>.","Remove all elements in the vector.","Make the string empty.","","","","","","","","","","Return an empty array","Return an empty <code>ArrayString</code>","","","","","Create a draining iterator that removes the specified …","","","","Extract the overflowing element","","","","","","Extend the <code>ArrayVec</code> with an iterator.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>ArrayString</code> from a <code>str</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>ArrayString</code> from a byte string literal.","Create an <code>ArrayVec</code> from an iterator.","","","","","","","","","","Insert <code>element</code> at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the inner fixed size array, if it is full to its …","Return the inner fixed size array.","","","","","","Returns whether the <code>ArrayVec</code> is empty.","Returns whether the string is empty.","Return true if the <code>ArrayVec</code> is completely filled to its …","Return if the <code>ArrayString</code> is completely filled.","","","","Return the number of elements in the <code>ArrayVec</code>.","Return the length of the string.","","","","Create a new empty <code>ArrayVec</code>.","Create a new empty <code>ArrayString</code>.","Create a new <code>CapacityError</code> from <code>element</code>.","Create a new empty <code>ArrayVec</code> (const fn).","Create a new empty <code>ArrayString</code> (const fn).","","","","","","","","","Remove the last element in the vector and return it.","Removes the last character from the string and returns it.","Remove the element at <code>index</code> and shift down the following …","Push <code>element</code> to the end of the vector.","Adds the given char to the end of the string.","Adds the given string slice to the end of the string.","Push <code>element</code> to the end of the vector without checking the …","Returns the capacity left in the <code>ArrayVec</code>.","Returns the capacity left in the <code>ArrayString</code>.","Remove the element at <code>index</code> and shift down the following …","Removes a <code>char</code> from this <code>ArrayString</code> at a byte position …","Retains only the elements specified by the predicate.","Set the vector’s length without dropping or moving out …","Set the strings’s length.","Convert into a <code>CapacityError</code> that does not carry an …","","","Remove the element at <code>index</code> and swap the last element into …","Remove the element at <code>index</code> and swap the last element into …","Returns the ArrayVec, replacing the original with a new …","Shortens the vector, keeping the first <code>len</code> elements and …","Shortens this <code>ArrayString</code> to the specified length.","Copy all elements from the slice and append to the <code>ArrayVec</code>…","","","","","","","","","Insert <code>element</code> at position <code>index</code>.","","","","","","Push <code>element</code> to the end of the vector.","Adds the given char to the end of the string.","Adds the given string slice to the end of the string.","","","","","","","","Create a new <code>ArrayString</code> value fully filled with ASCII …"],"i":[0,0,0,0,0,1,1,1,2,1,1,2,1,2,1,1,5,10,2,2,7,1,1,5,10,2,7,1,2,1,2,1,5,2,7,1,2,1,2,7,1,2,1,2,1,2,1,1,5,10,7,1,1,2,2,7,1,1,5,2,2,7,7,1,1,5,10,2,2,7,2,1,2,1,2,2,1,2,2,1,2,1,1,5,10,2,7,1,1,1,1,1,5,10,1,2,1,2,1,2,2,1,2,1,2,2,1,2,7,1,2,5,10,5,10,1,2,2,7,1,2,1,1,2,2,1,1,2,1,2,1,1,2,7,5,10,1,1,1,1,2,1,1,1,5,10,2,2,2,7,1,1,5,10,2,7,1,2,2,1,5,10,2,7,2,2,2],"f":[0,0,0,0,0,[1],[1],[1],[2,3],[1],[1],[2,3],[1],[2,3],[1],[[]],[[]],[[]],[2,3],[[]],[[]],[1],[[]],[[]],[[]],[[]],[[]],[1,4],[2,4],[1],[2],[1,1],[5,5],[2,2],[[[7,[6]]],[[7,[6]]]],[[1,1]],[[2,2]],[[1,1],8],[[2,2],8],[[[7,[9]],7],8],[[],1],[[],2],[1],[2,3],[1],[2,3],[1,10],[1],[5],[10],[7],[[1,1],11],[1,11],[[2,2],11],[[2,3],11],[[[7,[12]],7],11],[[1,13]],[[1,14],15],[[5,14],15],[[2,14],15],[[2,14],15],[[7,14],15],[[7,14],15],[[]],[[],1],[[]],[[]],[3,[[16,[2,[7,[3]]]]]],[[]],[[]],[[],[[16,[2,17]]]],[13,1],[3,[[16,[2]]]],[[1,1],11],[[2,3],11],[[2,2],11],[[1,1],11],[[2,3],11],[[2,2],11],[1],[2],[[1,4]],[[]],[[]],[[]],[[]],[[]],[1,[[16,[1]]]],[1],[1,5],[1],[1],[[]],[[]],[1,11],[2,11],[1,11],[2,11],[[1,1],11],[[2,2],11],[[2,3],11],[1,4],[2,4],[[1,1],11],[[2,2],11],[[2,3],11],[[],1],[[],2],[[],7],[[],1],[[],2],[5,18],[10,18],[5,18],[10,18],[[1,1],[[18,[8]]]],[[2,2],[[18,[8]]]],[[2,3],[[18,[8]]]],[[[7,[19]],7],[[18,[8]]]],[1,18],[2,[[18,[20]]]],[[1,4],18],[1],[[2,20]],[[2,3]],[1],[1,4],[2,4],[[1,4]],[[2,4],20],[1],[[1,4]],[[2,4]],[7,7],[5],[10],[[1,4],18],[[1,4]],[1,1],[[1,4]],[[2,4]],[1,[[16,[7]]]],[[],16],[[],[[16,[1]]]],[[],16],[[],16],[21,[[16,[2]]]],[[],16],[3,[[16,[2]]]],[[],16],[[1,4],[[16,[7]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[1,[[16,[7]]]],[[2,20],[[16,[[7,[20]]]]]],[[2,3],[[16,[[7,[3]]]]]],[[],22],[[],22],[[],22],[[],22],[[],22],[[2,20],15],[[2,3],15],[[],2]],"p":[[3,"ArrayVec"],[3,"ArrayString"],[15,"str"],[15,"usize"],[3,"IntoIter"],[8,"Clone"],[3,"CapacityError"],[4,"Ordering"],[8,"Ord"],[3,"Drain"],[15,"bool"],[8,"PartialEq"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"Utf8Error"],[4,"Option"],[8,"PartialOrd"],[15,"char"],[3,"Arguments"],[3,"TypeId"]]},\
"bitvec":{"doc":"<code>bitvec</code>","t":[14,0,0,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,3,3,3,3,3,16,16,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,18,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,4,13,13,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,8,11,10,10,11,10,10,18,3,3,3,3,3,3,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,8,18,18,5,5,8,2,3,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,2,2,2,2,2,2,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,12,12,3,4,3,3,4,18,3,18,18,3,13,13,3,8,13,13,18,18,18,13,13,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,5,11,12,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,5,11,5,11,11,11,11,5,5,12,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,5,5,11,5,11,12,12,12,12,12,12,6,3,8,3,3,3,3,3,3,3,16,3,3,3,3,3,18,18,16,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,11,11,11,11,10,11,10,11,10,11,10,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,16,16,8,16,16,18,11,10,10,10,3,3,18,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,16,18,10,10,10,10,11,10,10,10,10,10,10],"n":["BitArr","access","array","bitarr","bitbox","bits","bitvec","boxed","domain","field","index","macros","mem","order","prelude","ptr","slice","store","vec","view","BitAccess","BitSafe","BitSafeU16","BitSafeU32","BitSafeU64","BitSafeU8","BitSafeUsize","Mem","Rad","ZERO","as_raw_mut_slice","as_raw_mut_slice","as_raw_mut_slice","as_raw_mut_slice","as_raw_mut_slice","as_raw_slice","as_raw_slice","as_raw_slice","as_raw_slice","as_raw_slice","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_bits","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get_writers","into","into","into","into","into","invert_bits","load","load","load","load","load","load","load_value","load_value","load_value","load_value","load_value","new","new","new","new","new","set_bits","store_value","store_value","store_value","store_value","store_value","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_view_bits","try_view_bits","try_view_bits","try_view_bits","try_view_bits","try_view_bits_mut","try_view_bits_mut","try_view_bits_mut","try_view_bits_mut","try_view_bits_mut","type_id","type_id","type_id","type_id","type_id","view_bits","view_bits","view_bits","view_bits","view_bits","view_bits_mut","view_bits_mut","view_bits_mut","view_bits_mut","view_bits_mut","write_bit","BitArray","IntoIter","ZERO","_ord","as_bitslice","as_bitslice","as_mut","as_mut_bitslice","as_mut_bitslice","as_mut_slice","as_mut_slice","as_raw_mut_slice","as_raw_slice","as_ref","as_slice","as_slice","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","count","data","default","deref","deref_mut","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","hash","index","index_mut","into","into","into_inner","into_iter","into_iter","into_iter","into_iter","is_empty","last","len","len","load_be","load_le","new","new","next","next_back","not","nth","nth_back","partial_cmp","size_hint","store_be","store_le","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","BitBox","IntoIter","as_bitslice","as_bitslice","as_mut","as_mut_bitslice","as_mut_bitslice","as_raw_mut_slice","as_raw_slice","as_ref","as_ref","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","count","default","deref","deref_mut","drop","eq","fill_uninitialized","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_align","from","from","from","from","from","from","from","from_bitslice","from_boxed_slice","from_iter","from_raw","hash","index","index_mut","into","into","into_bitvec","into_boxed_slice","into_iter","into_iter","into_raw","last","leak","len","load_be","load_le","next","next_back","not","nth","nth_back","partial_cmp","size_hint","store_be","store_le","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from_boxed_slice","try_into","try_into","type_id","type_id","BitDomain","Domain","Enclave","Enclave","PartialElement","Region","Region","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounds","clear","clone","clone","clone","clone_into","clone_into","clone_into","default","default","enclave","enclave","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","hash","head","into","into","into","into_bit_domain","into_bitslice","into_iter","invert","len","load_value","mask","next","next_back","region","region","set","store_value","store_value_aliased","tail","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","body","head","tail","0","body","head","tail","BitField","load","load_be","load_le","store","store_be","store_le","ALL","BitEnd","BitIdx","BitIdxError","BitMask","BitPos","BitSel","MAX","MAX","MAX","MIN","MIN","MIN","ZERO","bitand","bitor","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","combine","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","insert","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","mask","mask","mask","new","new","new","new","new","new_unchecked","new_unchecked","new_unchecked","next","not","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","position","prev","range","range_all","range_all","range_from","select","select","sum","test","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","ALL","BitRegister","INDX","MASK","bits_of","elts","BitOrder","LocalBits","Lsb0","Msb0","at","at","at","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","hash","hash","into","into","mask","mask","mask","partial_cmp","partial_cmp","select","select","select","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify","verify_for_type","AsBits","AsMutBits","BitArr","BitArray","BitBox","BitOrder","BitPtr","BitPtrRange","BitRef","BitSlice","BitStore","BitVec","LocalBits","Lsb0","Msb0","_","_","_","bitarr","bitbox","bits","bitvec","end","start","BitPtr","BitPtrError","BitPtrRange","BitRef","BitSpanError","CONTAINS_MUTABILITY","Const","DANGLING","EMPTY","MisalignError","Misaligned","Misaligned","Mut","Mutability","Null","Null","PEANO_NUMBER","RENDER","SELF","TooHigh","TooLong","add","address","align_offset","as_mut","as_mut","as_ref","as_ref","bit","bitslice_from_raw_parts","bitslice_from_raw_parts_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","check_alignment","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","commit","contains","copy","copy_from","copy_from_nonoverlapping","copy_nonoverlapping","copy_to","copy_to_nonoverlapping","count","default","default","default","deref","deref_mut","drop","drop_in_place","drop_in_place","end","end_bound","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","freeze","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bitptr","from_mut","from_mut_slice","from_range","from_ref","from_slice","from_slice_mut","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into_bitptr","into_iter","into_range","is_empty","is_null","last","len","new","new_unchecked","next","next_back","not","nth","nth_back","null","null_mut","offset","offset_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pointer","pointer","raw_parts","read","read","read_unaligned","read_unaligned","read_volatile","read_volatile","replace","replace","replace","set","size_hint","slice_from_raw_parts","slice_from_raw_parts_mut","start","start_bound","sub","swap","swap","swap","swap_nonoverlapping","thaw","to_const","to_mut","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_raw_parts","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","wrapping_add","wrapping_offset","wrapping_sub","write","write","write_bits","write_bytes","write_unaligned","write_unaligned","write_volatile","write_volatile","0","0","0","0","0","0","BitRefIter","BitSlice","BitSliceIndex","BitValIter","Chunks","ChunksExact","ChunksExactMut","ChunksExactMutNoAlias","ChunksMut","ChunksMutNoAlias","Immut","Iter","IterMut","IterMutNoAlias","IterOnes","IterZeros","MAX_BITS","MAX_ELTS","Mut","RChunks","RChunksExact","RChunksExactMut","RChunksExactMutNoAlias","RChunksMut","RChunksMutNoAlias","RSplit","RSplitMut","RSplitMutNoAlias","RSplitN","RSplitNMut","RSplitNMutNoAlias","Split","SplitInclusive","SplitInclusiveMut","SplitInclusiveMutNoAlias","SplitMut","SplitMutNoAlias","SplitN","SplitNMut","SplitNMutNoAlias","Windows","align_to","align_to_mut","all","any","as_bitptr","as_bitptr_range","as_bitslice","as_bitslice","as_mut","as_mut_bitptr","as_mut_bitptr_range","as_mut_ptr","as_mut_ptr_range","as_ptr","as_ptr_range","as_ref","as_ref","as_ref","as_slice","as_slice","bit_domain","bit_domain_mut","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_refs","by_vals","chunks","chunks_exact","chunks_exact_mut","chunks_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_from_bitslice","clone_from_slice","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","contains","copied","copy_from_bitslice","copy_from_slice","copy_within","copy_within_unchecked","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count_ones","count_zeros","default","default","default","default","domain","domain_mut","empty","empty_mut","ends_with","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fill","fill_with","first","first_mut","first_one","first_zero","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_element","from_element_mut","from_mut","from_raw_parts","from_raw_parts_mut","from_raw_parts_unchecked","from_raw_parts_unchecked_mut","from_ref","from_slice","from_slice_mut","from_slice_unchecked","from_slice_unchecked_mut","get","get","get_mut","get_mut","get_unchecked","get_unchecked","get_unchecked_mut","get_unchecked_mut","hash","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_bitslice","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_remainder","into_remainder","into_remainder","into_remainder","into_slice","is_empty","iter","iter_mut","iter_ones","iter_zeros","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last_mut","last_one","last_zero","leading_ones","leading_zeros","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","load_be","load_be","load_le","load_le","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","not","not_all","not_any","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","rchunks","rchunks_exact","rchunks_exact_mut","rchunks_mut","read","remainder","remainder","remove_alias","remove_alias","remove_alias","remove_alias","remove_alias","remove_alias","remove_alias","remove_alias","remove_alias","remove_alias","repeat","replace","replace_unchecked","reverse","rotate_left","rotate_right","rsplit","rsplit_mut","rsplitn","rsplitn_mut","set","set_aliased","set_aliased_unchecked","set_unchecked","shift_left","shift_right","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","some","split","split_at","split_at_mut","split_at_unchecked","split_at_unchecked_mut","split_first","split_first_mut","split_inclusive","split_inclusive_mut","split_last","split_last_mut","split_mut","splitn","splitn_mut","starts_with","store_be","store_be","store_le","store_le","strip_prefix","strip_suffix","swap","swap_unchecked","swap_with_bitslice","swap_with_slice","take_remainder","take_remainder","take_remainder","take_remainder","to_bitvec","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_vec","trailing_ones","trailing_zeros","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_slice","try_from_slice_mut","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","windows","write","ALIAS_WIDTH","ALIGNED_TO_SIZE","Access","Alias","BitStore","Mem","Unalias","ZERO","get_bit","load_value","new","store_value","BitVec","Drain","EMPTY","IntoIter","Splice","append","as_bitptr","as_bitslice","as_bitslice","as_mut","as_mut","as_mut_bitptr","as_mut_bitslice","as_mut_ptr","as_mut_slice","as_ptr","as_raw_mut_slice","as_raw_slice","as_ref","as_ref","as_ref","as_slice","as_slice","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone_into","cmp","count","count","default","deref","deref_mut","drain","drop","drop","drop","eq","extend","extend","extend","extend","extend","extend_from_bitslice","extend_from_raw_slice","extend_from_slice","extend_from_within","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_align","from","from","from","from","from","from","from","from","from_bitslice","from_element","from_iter","from_iter","from_iter","from_iter","from_iter","from_raw_parts","from_slice","from_vec","hash","index","index_mut","insert","into","into","into","into_boxed_bitslice","into_boxed_slice","into_iter","into_iter","into_iter","into_iter","into_iter","into_raw_parts","into_vec","is_empty","last","last","leak","len","len","len","load_be","load_le","new","next","next","next_back","next_back","not","nth","nth_back","nth_back","partial_cmp","pop","push","read","remove","repeat","reserve","reserve_exact","resize","resize_with","retain","set_elements","set_len","set_uninitialized","shrink_to_fit","size_hint","size_hint","splice","split_off","store_be","store_le","swap_remove","to_owned","to_string","truncate","try_from","try_from","try_from","try_from","try_from_slice","try_from_vec","try_into","try_into","try_into","type_id","type_id","type_id","with_capacity","write","AsBits","AsMutBits","BitView","BitViewSized","Store","ZERO","as_bits","as_mut_bits","as_raw_mut_slice","as_raw_slice","into_bitarray","try_as_bits","try_as_mut_bits","try_view_bits","try_view_bits_mut","view_bits","view_bits_mut"],"q":["bitvec","","","","","","","","","","","","","","","","","","","","bitvec::access","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitvec::array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitvec::boxed","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitvec::domain","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitvec::domain::BitDomain","","","","bitvec::domain::Domain","","","","bitvec::field","","","","","","","bitvec::index","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitvec::mem","","","","","","bitvec::order","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitvec::prelude","","","","","","","","","","","","","","","","","","","","","","","","bitvec::ptrbitvec::ptr::BitPtrError","","bitvec::ptr::BitSpanError","","","","bitvec::slicebitvec::store","","","","","","","","","","","","bitvec::vec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitvec::view","","","","","","","","","","","","","","","",""],"d":["Bit-Array Type Definition","Memory Bus Access Management","Statically-Allocated, Fixed-Size, Bit Buffer","Bit-Array Value Constructor","Boxed Bit-Slice Constructor","Bit-Slice Region Constructor","Bit-Vector Constructor","Heap-Allocated, Fixed-Size, Bit Buffer","Memory Region Description","Bit-Field Memory Slots","Bit Indices","Constructor Macros","Memory Element Descriptions","In-Element Bit Ordering","Symbol Export","Raw Pointer Implementation","Bit-Addressable Memory Regions","Storage Memory Description","Dynamically-Allocated, Adjustable-Size, Bit Buffer","Bit View Adapters","Bit-Level Access Instructions","Read-Only Semivolatile Handle","Read-Only Shared-Mutable Handle","Read-Only Shared-Mutable Handle","Read-Only Shared-Mutable Handle","Read-Only Shared-Mutable Handle","Read-Only Shared-Mutable Handle","The element type being guarded against improper mutation.","The memory-access type this guards.","The zero constant.","","","","","","","","","","","","","","","","","","","","","Clears bits within a memory element to <code>0</code>.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the function that will write <code>value</code> into all bits …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Inverts bits within a memory element.","Loads the value from memory, allowing for the possibility …","","","","","","","","","","","","","","","","Sets bits within a memory element to <code>1</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Writes a value to one bit in a memory element, returning …","Bit-Precision Array Immediate","Bit-Array Iteration","A bit-array with all bits initialized to zero.","The ordering of bits within an <code>A::Store</code> element.","Explicitly views the bit-array as a bit-slice.","Views the remaining unyielded bits in the iterator.","","Explicitly views the bit-array as a mutable bit-slice.","Mutably views the remaining unyielded bits in the iterator.","Returns a mutable bit-slice containing the entire …","","Views the bit-array as a mutable slice of its underlying …","Views the bit-array as a slice of its underlying memory …","","Returns a bit-slice containing the entire bit-array. …","","","","","","","","","","","","","","","","","","","","The wrapped data buffer.","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Removes the bit-array wrapper, returning the contained …","","","","","Tests whether the array is empty.","","Gets the length (in bits) of the bit-array.","","","","Wraps an existing buffer as a bit-array.","Converts a bit-array into its iterator.","","","","","","","","","","","","","","","","","","","","","","Fixed-Size, Heap-Allocated, Bit Slice","An iterator over a <code>BitBox</code>.","Views the remaining unyielded bits as a bit-slice.","Explicitly views the bit-box as a bit-slice.","","Views the remaining unyielded bits as a mutable bit-slice.","Explicitly views the bit-box as a mutable bit-slice.","Views the bit-box as a mutable slice of its underlying …","Views the bit-box as a slice of its underlying memory …","","","","","","","","","","","","","","","","","","","","","","","","","","Sets the unused bits outside the <code>BitBox</code> buffer to a fixed …","","","","","","","","","Ensures that the allocated buffer has no dead bits between …","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Copies a bit-slice region into a new bit-box allocation.","Converts a <code>Box&lt;[T]&gt;</code> into a <code>BitBox&lt;T, O&gt;</code>, in place.","","Constructs a bit-box from a raw bit-slice pointer.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the bit-box into a bit-vector.","Converts the bit-box back into an ordinary boxed element …","","","Consumes the bit-box, returning a raw bit-slice pointer.","","Deliberately leaks the allocated memory, returning an …","","","","","","","","","","","","","","","","","","","Attempts to convert an ordinary boxed slice into a boxed …","","","","","Bit-Slice Partitioning","Bit-Slice Element Partitioning","Indicates that a bit-slice’s contents are entirely in …","Indicates that a bit-slice’s contents are entirely in …","Partially-Owned Memory Element","Indicates that a bit-slice’s contents touch an element …","Indicates that a bit-slice’s contents touch an element …","","","","","","","Gets the semantic head and tail indices that constrain …","Clears all bits governed by the partial-element to <code>0</code>.","","","","","","","","","Attempts to unpack the bit-domain as an <code>Enclave</code> variant. …","Attempts to unpack the bit-domain as an <code>Enclave</code> variant. …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Gets the starting index of the live bits in the element.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the element-wise <code>Domain</code> into the equivalent …","Converts the partial element into a bit-slice over its …","","Inverts the value of each bit governed by the …","","Fetches the value stored through <code>self</code> and masks away extra …","Gets the bit-mask over all accessible bits.","","","Attempts to unpack the bit-domain as a <code>Region</code> variant. …","Attempts to unpack the bit-domain as a <code>Region</code> variant. …","Sets all bits governed by the partial-element to <code>1</code>.","Stores a value through <code>self</code> after masking away extra bits.","Performs a store operation on a partial-element whose bits …","Gets the ending index of the live bits in the element.","","","","","","","","","","","","","","","Any bits that wholly-fill elements in the interior of the …","Any bits that partially-fill the first element of the …","Any bits that partially-fill the last element of the …","","All fully-used elements in the bit-slice’s underlying …","The first element in the bit-slice’s underlying storage, …","The last element in the bit-slice’s underlying storage, …","C-Style Bit-Field Access","Integer Loading","Big-Endian Integer Loading","Little-Endian Integer Loading","Integer Storing","Big-Endian Integer Storing","Little-Endian Integer Storing","A full bit-mask with every bit set.","One-Bit-After Tail Index","Semantic Bit Index","Bit Index Error","Multi-Bit Selection Mask","Bit Position","One-Hot Bit Selection Mask","The inclusive maximum index within an <code>R</code> element.","The inclusive maximum tail within (or after) an <code>R</code> element.","The position value of the most significant bit in an <code>R</code> …","The inclusive minimum index within an <code>R</code> element.","The inclusive minimum tail within (or after) an <code>R</code> element.","The position value of the least significant bit in an <code>R</code> …","An empty bit-mask with every bit cleared.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new mask with a selector bit activated.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Inserts a selector bit into a mask.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Removes the index wrapper, leaving the internal counter.","Removes the error wrapper, leaving the internal counter.","Removes the tail wrapper, leaving the internal counter.","Removes the position wrapper, leaving the internal counter.","Removes the one-hot selection wrapper, leaving the …","Removes the mask wrapper, leaving the internal value.","Computes the bit selector for <code>self</code> as an accessor mask.","Computes the bit selector for <code>self</code> as an accessor mask.","Computes a bit-mask for <code>self</code>. This is a type-cast.","Wraps a counter value as a known-good index into an <code>R</code> …","Wraps a counter value as a known-good tail of an <code>R</code> …","Wraps a counter value as a known-good position within an <code>R</code> …","Wraps a selector value as a known-good selection in an <code>R</code> …","Wraps any <code>R</code> value as a bit-mask.","Wraps a counter value as an assumed-good index into an <code>R</code> …","Wraps a counter value as an assumed-good position within …","Wraps a selector value as an assumed-good selection in an <code>R</code>…","Increments an index counter, wrapping at the back edge of …","","","","","","","","Computes the bit position corresponding to <code>self</code> under some …","Decrements an index counter, wrapping at the front edge of …","Iterates over all indices between an inclusive start and …","Iterates over all possible index values.","Iterates over all possible selector values.","Iterates over all tail indices at and after an inclusive …","Computes the bit selector corresponding to <code>self</code> under an …","Computes the bit selector corresponding to <code>self</code>.","","Tests if a mask contains a given selector bit.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The literal <code>!0</code>.","Register Descriptions","The number of bits required to store an index in the range …","A mask over all bits that can be used as an index within …","Counts the number of bits in a value of type <code>T</code>.","Bit Storage Calculator","In-Element Bit Ordering","C-Compatible Bit Ordering","Least-Significant-First Bit Traversal","Most-Significant-First Bit Traversal","Translates a semantic bit index into a real bit position.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Produces a multi-bit selection mask from a range of …","","","","","Produces a single-bit selection mask from a bit-index.","","","","","","","","","","","Complete <code>BitOrder</code> Verification","Single-Type <code>BitOrder</code> Verification","","","","","","","Single-Bit Pointer","Bit-Pointer Range","Proxy Bit-Reference","","","","","","","","","","","","","","The higher, exclusive, bound of the range. The bit to …","The lower, inclusive, bound of the range. The bit to which …","Single-Bit Pointer","Errors produced by invalid bit-pointer components.","Bit-Pointer Range","Proxy Bit-Reference","An error produced when creating <code>BitSpan</code> encoded references.","Marks whether this type contains mutability permissions …","A basic <code>const</code> marker.","The canonical dangling pointer. This selects the starting …","The canonical empty range. All ranges with zero length …","The error produced when an address is insufficiently …","Attempted to construct a bit-pointer with an address not …","The base element pointer is not aligned.","A basic <code>mut</code> marker.","Generalized mutability permissions.","Attempted to construct a bit-pointer with the null element …","A null pointer was provided.","Counts the layers of <code>Frozen&lt;&gt;</code> wrapping around a base <code>Const</code> …","One of <code>*const</code> or <code>*mut</code>.","Allow instances to be constructed generically.","The requested address is too high, and wraps to zero.","The requested length exceeds the <code>BitSpan</code> length ceiling.","Adjusts a bit-pointer upwards in memory. This is …","Gets the address of the base storage element.","Computes the offset (in bits) that needs to be applied to …","","Produces a proxy reference to the referent bit.","","Produces a proxy reference to the referent bit.","Gets the <code>BitIdx</code> that selects the bit within the memory …","Bit-Slice Pointer Construction","Bit-Slice Pointer Construction","","","","","","","","","","","","","","","","","Casts to a <code>BitPtr</code> with a different storage parameter.","Ensures that an address is well-aligned to its referent …","","","","","","","","","","","","","","","","","","","","","","","","Commits a bit into the proxied location.","Tests if a given bit-pointer is contained within the range.","Bit-wise <code>memcpy</code>","Copies <code>count</code> bits from the region starting at <code>src</code> to the …","Copies <code>count</code> bits from the region starting at <code>src</code> to the …","Bit-wise <code>memcpy</code>","Copies <code>count</code> bits from <code>self</code> to <code>dest</code>. The source and …","Copies <code>count</code> bits from <code>self</code> to <code>dest</code>. The source and …","","","","","","","","Remote Destructor","Runs the destructor of the referent value.","The higher, exclusive, bound of the range. The bit to …","","Bit-Pointer Equality","","","","","","","","","","","","","","","","","","","","","","","","","Freeze this type, wrapping it in a <code>const</code> marker that may …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Converts a bit-pointer into a proxy bit-reference.","Constructs a mutable <code>BitPtr</code> to the zeroth bit in a single …","Constructs a <code>BitPtr</code> to the zeroth bit in the zeroth …","Explicitly converts a <code>Range&lt;BitPtr&gt;</code> into a <code>BitPtrRange</code>.","Constructs a <code>BitPtr</code> to the zeroth bit in a single element.","Constructs a <code>BitPtr</code> to the zeroth bit in the zeroth …","Constructs a mutable <code>BitPtr</code> to the zeroth bit in the …","Bit-Pointer Hashing","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Decays the bit-reference to an ordinary bit-pointer.","","Explicitly converts a <code>BitPtrRange</code> into a <code>Range&lt;BitPtr&gt;</code>.","Tests if the range is empty (the distance between …","Tests if a bit-pointer is the null value.","","","Tries to construct a <code>BitPtr</code> from a memory location and a …","Constructs a <code>BitPtr</code> from an address and head index, …","","","","","","Bit-Pointer Sentinel Value","Bit-Pointer Sentinel Value","Creates a new bit-pointer at a specified offset from the …","Calculates the distance (in bits) between two bit-pointers.","","","","","","","","","","Gets a raw pointer to the memory location containing the …","Gets a raw pointer to the memory element containing the …","Decomposes a bit-pointer into its element address and bit …","Single-Bit Read","Reads the bit from <code>*self</code>.","Single-Bit Unaligned Read","Reads the bit from <code>*self</code> using an unaligned memory access.","Single-Bit Volatile Read","Reads the bit from <code>*self</code> using a volatile load.","Single-Bit Replacement","Moves <code>src</code> into the referenced bit, returning the previous …","Replaces the bit at <code>*self</code> with a new value, returning the …","Writes <code>value</code> into the proxy.","","Raw Bit-Slice Pointer Construction","Raw Bit-Slice Pointer Construction","The lower, inclusive, bound of the range. The bit to which …","","Adjusts a bit-pointer downwards in memory. This is …","Bit Swap","Swaps the bit values of two proxies.","Swaps the bits at two mutable locations.","Many-Bit Swap","Thaw a previously-frozen type, removing its <code>Frozen</code> marker …","Removes write permissions from a bit-pointer.","Adds write permissions to a bit-pointer.","","","","","","","","","Decomposes a bit-pointer into its address and head-index …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adjusts a bit-pointer upwards in memory, using wrapping …","Creates a new bit-pointer at a specified offset from the …","Adjusts a bit-pointer downwards in memory, using wrapping …","Single-Bit Write","Writes a new bit into the given location.","Bit-wise <code>memset</code>","Bit-wise <code>memset</code>","Single-Bit Unaligned Write","Writes a bit into memory, tolerating unaligned addresses.","Single-Bit Volatile Write","Writes a new bit using volatile I/O operations.","","","","","","","An iterator over <code>BitSlice</code> that yields <code>&amp;bool</code> directly.","Bit-Addressable Memory","Bit-Slice Indexing","An iterator over <code>BitSlice</code> that yields <code>bool</code> directly.","Shared Bit-Slice Chunking","Shared Bit-Slice Exact Chunking","Exclusive Bit-Slice Exact Chunking","Anti-Aliasing Iterator Adapter","Exclusive Bit-Slice Chunking","Anti-Aliasing Iterator Adapter","The output type of immutable access.","Shared Bit-Slice Iteration","Exclusive Bit-Slice Iteration","Anti-Aliasing Iterator Adapter","Bit Seeking","Bit Seeking","The inclusive maximum length of a <code>BitSlice&lt;_, T&gt;</code>.","The inclusive maximum length that a <code>[T]</code> slice can be for …","The output type of mutable access.","Shared Bit-Slice Reverse Chunking","Shared Bit-Slice Reverse Exact Chunking","Exclusive Bit-Slice Reverse Exact Chunking","Anti-Aliasing Iterator Adapter","Exclusive Bit-Slice Chunking","Anti-Aliasing Iterator Adapter","Shared Bit-Slice Reverse Splitting","Exclusive Bit-Slice Reverse Splitting","Anti-Aliasing Iterator Adapter","Shared Bit-Slice Reverse Splitting","Exclusive Bit-Slice Reverse Splitting","Anti-Aliasing Iterator Adapter","Shared Bit-Slice Splitting","Shared Bit-Slice Splitting","Exclusive Bit-Slice Splitting","Anti-Aliasing Iterator Adapter","Exclusive Bit-Slice Splitting","Anti-Aliasing Iterator Adapter","Shared Bit-Slice Splitting","Exclusive Bit-Slice Splitting","Anti-Aliasing Iterator Adapter","Bit-Slice Windowing","Produces bit-slice view(s) with different underlying …","Produces bit-slice view(s) with different underlying …","Tests if every bit is set to <code>1</code> in the bit-slice.","Tests if there is at least one bit set to <code>1</code> in the …","Gets a raw pointer to the zeroth bit of the bit-slice.","Views the bit-slice as a half-open range of bit-pointers, …","Views the currently unyielded bit-slice.","Views the remaining bit-slice that has not yet been …","","Gets a raw, write-capable pointer to the zeroth bit of the …","Views the bit-slice as a half-open range of write-capable …","","Produces a range of mutable bit-pointers to each bit in …","","Produces a range of bit-pointers to each bit in the …","","","","","","Partitions a bit-slice into maybe-contended and …","Partitions a mutable bit-slice into maybe-contended and …","","","Boolean Arithmetic","","","","","","Boolean Arithmetic","","","","","","Boolean Arithmetic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adapts the iterator to yield regular <code>&amp;bool</code> references …","Adapts the iterator to yield <code>bool</code> values rather than the …","Iterates over non-overlapping subslices of a bit-slice.","Iterates over non-overlapping subslices of a bit-slice.","Iterates over non-overlapping mutable subslices of a …","Iterates over non-overlapping mutable subslices of a …","","","","","","","","","","","","","","Copies the bits from <code>src</code> into <code>self</code>.","","","","","","","","","","","","","","","","","","Tests if the bit-slice contains the given sequence …","Yields <code>bool</code> values directly, rather than proxy references.","Copies all bits from <code>src</code> into <code>self</code>, using batched …","","Copies a span of bits to another location in the bit-slice.","Copies bits from one region of the bit-slice to another …","","","","","","","","","","","","","","","","","","","","","","","","","Counts the number of bits set to <code>1</code> in the bit-slice …","Counts the number of bits cleared to <code>0</code> in the bit-slice …","","","","","Views the underlying memory of a bit-slice, removing alias …","Views the underlying memory of a bit-slice, removing alias …","Produces an empty bit-slice with an arbitrary lifetime.","Produces an empty bit-slice with an arbitrary lifetime.","Tests if the bit-slice ends with the given sequence.","","","","","","","","","","","","","","","Fills the bit-slice with a given bit.","Fills the bit-slice with bits produced by a generator …","Gets a reference to the first bit of the bit-slice, or <code>None</code>…","Gets a mutable reference to the first bit of the …","Finds the index of the first bit in the bit-slice set to <code>1</code>.","Finds the index of the first bit in the bit-slice cleared …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a shared <code>&amp;BitSlice</code> reference over a shared …","Constructs an exclusive <code>&amp;mut BitSlice</code> reference over an …","","Raw Bit-Slice Construction","Raw Bit-Slice Construction","Raw Bit-Slice Construction","Raw Bit-Slice Construction","","Constructs a shared <code>&amp;BitSlice</code> reference over a slice of …","Constructs an exclusive <code>&amp;mut BitSlice</code> reference over a …","Constructs a shared <code>&amp;BitSlice</code> over an element slice, …","Constructs an exclusive <code>&amp;mut BitSlice</code> over an element …","Immutably indexes into a bit-slice, returning <code>None</code> if <code>self</code> …","Gets a reference to a single bit or a subsection of the …","Mutably indexes into a bit-slice, returning <code>None</code> if <code>self</code> …","Gets a mutable reference to a single bit or a subsection …","Immutably indexes into a bit-slice without doing any …","Gets a reference to a single bit or to a subsection of the …","Mutably indexes into a bit-slice without doing any bounds …","Gets a mutable reference to a single bit or a subsection …","","Immutably indexes into a bit-slice, panicking if <code>self</code> is …","","","","","","","Looks up a single bit by its semantic index.","Mutably indexes into a bit-slice, panicking if <code>self</code> is out …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Views the underlying bit-slice as a subslice of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consumes the iterator, returning the remnant bit-slice …","Consumes the iterator, returning the remnant bit-slice …","See <code>ChunksExactMut::into_remainder()</code>.","See <code>RChunksExactMut::into_remainder()</code>","","Tests if the bit-slice is empty (length zero).","Produces an iterator over each bit in the bit-slice.","Produces a mutable iterator over each bit in the bit-slice.","Enumerates the index of each bit in a bit-slice set to <code>1</code>.","Enumerates the index of each bit in a bit-slice cleared to …","","","","Gets a reference to the last bit of the bit-slice, or <code>None</code> …","","","","","","","","","","","","","","","","","","","","","","Gets a mutable reference to the last bit of the bit-slice, …","Finds the index of the last bit in the bit-slice set to <code>1</code>.","Finds the index of the last bit in the bit-slice cleared …","Counts the number of bits from the start of the bit-slice …","Counts the number of bits from the start of the bit-slice …","","","","Gets the number of bits in the bit-slice.","","","","","","","","","","","","","","","","","","","","","","<code>Lsb0</code> Big-Endian Integer Loading","<code>Msb0</code> Big-Endian Integer Loading","<code>Msb0</code> Little-Endian Integer Loading","<code>Lsb0</code> Little-Endian Integer Loading","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tests if at least one bit is cleared to <code>0</code> in the bit-slice.","Tests if every bit is cleared to <code>0</code> in the bit-slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Iterates over non-overlapping subslices of a bit-slice, …","Iterates over non-overlapping subslices of a bit-slice, …","Iterates over non-overlapping mutable subslices of a …","Iterates over non-overlapping mutable subslices of a …","","Gets the remnant bit-slice that the iterator will not …","Gets the remnant bit-slice that the iterator will not …","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Creates a bit-vector by repeating a bit-slice <code>n</code> times.","Writes a new value into a bit, and returns its previous …","Writes a new value into a bit, returning the previous …","Reverses the order of bits in a bit-slice.","Rotates the contents of a bit-slice to the left (towards …","Rotates the contents of a bit-slice to the right (away …","Iterates over subslices separated by bits that match a …","Iterates over mutable subslices separated by bits that …","Iterates over mutable subslices separated by bits that …","Iterates over mutable subslices separated by bits that …","Writes a new value into a single bit.","Writes a new value into a single bit, using alias-safe …","Writes a new value into a single bit, using alias-safe …","Writes a new value into a single bit, without bounds …","Shifts the contents of a bit-slice “left” (towards the …","Shifts the contents of a bit-slice “right” (away from …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tests if at least one bit is set to <code>1</code>, and at least one …","Iterates over subslices separated by bits that match a …","Splits a bit-slice in two parts at an index.","Splits a mutable bit-slice in two parts at an index.","Splits a bit-slice at an index, without bounds checking.","Splits a mutable bit-slice at an index, without bounds …","Splits the bit-slice into a reference to its first bit, …","Splits the bit-slice into mutable references of its first …","Iterates over subslices separated by bits that match a …","Iterates over mutable subslices separated by bits that …","Splits the bit-slice into a reference to its last bit, and …","Splits the bit-slice into mutable references to its last …","Iterates over mutable subslices separated by bits that …","Iterates over subslices separated by bits that match a …","Iterates over mutable subslices separated by bits that …","Tests if the bit-slice begins with the given sequence.","<code>Msb0</code> Big-Endian Integer Storing","<code>Lsb0</code> Big-Endian Integer Storing","<code>Msb0</code> Little-Endian Integer Storing","<code>Lsb0</code> Little-Endian Integer Storing","Removes a prefix bit-slice, if present.","Removes a suffix bit-slice, if present.","Exchanges the bit values at two indices.","Swaps two bits in a bit-slice, without bounds checking.","Swaps the contents of two bit-slices.","","Takes the remnant bit-slice out of the iterator.","Takes the remnant bit-slice out of the iterator.","See <code>ChunksExactMut::take_remainder()</code>","See <code>RChunksExactMut::take_remainder()</code>","Copies a bit-slice into an owned bit-vector.","","","","","","","","","","","","","","","","","Counts the number of bits from the end of the bit-slice to …","Counts the number of bits from the end of the bit-slice to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to construct a shared <code>&amp;BitSlice</code> reference over a …","Attempts to construct an exclusive <code>&amp;mut BitSlice</code> reference …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Iterates over consecutive windowing subslices in a …","","All implementors are required to have <code>Self</code> and <code>Self::Alias</code> …","All implementors are required to have their alignment …","A type that selects the appropriate load/store …","A sibling <code>BitStore</code> implementor that is known to be …","Bit Storage","The element type used in the memory region underlying a …","The inverse of <code>::Alias</code>. It is used when a <code>BitSlice</code> removes …","The zero constant.","Reads a single bit out of the memory system according to …","Loads a value out of the memory system according to the …","Wraps a raw memory value as a <code>BitStore</code> type.","Stores a value into the memory system. This is only called …","Bit-Precision Dynamic Array","Draining Iteration","An empty bit-vector with no backing allocation.","An iterator over a <code>BitBox</code>.","Splicing Iteration","Moves all the bits out of <code>other</code> into the back of <code>self</code>.","Creates an unsafe shared bit-pointer to the start of the …","Views the unyielded bits remaining in the drain.","Explicitly views the bit-vector as a bit-slice.","","","Creates an unsafe writable bit-pointer to the start of the …","Explicitly views the bit-vector as a mutable bit-slice.","","","","Views the bit-vector as a mutable slice of its underlying …","Views the bit-vector as a slice of its underlying memory …","","","","","","","","","","","","","","","","","","","","Gets the allocation capacity, measured in bits.","Empties the bit-vector.","","","","","","","","","Iterates over a portion of the bit-vector, <em>removing</em> all …","","","","","","","","","","Appends the contents of a bit-slice to a bit-vector.","Appends a slice of <code>T</code> elements to a bit-vector.","","Extends <code>self</code> by copying an internal range of its bit-slice …","","","","","","","","","","","Ensures that the live region of the bit-vector’s …","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Copies the contents of a bit-slice into a new heap …","Constructs a new bit-vector from a single element.","","","","","","Constructs a bit-vector handle from its constituent fields.","Constructs a new bit-vector from a slice of memory …","Converts a regular vector in-place into a bit-vector.","","","","Inserts a bit at a given position, shifting all bits after …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts a bit-vector into a boxed bit-slice.","","","","","","","Decomposes a bit-vector into its constituent member fields.","Converts a bit-vector into a <code>Vec</code> of its underlying storage.","Tests if the bit-vector is empty.","","","Destroys the <code>BitVec</code> handle without destroying the …","","Gets the length of the bit-vector.","","","","Constructs a new, empty, bit-vector.","","","","","","","","","","Attempts to remove the trailing bit from the bit-vector.","Appends a single bit to the vector.","","Removes a bit at a given position, shifting all bits after …","Creates a new bit-vector by repeating a bit for the …","Ensures that the bit-vector has allocation capacity for <em>at </em>…","Ensures that the bit-vector has allocation capacity for <em>at </em>…","Resizes the bit-vector to a new length. New bits are …","Resizes the bit-vector to a new length, using a function …","Retains only the bits that the predicate allows.","Overwrites each element (visible in <code>.as_raw_mut_slice()</code>) …","Resizes a bit-vector to a new length.","Sets the uninitialized bits of a bit-vector to a known …","Releases excess capacity back to the allocator.","","","Modifies <code>self.drain()</code> so that the removed bit-slice is …","Splits the bit-vector in half at an index, moving …","","","Takes a bit out of the bit-vector.","","","Shortens the bit-vector, keeping the first <code>new_len</code> bits …","","","","","Fallibly constructs a new bit-vector from a slice of …","Attempts to convert a regular vector in-place into a …","","","","","","","Allocates a new, empty, bit-vector with space for at least …","","Immutable Bit View","Mutable Bit View","Bit View","Helper trait for scalars and arrays, but not slices.","The underlying element type.","The zero constant.","Views <code>self</code> as an immutable bit-slice region with the <code>O</code> …","Views <code>self</code> as a mutable bit-slice region with the <code>O</code> …","Views the type as a mutable slice of its elements.","Views the type as a slice of its elements.","Wraps <code>self</code> in a <code>BitArray</code>.","Attempts to view <code>self</code> as an immutable bit-slice region …","Attempts to view <code>self</code> as a mutable bit-slice region with …","Attempts to view a memory region as an immutable bit-slice.","Attempts to view a memory region as a mutable bit-slice.","Views a memory region as an immutable bit-slice.","Views a memory region as a mutable bit-slice."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,108,108,2,5,6,7,8,2,5,6,7,8,2,5,6,7,8,2,5,6,7,8,109,2,5,6,7,8,2,5,6,7,8,109,2,5,6,7,8,109,108,2,5,6,7,8,2,5,6,7,8,2,5,6,7,8,109,2,5,6,7,8,2,5,6,7,8,2,5,6,7,8,2,5,6,7,8,2,5,6,7,8,2,5,6,7,8,2,5,6,7,8,2,5,6,7,8,109,0,0,15,15,15,16,15,15,16,15,16,15,15,15,15,16,15,15,15,15,15,15,15,15,16,15,15,16,15,16,15,16,15,16,15,15,15,15,15,15,15,15,15,15,15,16,15,15,15,16,15,15,15,15,16,15,15,15,15,16,15,16,15,16,15,15,15,16,16,16,15,16,16,15,16,15,15,15,16,15,15,15,15,15,16,15,16,15,16,0,0,23,24,24,23,24,24,24,23,24,24,24,24,24,24,24,23,24,24,23,24,24,23,24,23,24,24,23,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,23,24,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,23,24,24,23,24,23,24,24,23,23,24,23,23,24,23,24,24,23,24,24,23,24,24,24,23,24,23,24,0,0,31,32,0,31,32,31,32,28,31,32,28,28,28,31,32,28,31,32,28,31,32,31,32,31,32,32,32,32,32,32,28,31,32,28,28,28,31,32,28,32,28,32,28,32,28,28,32,32,31,32,28,28,28,28,31,32,28,32,31,32,28,31,32,28,31,32,28,110,111,111,111,112,113,113,113,0,114,114,114,114,114,114,1,0,0,0,0,0,0,14,34,36,14,34,36,1,1,1,14,35,34,36,37,1,14,35,34,36,37,1,14,35,34,36,37,1,14,35,34,36,37,1,14,35,34,36,37,1,1,14,35,34,36,37,1,14,35,34,36,37,1,14,14,14,35,35,34,34,34,36,36,36,37,37,37,1,1,1,14,35,34,36,37,1,14,35,34,36,37,1,1,14,35,34,36,37,1,14,35,34,36,37,1,14,36,37,14,34,36,37,1,14,36,37,14,1,14,35,34,36,37,1,14,14,14,14,37,34,14,36,1,1,14,35,34,36,37,1,14,35,34,36,37,1,14,35,34,36,37,1,14,35,34,36,37,1,14,35,34,36,37,1,115,0,115,115,0,0,0,0,0,0,116,48,49,48,49,48,49,48,49,48,49,48,49,48,49,48,49,48,49,48,49,48,49,48,49,116,48,49,48,49,116,48,49,48,49,48,49,48,49,48,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,117,0,51,55,0,56,12,0,0,56,12,117,117,117,12,12,51,51,51,53,51,53,51,51,0,0,30,29,53,55,51,54,56,12,30,29,53,55,51,54,56,12,51,0,30,29,53,55,51,54,56,12,30,29,53,55,51,54,56,12,30,29,53,51,54,56,12,53,55,0,51,51,0,51,51,55,30,29,55,53,53,53,0,51,55,55,0,30,29,53,53,53,55,51,54,56,12,30,29,53,53,53,55,51,51,54,54,56,56,12,12,117,30,29,53,55,55,51,51,51,54,56,56,56,12,12,12,53,51,51,55,51,51,51,0,30,29,53,55,51,54,56,12,30,29,53,55,51,54,56,12,53,55,55,55,51,55,55,51,51,55,55,53,55,55,0,0,51,51,30,29,53,53,53,51,54,56,12,51,51,51,0,51,0,51,0,51,0,53,51,53,55,0,0,55,55,51,0,53,51,0,117,51,51,30,29,53,55,51,54,56,12,51,53,54,56,12,30,29,53,55,51,51,51,54,56,12,30,29,53,55,51,54,56,12,30,29,53,55,51,54,56,12,51,51,51,0,51,0,0,0,51,0,51,118,119,120,121,122,123,0,0,0,0,0,0,0,0,0,0,124,0,0,0,0,0,11,11,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,11,11,11,11,64,65,11,11,11,11,11,11,11,64,65,11,64,65,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,64,65,67,95,96,97,98,99,11,72,68,71,69,70,73,82,74,83,75,76,77,78,79,80,81,84,85,86,87,88,89,90,91,92,93,64,65,67,95,96,97,98,99,11,72,68,71,69,70,73,82,74,83,75,76,77,78,79,80,81,84,85,86,87,88,89,90,91,92,93,64,64,11,11,11,11,64,72,68,69,73,74,75,76,77,78,79,80,81,11,11,64,72,68,69,73,74,75,76,77,78,79,80,81,11,80,81,11,64,11,11,11,11,64,65,67,72,68,71,69,70,73,82,74,83,80,81,84,85,86,87,88,89,90,91,92,93,11,11,11,11,80,81,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,80,81,11,11,11,11,11,11,11,64,65,95,96,97,98,99,11,11,11,11,11,11,11,72,68,71,69,70,73,82,74,83,75,76,77,78,79,80,81,64,65,67,95,96,97,98,99,11,72,68,71,69,70,73,82,74,83,75,76,77,78,79,80,81,84,85,86,87,88,89,90,91,92,93,11,11,0,0,0,0,0,0,11,11,11,11,124,11,124,11,124,11,124,11,11,124,11,11,11,11,11,11,11,124,11,11,11,11,11,11,64,65,67,95,96,97,98,99,11,72,68,71,69,70,73,82,74,83,75,76,77,78,79,80,81,84,85,86,87,88,89,90,91,92,93,65,64,65,67,95,96,97,98,99,11,11,72,68,71,69,70,73,82,74,83,75,76,77,78,79,80,81,84,85,86,87,88,89,90,91,92,93,70,83,86,88,65,11,11,11,11,11,64,65,67,11,72,68,71,69,70,73,82,74,83,80,81,84,85,86,87,88,89,90,91,92,93,11,11,11,11,11,64,65,67,11,72,68,71,69,70,73,82,74,83,80,81,84,85,86,87,88,89,90,91,92,93,11,11,11,11,64,65,67,95,96,97,98,99,72,68,71,69,70,73,82,74,83,75,76,77,78,79,80,81,84,85,86,87,88,89,90,91,92,93,64,65,67,95,96,97,72,68,71,69,70,73,82,74,83,75,76,77,80,81,84,85,86,87,88,89,90,91,92,93,11,11,11,64,65,67,72,68,71,69,70,73,82,74,83,84,85,86,87,88,89,90,91,92,93,64,65,67,72,68,71,69,70,73,82,74,83,84,85,86,87,88,89,90,91,92,93,11,11,11,11,11,11,11,11,11,11,11,11,11,11,80,81,11,11,11,11,11,69,74,65,95,96,97,98,99,71,70,82,83,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,64,65,67,95,96,97,98,99,72,68,71,69,70,73,82,74,83,75,76,77,78,79,80,81,84,85,86,87,88,89,90,91,92,93,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,70,83,86,88,11,64,11,72,68,69,73,74,75,76,77,78,79,80,81,11,11,11,11,64,65,67,95,96,97,98,99,11,11,11,72,68,71,69,70,73,82,74,83,75,76,77,78,79,80,81,84,85,86,87,88,89,90,91,92,93,11,11,64,65,67,95,96,97,98,99,11,72,68,71,69,70,73,82,74,83,75,76,77,78,79,80,81,84,85,86,87,88,89,90,91,92,93,64,65,67,95,96,97,98,99,11,72,68,71,69,70,73,82,74,83,75,76,77,78,79,80,81,84,85,86,87,88,89,90,91,92,93,11,11,125,125,125,125,0,125,125,125,125,125,125,125,0,0,27,0,0,27,27,105,27,27,27,27,27,27,27,27,27,27,105,27,27,105,27,27,27,27,27,27,27,105,27,27,106,105,27,27,106,27,27,27,27,27,105,106,27,27,27,27,105,27,106,27,27,27,27,27,27,27,27,27,27,27,105,27,27,27,27,27,27,27,106,27,105,27,27,27,27,27,27,106,27,27,27,27,27,27,27,27,27,27,27,27,27,27,105,27,106,27,27,105,27,27,27,106,27,27,27,105,106,27,105,27,106,27,27,27,105,106,105,106,27,105,105,106,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,105,106,27,27,27,27,27,27,27,27,105,27,27,106,27,27,105,27,106,105,27,106,27,27,0,0,0,0,126,127,128,129,127,127,127,128,129,126,126,126,126],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[[2,3],4],[[5,3],4],[[6,3],4],[[7,3],4],[[8,3],4],[[]],[[]],[[]],[[]],[[]],[9],[[]],[[]],[[]],[[]],[[]],[1],[[]],[2],[5],[6],[7],[8],[2],[5],[6],[7],[8],[[],2],[[],5],[[],6],[[],7],[[],8],[1],[2],[5],[6],[7],[8],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],[[10,[11,12]]]],[[],[[10,[11,12]]]],[[],[[10,[11,12]]]],[[],[[10,[11,12]]]],[[],[[10,[11,12]]]],[[],[[10,[11,12]]]],[[],[[10,[11,12]]]],[[],[[10,[11,12]]]],[[],[[10,[11,12]]]],[[],[[10,[11,12]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[14,9],9],0,0,0,0,[15,11],[16,11],[15,11],[15,11],[16,11],[15,11],[16,11],[15],[15],[15,11],[15,11],[16,11],[15],[15],[15],[15],[15],[15],[[]],[15,11],[[]],[15,11],[[]],[[]],[15,15],[[[16,[17,17]]],[[16,[17,17]]]],[[]],[[]],[[15,15],18],[16,19],0,[[],15],[15],[15],[15,9],[[15,3],4],[[15,3],4],[[15,3],4],[[15,3],4],[[15,3],4],[[15,3],4],[[16,3],4],[[]],[[],15],[20],[[]],[15],[15],[15],[[]],[[]],[15],[15],[15],[15],[[]],[15,9],[16,21],[15,19],[16,19],[15],[15],[[],15],[15,16],[16,21],[16,21],[15],[[16,19],21],[[16,19],21],[15,[[21,[18]]]],[16],[15],[15],[[]],[[]],[[],22],[11,[[10,[15]]]],[11,[[10,[15]]]],[11,[[10,[15]]]],[[],10],[[],10],[[],10],[[],10],[[],13],[[],13],0,0,[23,11],[24,11],[24,11],[23,11],[24,11],[24],[24],[23,11],[24,11],[24],[24],[24],[24],[24],[24],[[]],[[]],[24,11],[[]],[[]],[24,11],[23,23],[24,24],[[]],[[]],[[24,24],18],[23,19],[[],24],[24],[24],[24],[24,9],[[24,9]],[[23,3],4],[[24,3],4],[[24,3],4],[[24,3],4],[[24,3],4],[[24,3],4],[[24,3],4],[[24,3],4],[24],[[]],[[]],[11,24],[15,24],[25,24],[[[26,[11]]],24],[27,24],[11,24],[25,24],[[],24],[11,24],[24],[24],[24],[[]],[[]],[24,27],[24,25],[[]],[24],[24,11],[23,21],[24,11],[23,19],[24],[24],[23,21],[23,21],[24],[[23,19],21],[[23,19],21],[24,[[21,[18]]]],[23],[24],[24],[[]],[[]],[[],22],[[],10],[[],10],[25,[[10,[24]]]],[25,[[10,[24,25]]]],[[],10],[[],10],[[],13],[[],13],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[28],[[[28,[29]]]],[[[31,[30]]],[[31,[30]]]],[[[32,[30]]],[[32,[30]]]],[[[28,[30]]],[[28,[30]]]],[[]],[[]],[[]],[[],31],[[],32],[31,[[21,[[33,[11]]]]]],[32,[[21,[28]]]],[[31,3],4],[[32,3],4],[[[32,[30]],3],4],[[[32,[30]],3],4],[[[32,[30]],3],4],[[[32,[30]],3],4],[[[32,[30]],3],4],[[28,3],4],[[]],[[]],[[]],[28],[28,14],[[]],[[]],[[]],[32,31],[28,[[33,[11]]]],[[]],[[[28,[29]]]],[[[32,[30]]],19],[28],[28,1],[[[32,[30]]],21],[[[32,[30]]],21],[31,21],[32,21],[[[28,[29]]]],[[[28,[29]]]],[28],[28,34],[[]],[[]],[[]],[[],22],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],13],[[],13],[[],13],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[14,[17]]],[[14,[17]]]],[[[35,[17]]],[[35,[17]]]],[[[34,[17]]],[[34,[17]]]],[[[36,[17]]],[[36,[17]]]],[[[37,[17]]],[[37,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[14,[38]],14],18],[[[35,[38]],35],18],[[[34,[38]],34],18],[[[36,[38]],36],18],[[[37,[38]],37],18],[[[1,[38]],1],18],[[1,37],1],[[],[[14,[39]]]],[[],[[35,[39]]]],[[],[[34,[39]]]],[[],[[36,[39]]]],[[],[[37,[39]]]],[[],[[1,[39]]]],[[[14,[40]],14],9],[[[35,[40]],35],9],[[[34,[40]],34],9],[[[36,[40]],36],9],[[[37,[40]],37],9],[[[1,[40]],1],9],[[14,3],4],[[14,3],4],[[14,3],4],[[35,3],4],[[35,3],4],[[34,3],4],[[34,3],4],[[34,3],4],[[36,3],4],[[36,3],4],[[36,3],4],[[37,3],4],[[37,3],4],[[37,3],4],[[1,3],4],[[1,3],4],[[1,3],4],[[]],[[]],[[]],[[]],[[]],[[]],[[[14,[41]]]],[[[35,[41]]]],[[[34,[41]]]],[[[36,[41]]]],[[[37,[41]]]],[[[1,[41]]]],[[1,37]],[[]],[[]],[[]],[[]],[[]],[[]],[14,42],[35,42],[34,42],[36,42],[37],[1],[14,1],[36,1],[37,1],[42,[[10,[14,35]]]],[42,[[21,[34]]]],[42,[[21,[36]]]],[[],[[21,[37]]]],[[],1],[42,14],[42,36],[[],37],[14],[1],[[[14,[43]],14],[[21,[18]]]],[[[35,[43]],35],[[21,[18]]]],[[[34,[43]],34],[[21,[18]]]],[[[36,[43]],36],[[21,[18]]]],[[[37,[43]],37],[[21,[18]]]],[[[1,[43]],1],[[21,[18]]]],[14,36],[14],[[14,34],[[0,[44,45,46,47]]]],[[],[[0,[44,45,46,47]]]],[[],[[0,[44,45,46,47]]]],[14,[[0,[44,45,46,47]]]],[14,37],[36,37],[[],1],[[1,37],9],[[]],[[]],[[]],[[]],[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,0,[[],19],[19,19],0,0,0,0,[14,36],[14,36],[14,36],[[]],[[]],[[]],[[]],[48,48],[49,49],[[]],[[]],[[48,48],18],[[49,49],18],[[],48],[[],49],[[48,48],9],[[49,49],9],[[48,3],4],[[49,3],4],[[]],[[]],[48],[49],[[]],[[]],[[[50,[[21,[14]]]],[50,[[21,[34]]]]],1],[[[50,[[21,[14]]]],[50,[[21,[34]]]]],1],[[[50,[[21,[14]]]],[50,[[21,[34]]]]],1],[[48,48],[[21,[18]]]],[[49,49],[[21,[18]]]],[14,37],[14,37],[14,37],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],13],[[],13],[9],[9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[51,19],51],[51,52],[[51,19],19],[[[53,[29]]],9],[[[51,[29]]],[[21,[[53,[29]]]]]],[53,9],[51,[[21,[[53,[30]]]]]],[51,14],[[[51,[30]],19],11],[[[51,[29]],19],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[51,51],[52,[[10,[52,54]]]],[30,30],[29,29],[[[53,[30]]],[[53,[30]]]],[55,55],[51,51],[[[54,[17]]],[[54,[17]]]],[[[56,[17]]],[[56,[17]]]],[[[12,[17]]],[[12,[17]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[30,30],18],[[29,29],18],[[53,53],18],[[51,51],18],[[[54,[38]],54],18],[[[56,[38]],56],18],[[[12,[38]],12],18],[[[53,[29]],9]],[[55,51],9],[[[51,[30]],[51,[29]],19]],[[[51,[29]],[51,[30]],19]],[[[51,[29]],[51,[30]],19]],[[[51,[30]],[51,[29]],19]],[[51,[51,[29]],19]],[[51,[51,[29]],19]],[55,19],[[],30],[[],29],[[],55],[53],[[[53,[29]]]],[53],[[[51,[29]]]],[[[51,[29]]]],0,[55,[[57,[51]]]],[[[51,[30]],[51,[30]]],9],[[30,30],9],[[29,29],9],[[53,9],9],[[53,53],9],[[53,9],9],[[55,55],9],[[51,51],9],[[[54,[40]],54],9],[[[56,[40]],56],9],[[[12,[40]],12],9],[[30,3],[[10,[58]]]],[[29,3],[[10,[58]]]],[[53,3],4],[[53,3],4],[[53,3],4],[[55,3],4],[[51,3],4],[[51,3],4],[[54,3],4],[[54,3],4],[[[56,[59]],3],4],[[56,3],4],[[12,3],4],[[12,3],4],[[],60],[[]],[[]],[[]],[[[61,[51]]],55],[[]],[[],[[51,[30]]]],[[]],[[],[[51,[29]]]],[[]],[62,56],[54,56],[[]],[54,12],[[]],[56,12],[51,53],[[],[[51,[29]]]],[[],[[51,[29]]]],[[[61,[51]]],55],[[],[[51,[30]]]],[[],[[51,[30]]]],[[],[[51,[29]]]],[[[51,[30]]]],[30],[29],[53],[55],[51],[[[54,[41]]]],[[[56,[41]]]],[[[12,[41]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[53,51],[[]],[55,[[61,[51]]]],[55,9],[51,9],[55,21],[55,19],[[52,14],[[10,[51,54]]]],[[52,14],51],[55,21],[55,21],[53],[[55,19],21],[[55,19],21],[[],[[51,[30]]]],[[],[[51,[29]]]],[[51,63],51],[[51,51],63],[[30,30],[[21,[18]]]],[[29,29],[[21,[18]]]],[[53,53],[[21,[18]]]],[[53,9],[[21,[18]]]],[[53,9],[[21,[18]]]],[[51,51],[[21,[18]]]],[[[54,[43]],54],[[21,[18]]]],[[[56,[43]],56],[[21,[18]]]],[[[12,[43]],12],[[21,[18]]]],[[[51,[29]]]],[[[51,[30]]]],[51],[[[51,[30]]],9],[51,9],[[[51,[30]]],9],[51,9],[[[51,[30]]],9],[51,9],[[[51,[29]],9],9],[[[53,[29]],9],9],[[[51,[29]],9],9],[[[53,[29]],9]],[55],[[[51,[30]],19],11],[[[51,[29]],19],11],0,[55,[[57,[51]]]],[[51,19],51],[[[51,[29]],[51,[29]]]],[[[53,[29]],53]],[[[51,[29]],[51,[29]]]],[[[51,[29]],[51,[29]],19]],[60],[51,[[51,[30]]]],[51,[[51,[29]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[51],[[],22],[[],22],[[],22],[[],22],[[],10],[[],10],[[],10],[[],10],[[],10],[[],[[10,[[51,[29]]]]]],[[],[[10,[[51,[30]]]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[51,19],51],[[51,63],51],[[51,19],51],[[[51,[29]],9]],[[[51,[29]],9]],[[[51,[29]],9,19]],[[[51,[29]],9,19]],[[[51,[29]],9]],[[[51,[29]],9]],[[[51,[29]],9]],[[[51,[29]],9]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[11],[11],[11,9],[11,9],[11,[[51,[30]]]],[11,[[55,[30]]]],[64,11],[65,11],[11,11],[11,[[51,[29]]]],[11,[[55,[29]]]],[11,[[51,[29]]]],[11,[[61,[[51,[29]]]]]],[11,[[51,[30]]]],[11,[[61,[[51,[30]]]]]],[64,11],[65,11],[11,11],[64,11],[65,11],[11,[[31,[30]]]],[11,[[31,[29]]]],[[11,27]],[[11,24]],[[11,11]],[[11,15]],[[11,15]],[[11,24]],[[11,27]],[[11,24]],[[11,11]],[[11,27]],[[11,27]],[[11,15]],[[11,15]],[[11,24]],[[11,11]],[[11,27]],[[11,27]],[[11,24]],[[11,24]],[[11,15]],[[11,15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[64,66],[64,67],[[11,19],68],[[11,19],69],[[11,19],70],[[11,19],71],[64,64],[[[72,[17,17]]],[[72,[17,17]]]],[[[68,[17,17]]],[[68,[17,17]]]],[[[69,[17,17]]],[[69,[17,17]]]],[[[73,[17,17]]],[[73,[17,17]]]],[[[74,[17,17]]],[[74,[17,17]]]],[[[75,[17,17,17]]],[[75,[17,17,17]]]],[[[76,[17,17,17]]],[[76,[17,17,17]]]],[[[77,[17,17,17]]],[[77,[17,17,17]]]],[[[78,[17,17,17]]],[[78,[17,17,17]]]],[[[79,[17,17,17]]],[[79,[17,17,17]]]],[[[80,[17,17]]],[[80,[17,17]]]],[[[81,[17,17]]],[[81,[17,17]]]],[[11,11]],[[11,11]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[11,11],18],[[[80,[38,38]],80],18],[[[81,[38,38]],81],18],[[11,11],9],[64,67],[[11,11]],[[11,11]],[[11,19]],[[11,19]],[64,19],[65,19],[67,19],[72,19],[68,19],[71,19],[69,19],[70,19],[73,19],[82,19],[74,19],[83,19],[80,19],[81,19],[84,19],[85,19],[86,19],[87,19],[88,19],[89,19],[90,19],[91,19],[92,19],[93,19],[11,19],[11,19],[[],11],[[],11],[[],80],[[],81],[11,[[32,[30]]]],[11,[[32,[29]]]],[[],11],[[],11],[[11,11],9],[[11,11],9],[[11,11],9],[[11,24],9],[[11,24],9],[[11,24],9],[[11,27],9],[[11,11],9],[[11,27],9],[[11,15],9],[[11,11],9],[[11,11],9],[[11,27],9],[[[80,[40,40]],80],9],[[[81,[40,40]],81],9],[[11,9]],[11],[11,[[21,[[53,[30]]]]]],[11,[[21,[[53,[29]]]]]],[11,[[21,[19]]]],[11,[[21,[19]]]],[11,94],[[64,3],4],[[65,3],4],[[95,3],4],[[96,3],4],[[97,3],4],[[98,3],4],[[99,3],4],[[11,3],4],[[11,3],4],[[11,3],4],[[11,3],4],[[11,3],4],[[11,3],4],[[11,3],4],[[[72,[59,59]],3],4],[[[68,[59,59]],3],4],[[[71,[59,59]],3],4],[[[69,[59,59]],3],4],[[[70,[59,59]],3],4],[[[73,[59,59]],3],4],[[[82,[59,59]],3],4],[[[74,[59,59]],3],4],[[[83,[59,59]],3],4],[[75,3],4],[[76,3],4],[[77,3],4],[[78,3],4],[[79,3],4],[[[80,[59,59]],3],4],[[[81,[59,59]],3],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[[51,[30]],19],[[10,[11,12]]]],[[[51,[29]],19],[[10,[11,12]]]],[[[51,[30]],19],11],[[[51,[29]],19],11],[[],11],[[],11],[[],11],[[],11],[[],11],[11,21],[11,21],[11,21],[11,21],[11],[11],[11],[11],[11],[11],[[11,[100,[19]]]],[[11,[101,[19]]]],[[11,102]],[[11,[103,[19]]]],[[11,[104,[19]]]],[[11,[61,[19]]]],[[11,19]],[11],[[11,102]],[[11,[100,[19]]]],[[11,[61,[19]]]],[[11,[103,[19]]]],[[11,[101,[19]]]],[[11,[104,[19]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[65,11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11],[11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[70,11],[83,11],[86,11],[88,11],[65,11],[11,9],[11,64],[11,65],[11,80],[11,81],[64,21],[65,21],[67,21],[11,[[21,[[53,[30]]]]]],[72,21],[68,21],[71,21],[69,21],[70,21],[73,21],[82,21],[74,21],[83,21],[80,21],[81,21],[84,21],[85,21],[86,21],[87,21],[88,21],[89,21],[90,21],[91,21],[92,21],[93,21],[11,[[21,[[53,[29]]]]]],[11,[[21,[19]]]],[11,[[21,[19]]]],[11,19],[11,19],[64,19],[65,19],[67,19],[11,19],[72,19],[68,19],[71,19],[69,19],[70,19],[73,19],[82,19],[74,19],[83,19],[80,19],[81,19],[84,19],[85,19],[86,19],[87,19],[88,19],[89,19],[90,19],[91,19],[92,19],[93,19],[[[11,[48]]]],[[[11,[49]]]],[[[11,[49]]]],[[[11,[48]]]],[64,21],[65,21],[67,21],[95,21],[96,21],[97,21],[98,21],[99,21],[72,21],[68,21],[71,21],[69,21],[70,21],[73,21],[82,21],[74,21],[83,21],[75,21],[76,21],[77,21],[78,21],[79,21],[80,21],[81,21],[84,21],[85,21],[86,21],[87,21],[88,21],[89,21],[90,21],[91,21],[92,21],[93,21],[64,21],[65,21],[67,21],[95,21],[96,21],[97,21],[72,21],[68,21],[71,21],[69,21],[70,21],[73,21],[82,21],[74,21],[83,21],[75,21],[76,21],[77,21],[80,21],[81,21],[84,21],[85,21],[86,21],[87,21],[88,21],[89,21],[90,21],[91,21],[92,21],[93,21],[11],[11,9],[11,9],[[64,19],21],[[65,19],21],[[67,19],21],[[72,19],21],[[68,19],21],[[71,19],21],[[69,19],21],[[70,19],21],[[73,19],21],[[82,19],21],[[74,19],21],[[83,19],21],[[84,19],21],[[85,19],21],[[86,19],21],[[87,19],21],[[88,19],21],[[89,19],21],[[90,19],21],[[91,19],21],[[92,19],21],[[93,19],21],[[64,19],21],[[65,19],21],[[67,19],21],[[72,19],21],[[68,19],21],[[71,19],21],[[69,19],21],[[70,19],21],[[73,19],21],[[82,19],21],[[74,19],21],[[83,19],21],[[84,19],21],[[85,19],21],[[86,19],21],[[87,19],21],[[88,19],21],[[89,19],21],[[90,19],21],[[91,19],21],[[92,19],21],[[93,19],21],[[11,27],[[21,[18]]]],[[11,11],[[21,[18]]]],[[11,11],[[21,[18]]]],[[11,24],[[21,[18]]]],[[11,15],[[21,[18]]]],[[11,24],[[21,[18]]]],[[11,24],[[21,[18]]]],[[11,11],[[21,[18]]]],[[11,11],[[21,[18]]]],[[11,27],[[21,[18]]]],[[11,27],[[21,[18]]]],[[11,11],[[21,[18]]]],[[11,11],[[21,[18]]]],[[11,11],[[21,[18]]]],[[[80,[43,43]],80],[[21,[18]]]],[[[81,[43,43]],81],[[21,[18]]]],[[11,19],73],[[11,19],74],[[11,19],83],[[11,19],82],[11,[[94,[19]]]],[69,11],[74,11],[65,84],[95,89],[96,90],[97,91],[98,92],[99,93],[71,85],[70,86],[82,87],[83,88],[[11,19],27],[[11,19,9],9],[[11,19,9],9],[11],[[11,19]],[[11,19]],[11,77],[11,97],[[11,19],79],[[11,19],99],[[11,19,9]],[[11,19,9]],[[11,19,9]],[[11,19,9]],[[11,19]],[[11,19]],[64],[65],[67],[95],[96],[97],[98],[99],[72],[68],[71],[69],[70],[73],[82],[74],[83],[75],[76],[77],[78],[79],[80],[81],[84],[85],[86],[87],[88],[89],[90],[91],[92],[93],[11,9],[11,75],[[11,19]],[[11,19]],[[11,19]],[[11,19]],[11,21],[11,21],[11,76],[11,96],[11,21],[11,21],[11,95],[[11,19],78],[[11,19],98],[[11,11],9],[[[11,[49]]]],[[[11,[48]]]],[[[11,[49]]]],[[[11,[48]]]],[[11,11],[[21,[11]]]],[[11,11],[[21,[11]]]],[[11,19,19]],[[11,19,19]],[[11,11]],[[11,11]],[70,11],[83,11],[86,11],[88,11],[11,27],[[]],[11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],22],[11,27],[11,19],[11,19],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],[[10,[11]]]],[[],[[10,[11]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],[[10,[11,12]]]],[[],[[10,[11,12]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[11,19],72],[11,[[94,[19]]]],0,0,0,0,0,0,0,0,[14,9],[[]],[[]],[[]],0,0,0,0,0,[[27,27]],[27,[[51,[30]]]],[105,11],[27,11],[27,11],[27,27],[27,[[51,[29]]]],[27,11],[27,[[51,[29]]]],[27,11],[27,[[51,[30]]]],[27],[27],[105,11],[27,27],[27,11],[105,11],[27,11],[27],[27],[27],[27],[27],[27],[[]],[[]],[27,11],[[]],[[]],[[]],[27,11],[[]],[27,19],[27],[27,27],[[]],[[27,27],18],[105,19],[106,19],[[],27],[27],[27],[27,105],[105],[27],[106],[27,9],[27],[27],[27],[27],[27],[[27,11]],[27],[[27,11]],[27],[27,94],[[105,3],4],[[27,3],4],[[27,3],4],[[27,3],4],[[27,3],4],[[27,3],4],[[27,3],4],[[27,3],4],[[[106,[59,59,59]],3],4],[27],[[]],[11,27],[[]],[[[26,[11]]],27],[24,27],[15,27],[11,27],[[]],[11,27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[[51,[29]],19,19],27],[[],27],[107,27],[27],[27],[27],[[27,19,9]],[[]],[[]],[[]],[27,24],[27,24],[[]],[27],[27],[27],[[]],[27],[27,107],[27,9],[105,21],[106,21],[27,11],[105,19],[27,19],[106,19],[27],[27],[[],27],[105,21],[106,21],[105,21],[106,21],[27],[[105,19],21],[[105,19],21],[[106,19],21],[27,[[21,[18]]]],[27,[[21,[9]]]],[[27,9]],[27,[[94,[19]]]],[[27,19],9],[[9,19],27],[[27,19]],[[27,19]],[[27,19,9]],[[27,19]],[27],[27],[[27,19]],[[27,9]],[27],[105],[106],[27,106],[[27,19],27],[27],[27],[[27,19],9],[[]],[[],22],[[27,19]],[[],10],[[],10],[107,[[10,[27]]]],[[],10],[[],[[10,[27,12]]]],[107,[[10,[27,107]]]],[[],10],[[],10],[[],10],[[],13],[[],13],[[],13],[19,27],[27,[[94,[19]]]],0,0,0,0,0,0,[[],11],[[],11],[[]],[[]],[[],15],[[],[[10,[11,12]]]],[[],[[10,[11,12]]]],[[],[[10,[11,12]]]],[[],[[10,[11,12]]]],[[],11],[[],11]],"p":[[3,"BitMask"],[3,"BitSafeU8"],[3,"Formatter"],[6,"Result"],[3,"BitSafeU16"],[3,"BitSafeU32"],[3,"BitSafeU64"],[3,"BitSafeUsize"],[15,"bool"],[4,"Result"],[3,"BitSlice"],[4,"BitSpanError"],[3,"TypeId"],[3,"BitIdx"],[3,"BitArray"],[3,"IntoIter"],[8,"Clone"],[4,"Ordering"],[15,"usize"],[15,"never"],[4,"Option"],[3,"String"],[3,"IntoIter"],[3,"BitBox"],[3,"Box"],[4,"Cow"],[3,"BitVec"],[3,"PartialElement"],[3,"Mut"],[3,"Const"],[4,"BitDomain"],[4,"Domain"],[6,"Reference"],[3,"BitEnd"],[3,"BitIdxError"],[3,"BitPos"],[3,"BitSel"],[8,"Ord"],[8,"Default"],[8,"PartialEq"],[8,"Hash"],[15,"u8"],[8,"PartialOrd"],[8,"Iterator"],[8,"DoubleEndedIterator"],[8,"ExactSizeIterator"],[8,"FusedIterator"],[3,"Lsb0"],[3,"Msb0"],[8,"Into"],[3,"BitPtr"],[3,"Address"],[3,"BitRef"],[3,"MisalignError"],[3,"BitPtrRange"],[4,"BitPtrError"],[4,"Bound"],[3,"Error"],[8,"Debug"],[3,"Frozen"],[3,"Range"],[3,"NullPtrError"],[15,"isize"],[3,"Iter"],[3,"IterMut"],[6,"BitRefIter"],[3,"BitValIter"],[3,"Chunks"],[3,"ChunksExact"],[3,"ChunksExactMut"],[3,"ChunksMut"],[3,"Windows"],[3,"RChunks"],[3,"RChunksExact"],[3,"Split"],[3,"SplitInclusive"],[3,"RSplit"],[3,"SplitN"],[3,"RSplitN"],[3,"IterOnes"],[3,"IterZeros"],[3,"RChunksMut"],[3,"RChunksExactMut"],[3,"IterMutNoAlias"],[3,"ChunksMutNoAlias"],[3,"ChunksExactMutNoAlias"],[3,"RChunksMutNoAlias"],[3,"RChunksExactMutNoAlias"],[3,"SplitMutNoAlias"],[3,"SplitInclusiveMutNoAlias"],[3,"RSplitMutNoAlias"],[3,"SplitNMutNoAlias"],[3,"RSplitNMutNoAlias"],[6,"Result"],[3,"SplitMut"],[3,"SplitInclusiveMut"],[3,"RSplitMut"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"RangeTo"],[3,"RangeToInclusive"],[3,"RangeFull"],[3,"RangeInclusive"],[3,"RangeFrom"],[3,"Drain"],[3,"Splice"],[3,"Vec"],[8,"BitSafe"],[8,"BitAccess"],[13,"Enclave"],[13,"Region"],[13,"Enclave"],[13,"Region"],[8,"BitField"],[8,"BitRegister"],[8,"BitOrder"],[8,"Mutability"],[13,"Null"],[13,"Misaligned"],[13,"Null"],[13,"Misaligned"],[13,"TooLong"],[13,"TooHigh"],[8,"BitSliceIndex"],[8,"BitStore"],[8,"BitView"],[8,"BitViewSized"],[8,"AsBits"],[8,"AsMutBits"]]},\
"blake2":{"doc":"An implementation of the BLAKE2 hash functions.","t":[6,6,6,3,6,6,3,6,6,6,3,6,6,3,8,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,2,10,10,11,11,10,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Blake2b","Blake2b512","Blake2bCore","Blake2bMac","Blake2bMac512","Blake2bVar","Blake2bVarCore","Blake2s","Blake2s256","Blake2sCore","Blake2sMac","Blake2sMac256","Blake2sVar","Blake2sVarCore","Digest","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain_update","chain_update","chain_update","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","digest","digest","finalize","finalize","finalize","finalize_into","finalize_into","finalize_into","finalize_into_reset","finalize_reset","finalize_reset","finalize_reset","finalize_variable_core","finalize_variable_core","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","new","new","new","new","new","new","new","new_from_slice","new_from_slice","new_from_slice","new_from_slice","new_with_params","new_with_params","new_with_prefix","new_with_salt_and_personal","new_with_salt_and_personal","output_size","reset","reset","reset","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update","update","update","update","update","update_blocks","update_blocks","verify","verify","verify_slice","verify_slice","verify_truncated_left","verify_truncated_left","verify_truncated_right","verify_truncated_right","write_alg_name","write_alg_name"],"q":["blake2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["BLAKE2b generic over output size.","BLAKE2b-512 hasher state.","Core hasher state of BLAKE2b generic over output size.","Blake2b MAC function","BLAKE2b-512 MAC state.","BLAKE2b which allows to choose output size at runtime.","Blake2b instance with a variable output.","BLAKE2s generic over output size.","BLAKE2s-256 hasher state.","Core hasher state of BLAKE2s generic over output size.","Blake2s MAC function","BLAKE2s-256 MAC state.","BLAKE2s which allows to choose output size at runtime.","Blake2s instance with a variable output.","Convinience wrapper trait covering functionality of …","","","","","","","","","Process input data in a chained manner.","","","","","","","","","","","","Compute hash of <code>data</code>.","Retrieve result and consume hasher instance.","","","Write result into provided array and consume the hasher …","","","Write result into provided array and reset the hasher …","Retrieve result and reset hasher instance.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create new hasher instance.","","","","","","","","","","","Creates a new context with the full set of sequential-mode …","Creates a new context with the full set of sequential-mode …","Create new hasher instance which has processed the …","Create new instance using provided key, salt, and persona.","Create new instance using provided key, salt, and persona.","Get output size of the hasher","Reset hasher instance to its initial state.","","","","","","","","","","","","","","","","","","","Process data, updating the internal state.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,5,6,2,4,5,6,21,4,6,2,4,5,6,2,4,5,6,0,21,21,4,6,21,4,6,21,21,4,6,2,5,2,4,5,6,2,4,5,6,2,4,5,6,21,2,4,4,5,6,6,4,4,6,6,2,5,21,4,6,21,21,4,6,2,4,5,6,2,4,5,6,2,4,5,6,2,4,5,6,21,4,4,6,6,2,5,4,6,4,6,4,6,4,6,2,5],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[1],[1],[2,2],[[[4,[3]]],[[4,[3]]]],[5,5],[[[6,[3]]],[[6,[3]]]],[[]],[[]],[[]],[[]],0,[1,[[8,[7]]]],[[],[[8,[7]]]],[[],9],[[],9],[8],[[4,10]],[[6,10]],[8],[[],[[8,[7]]]],[[],9],[[],9],[[2,11,10]],[[5,11,10]],[[2,12],13],[[4,12],13],[[5,12],13],[[6,12],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,[[16,[2,15]]]],[8],[17,4],[14,[[16,[5,15]]]],[8],[17,6],[[],[[16,[4,18]]]],[[],[[16,[18]]]],[[],[[16,[18]]]],[[],[[16,[6,18]]]],[[14,14],2],[[14,14],5],[1],[[],[[16,[4,18]]]],[[],[[16,[6,18]]]],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],19],[[],19],[[],19],[[],19],[1],[4],[[]],[[]],[6],[2],[5],[8,[[16,[20]]]],[8,[[16,[20]]]],[[],[[16,[20]]]],[[],[[16,[20]]]],[[],[[16,[20]]]],[[],[[16,[20]]]],[[],[[16,[20]]]],[[],[[16,[20]]]],[12,13],[12,13]],"p":[[8,"AsRef"],[3,"Blake2bVarCore"],[8,"Clone"],[3,"Blake2bMac"],[3,"Blake2sVarCore"],[3,"Blake2sMac"],[15,"u8"],[3,"GenericArray"],[3,"CtOutput"],[6,"Output"],[6,"Buffer"],[3,"Formatter"],[6,"Result"],[15,"usize"],[3,"InvalidOutputSize"],[4,"Result"],[6,"Key"],[3,"InvalidLength"],[3,"TypeId"],[3,"MacError"],[8,"Digest"]]},\
"block_buffer":{"doc":"Fixed size buffer for block processing of data.","t":[6,3,8,3,6,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Block","BlockBuffer","BufferKind","Eager","EagerBuffer","Lazy","LazyBuffer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","default","default","default","digest_blocks","digest_pad","fmt","fmt","fmt","from","from","from","generic_array","get_data","get_pos","into","into","into","len128_padding_be","len64_padding_be","len64_padding_le","new","pad_with_zeros","remaining","reset","set","set_data","size","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["block_buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Block on which <code>BlockBuffer</code> operates.","Buffer for block processing of data.","Trait for buffer kinds.","Eager block buffer kind, which guarantees that buffer …","Eager block buffer.","Lazy block buffer kind, which guarantees that buffer …","Lazy block buffer.","","","","","","","","","","","","","Digest data in <code>input</code> in blocks of size <code>BlockSize</code> using the …","Compress remaining data after padding it with <code>delim</code>, zeros …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Return slice of data stored inside the buffer.","Return current cursor position.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Pad message with 0x80, zeros and 128-bit message length …","Pad message with 0x80, zeros and 64-bit message length …","Pad message with 0x80, zeros and 64-bit message length …","Create new buffer from slice.","Pad remaining data with zeros and return resulting block.","Return number of remaining bytes in the internall buffer.","Reset buffer by setting cursor position to zero.","Set buffer content and cursor position.","Set <code>data</code> to generated blocks.","Return size of the internall buffer in bytes.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,3,3,1,2,3,1,2,3,0,3,3,1,2,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,2,3,1,2,3],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[[],1],[[],2],[[],3],[[3,4]],[[[3,[1]],5,4]],[[1,6],7],[[2,6],7],[[[3,[8,8]],6],7],[[]],[[]],[[]],0,[3],[3,9],[[]],[[]],[[]],[[[3,[1]],10,4]],[[[3,[1]],11,4]],[[[3,[1]],11,4]],[[],3],[3,12],[3,9],[3],[[3,12,9]],[[[3,[1]],4]],[3,9],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14]],"p":[[3,"Eager"],[3,"Lazy"],[3,"BlockBuffer"],[8,"FnMut"],[15,"u8"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"usize"],[15,"u128"],[15,"u64"],[6,"Block"],[4,"Result"],[3,"TypeId"]]},\
"byte_slice_cast":{"doc":"Safely cast bytes slices from/to slices of built-in …","t":[13,8,8,8,8,4,8,13,8,8,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,11,10,10,11,11,11,11,11,12,12,12,12,12],"n":["AlignmentMismatch","AsByteSlice","AsMutByteSlice","AsMutSliceOf","AsSliceOf","Error","FromByteSlice","LengthMismatch","ToByteSlice","ToMutByteSlice","as_byte_slice","as_mut_byte_slice","as_mut_slice_of","as_slice_of","borrow","borrow_mut","clone","clone_into","description","eq","fmt","fmt","from","from_byte_slice","from_mut_byte_slice","into","to_byte_slice","to_mut_byte_slice","to_owned","to_string","try_from","try_into","type_id","dst_minimum_alignment","dst_type","dst_type","dst_type_size","src_slice_size"],"q":["byte_slice_cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","byte_slice_cast::Error","","","",""],"d":["The input slice is not properly aligned for the output …","Trait for converting from an immutable slice of a …","Trait for converting from a mutable slice of a …","Trait for converting from a mutable byte slice to a …","Trait for converting from a byte slice to a slice of a …","Possible errors during slice conversion.","Trait for converting from a byte slice to a slice of a …","A non-integer number of values from the output type would …","Trait for converting from an immutable slice of a …","Trait for converting from a mutable slice of a …","","","","","","","","","","","","","Returns the argument unchanged.","Convert from an immutable byte slice to a immutable slice …","Convert from an mutable byte slice to a mutable slice of a …","Calls <code>U::from(self)</code>.","Convert from an immutable slice of a fundamental, built-in …","Convert from a mutable slice of a fundamental, built-in …","","","","","","","","","",""],"i":[1,0,0,0,0,0,0,1,0,0,10,11,12,13,1,1,1,1,1,1,1,1,1,14,14,1,15,16,1,1,1,1,1,17,17,18,18,18],"f":[0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],[[2,[1]]]],[[],[[2,[1]]]],[[]],[[]],[1,1],[[]],[1,3],[[1,1],4],[[1,5],[[2,[6]]]],[[1,5],7],[[]],[[],[[2,[1]]]],[[],[[2,[1]]]],[[]],[[]],[[]],[[]],[[],8],[[],2],[[],2],[[],9],0,0,0,0,0],"p":[[4,"Error"],[4,"Result"],[15,"str"],[15,"bool"],[3,"Formatter"],[3,"Error"],[6,"Result"],[3,"String"],[3,"TypeId"],[8,"AsByteSlice"],[8,"AsMutByteSlice"],[8,"AsMutSliceOf"],[8,"AsSliceOf"],[8,"FromByteSlice"],[8,"ToByteSlice"],[8,"ToMutByteSlice"],[13,"AlignmentMismatch"],[13,"LengthMismatch"]]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":[14],"n":["cfg_if"],"q":["cfg_if"],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"p":[]},\
"cpufeatures":{"doc":"This crate provides macros for runtime CPU feature …","t":[14],"n":["new"],"q":["cpufeatures"],"d":["Create module with CPU feature detection code."],"i":[0],"f":[0],"p":[]},\
"crypto_common":{"doc":"Common cryptographic traits.","t":[8,6,16,8,16,8,8,8,3,6,16,8,6,8,8,16,8,6,16,8,6,16,8,8,11,11,11,11,11,11,11,11,11,2,10,10,11,11,11,11,10,10,11,11,11,10,11,11,11,11,11,2,10],"n":["AlgorithmName","Block","BlockSize","BlockSizeUser","Inner","InnerInit","InnerIvInit","InnerUser","InvalidLength","Iv","IvSize","IvSizeUser","Key","KeyInit","KeyIvInit","KeySize","KeySizeUser","Output","OutputSize","OutputSizeUser","ParBlocks","ParBlocksSize","ParBlocksSizeUser","Reset","block_size","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","generic_array","inner_init","inner_iv_init","inner_iv_slice_init","into","iv_size","key_size","new","new","new_from_slice","new_from_slices","output_size","reset","to_owned","to_string","try_from","try_into","type_id","typenum","write_alg_name"],"q":["crypto_common","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Trait which stores algorithm name constant, used in <code>Debug</code> …","Block on which <code>BlockSizeUser</code> implementors operate.","Size of the block in bytes.","Types which process data in blocks.","Inner type.","Types which can be initialized from another type (usually …","Types which can be initialized from another type and …","Types which use another type for initialization.","The error type returned when key and/or IV used in the …","Initialization vector (nonce) used by <code>IvSizeUser</code> …","Initialization vector size in bytes.","Types which use initialization vector (nonce) for …","Key used by <code>KeySizeUser</code> implementors.","Types which can be initialized from key.","Types which can be initialized from key and initialization …","Key size in bytes.","Types which use key for initialization.","Output array of <code>OutputSizeUser</code> implementors.","Size of the output in bytes.","Types which return data with the given size.","Parallel blocks on which <code>ParBlocksSizeUser</code> implementors …","Number of blocks which can be processed in parallel.","Types which can process blocks in parallel.","Resettable types.","Return block size in bytes.","","","","","","","","Returns the argument unchanged.","","Initialize value from the <code>inner</code>.","Initialize value using <code>inner</code> and <code>iv</code> array.","Initialize value using <code>inner</code> and <code>iv</code> slice.","Calls <code>U::from(self)</code>.","Return IV size in bytes.","Return key size in bytes.","Create new value from fixed size key.","Create new value from fixed length key and nonce.","Create new value from variable size key.","Create new value from variable length key and nonce.","Return output size in bytes.","Reset state to its initial value.","","","","","","","Write algorithm name into <code>f</code>."],"i":[0,0,12,0,13,0,0,0,0,0,14,0,0,0,0,15,0,0,16,0,0,17,0,0,12,2,2,2,2,2,2,2,2,0,18,19,19,2,14,15,20,21,20,21,16,22,2,2,2,2,2,0,23],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[]],[[]],[2,2],[[]],[[2,2],3],[[2,4],[[6,[5]]]],[[2,4],7],[[]],0,[[]],[8],[[],[[6,[2]]]],[[]],[[],1],[[],1],[9],[[9,8]],[[],[[6,[2]]]],[[],[[6,[2]]]],[[],1],[[]],[[]],[[],10],[[],6],[[],6],[[],11],0,[4,7]],"p":[[15,"usize"],[3,"InvalidLength"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[6,"Iv"],[6,"Key"],[3,"String"],[3,"TypeId"],[8,"BlockSizeUser"],[8,"InnerUser"],[8,"IvSizeUser"],[8,"KeySizeUser"],[8,"OutputSizeUser"],[8,"ParBlocksSizeUser"],[8,"InnerInit"],[8,"InnerIvInit"],[8,"KeyInit"],[8,"KeyIvInit"],[8,"Reset"],[8,"AlgorithmName"]]},\
"derive_more":{"doc":"<code>derive_more</code>","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"digest":{"doc":"This crate provides traits which describe functionality of …","t":[3,8,8,8,8,8,8,8,8,3,3,3,6,8,18,8,3,8,6,16,8,16,8,8,8,8,8,2,11,11,11,11,11,11,11,11,11,11,10,11,10,10,11,11,11,11,11,11,11,11,11,11,0,0,2,11,11,11,11,10,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,11,11,10,10,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,10,11,11,11,11,11,11,10,10,10,10,11,10,11,10,10,10,10,11,10,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,10,10,10,10,10,10,10,10,3,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,6,16,8,6,16,8,16,8,3,3,8,8,13,16,8,16,8,13,3,18,4,8,8,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11],"n":["CtOutput","Digest","DynDigest","ExtendableOutput","ExtendableOutputReset","FixedOutput","FixedOutputReset","HashMarker","InnerInit","InvalidBufferSize","InvalidLength","InvalidOutputSize","Key","KeyInit","MAX_OUTPUT_SIZE","Mac","MacError","MacMarker","Output","OutputSize","OutputSizeUser","Reader","Reset","Update","VariableOutput","VariableOutputReset","XofReader","block_buffer","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","box_clone","chain","chain_update","chain_update","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","consts","core_api","crypto_common","ct_eq","default","default","default","digest","digest_variable","digest_xof","eq","eq","eq","eq","finalize","finalize","finalize","finalize","finalize_boxed","finalize_boxed","finalize_boxed_reset","finalize_boxed_reset","finalize_fixed","finalize_fixed_reset","finalize_into","finalize_into","finalize_into","finalize_into_reset","finalize_into_reset","finalize_into_reset","finalize_reset","finalize_reset","finalize_reset","finalize_reset","finalize_variable","finalize_variable_reset","finalize_xof","finalize_xof_into","finalize_xof_reset","finalize_xof_reset_into","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","generic_array","inner_init","into","into","into","into","into","into_bytes","new","new","new","new","new","new_from_slice","new_from_slice","new_with_prefix","output_size","output_size","output_size","output_size","read","read_boxed","reset","reset","reset","reset","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","typenum","update","update","update","update","verify","verify_slice","verify_truncated_left","verify_truncated_right","B0","B1","False","N1","N10","N100","N1000","N10000","N100000","N1000000","N10000000","N100000000","N1000000000","N10000000000","N100000000000","N1000000000000","N10000000000000","N100000000000000","N1000000000000000","N10000000000000000","N100000000000000000","N1000000000000000000","N1001","N1002","N1003","N1004","N1005","N1006","N1007","N1008","N1009","N101","N1010","N1011","N1012","N1013","N1014","N1015","N1016","N1017","N1018","N1019","N102","N1020","N1021","N1022","N1023","N1024","N103","N104","N1048576","N105","N106","N107","N1073741824","N108","N109","N1099511627776","N11","N110","N111","N112","N1125899906842624","N113","N114","N115","N1152921504606846976","N116","N117","N118","N119","N12","N120","N121","N122","N123","N124","N125","N126","N127","N128","N129","N13","N130","N131","N131072","N132","N133","N134","N134217728","N135","N136","N137","N137438953472","N138","N139","N14","N140","N140737488355328","N141","N142","N143","N144","N144115188075855872","N145","N146","N147","N148","N149","N15","N150","N151","N152","N153","N154","N155","N156","N157","N158","N159","N16","N160","N161","N162","N163","N16384","N164","N165","N166","N167","N16777216","N168","N169","N17","N170","N171","N17179869184","N172","N173","N174","N175","N17592186044416","N176","N177","N178","N179","N18","N180","N18014398509481984","N181","N182","N183","N184","N185","N186","N187","N188","N189","N19","N190","N191","N192","N193","N194","N195","N196","N197","N198","N199","N2","N20","N200","N201","N202","N203","N204","N2048","N205","N206","N207","N208","N209","N2097152","N21","N210","N211","N212","N213","N214","N2147483648","N215","N216","N217","N218","N219","N2199023255552","N22","N220","N221","N222","N223","N224","N225","N2251799813685248","N226","N227","N228","N229","N23","N230","N2305843009213693952","N231","N232","N233","N234","N235","N236","N237","N238","N239","N24","N240","N241","N242","N243","N244","N245","N246","N247","N248","N249","N25","N250","N251","N252","N253","N254","N255","N256","N257","N258","N259","N26","N260","N261","N262","N262144","N263","N264","N265","N266","N267","N268","N268435456","N269","N27","N270","N271","N272","N273","N274","N274877906944","N275","N276","N277","N278","N279","N28","N280","N281","N281474976710656","N282","N283","N284","N285","N286","N287","N288","N288230376151711744","N289","N29","N290","N291","N292","N293","N294","N295","N296","N297","N298","N299","N3","N30","N300","N301","N302","N303","N304","N305","N306","N307","N308","N309","N31","N310","N311","N312","N313","N314","N315","N316","N317","N318","N319","N32","N320","N321","N322","N323","N324","N325","N326","N327","N32768","N328","N329","N33","N330","N331","N332","N333","N334","N335","N33554432","N336","N337","N338","N339","N34","N340","N341","N342","N343","N34359738368","N344","N345","N346","N347","N348","N349","N35","N350","N351","N35184372088832","N352","N353","N354","N355","N356","N357","N358","N359","N36","N360","N36028797018963968","N361","N362","N363","N364","N365","N366","N367","N368","N369","N37","N370","N371","N372","N373","N374","N375","N376","N377","N378","N379","N38","N380","N381","N382","N383","N384","N385","N386","N387","N388","N389","N39","N390","N391","N392","N393","N394","N395","N396","N397","N398","N399","N4","N40","N400","N401","N402","N403","N404","N405","N406","N407","N408","N409","N4096","N41","N410","N411","N412","N413","N414","N415","N416","N417","N418","N419","N4194304","N42","N420","N421","N422","N423","N424","N425","N426","N427","N428","N429","N4294967296","N43","N430","N431","N432","N433","N434","N435","N436","N437","N438","N439","N4398046511104","N44","N440","N441","N442","N443","N444","N445","N446","N447","N448","N449","N45","N450","N4503599627370496","N451","N452","N453","N454","N455","N456","N457","N458","N459","N46","N460","N461","N4611686018427387904","N462","N463","N464","N465","N466","N467","N468","N469","N47","N470","N471","N472","N473","N474","N475","N476","N477","N478","N479","N48","N480","N481","N482","N483","N484","N485","N486","N487","N488","N489","N49","N490","N491","N492","N493","N494","N495","N496","N497","N498","N499","N5","N50","N500","N501","N502","N503","N504","N505","N506","N507","N508","N509","N51","N510","N511","N512","N513","N514","N515","N516","N517","N518","N519","N52","N520","N521","N522","N523","N524","N524288","N525","N526","N527","N528","N529","N53","N530","N531","N532","N533","N534","N535","N536","N536870912","N537","N538","N539","N54","N540","N541","N542","N543","N544","N545","N546","N547","N548","N549","N549755813888","N55","N550","N551","N552","N553","N554","N555","N556","N557","N558","N559","N56","N560","N561","N562","N562949953421312","N563","N564","N565","N566","N567","N568","N569","N57","N570","N571","N572","N573","N574","N575","N576","N576460752303423488","N577","N578","N579","N58","N580","N581","N582","N583","N584","N585","N586","N587","N588","N589","N59","N590","N591","N592","N593","N594","N595","N596","N597","N598","N599","N6","N60","N600","N601","N602","N603","N604","N605","N606","N607","N608","N609","N61","N610","N611","N612","N613","N614","N615","N616","N617","N618","N619","N62","N620","N621","N622","N623","N624","N625","N626","N627","N628","N629","N63","N630","N631","N632","N633","N634","N635","N636","N637","N638","N639","N64","N640","N641","N642","N643","N644","N645","N646","N647","N648","N649","N65","N650","N651","N652","N653","N654","N655","N65536","N656","N657","N658","N659","N66","N660","N661","N662","N663","N664","N665","N666","N667","N668","N669","N67","N670","N671","N67108864","N672","N673","N674","N675","N676","N677","N678","N679","N68","N680","N681","N682","N683","N684","N685","N686","N687","N68719476736","N688","N689","N69","N690","N691","N692","N693","N694","N695","N696","N697","N698","N699","N7","N70","N700","N701","N702","N703","N70368744177664","N704","N705","N706","N707","N708","N709","N71","N710","N711","N712","N713","N714","N715","N716","N717","N718","N719","N72","N720","N72057594037927936","N721","N722","N723","N724","N725","N726","N727","N728","N729","N73","N730","N731","N732","N733","N734","N735","N736","N737","N738","N739","N74","N740","N741","N742","N743","N744","N745","N746","N747","N748","N749","N75","N750","N751","N752","N753","N754","N755","N756","N757","N758","N759","N76","N760","N761","N762","N763","N764","N765","N766","N767","N768","N769","N77","N770","N771","N772","N773","N774","N775","N776","N777","N778","N779","N78","N780","N781","N782","N783","N784","N785","N786","N787","N788","N789","N79","N790","N791","N792","N793","N794","N795","N796","N797","N798","N799","N8","N80","N800","N801","N802","N803","N804","N805","N806","N807","N808","N809","N81","N810","N811","N812","N813","N814","N815","N816","N817","N818","N819","N8192","N82","N820","N821","N822","N823","N824","N825","N826","N827","N828","N829","N83","N830","N831","N832","N833","N834","N835","N836","N837","N838","N8388608","N839","N84","N840","N841","N842","N843","N844","N845","N846","N847","N848","N849","N85","N850","N851","N852","N853","N854","N855","N856","N857","N858","N8589934592","N859","N86","N860","N861","N862","N863","N864","N865","N866","N867","N868","N869","N87","N870","N871","N872","N873","N874","N875","N876","N877","N878","N879","N8796093022208","N88","N880","N881","N882","N883","N884","N885","N886","N887","N888","N889","N89","N890","N891","N892","N893","N894","N895","N896","N897","N898","N899","N9","N90","N900","N9007199254740992","N901","N902","N903","N904","N905","N906","N907","N908","N909","N91","N910","N911","N912","N913","N914","N915","N916","N917","N918","N919","N92","N920","N921","N922","N923","N924","N925","N926","N927","N928","N929","N93","N930","N931","N932","N933","N934","N935","N936","N937","N938","N939","N94","N940","N941","N942","N943","N944","N945","N946","N947","N948","N949","N95","N950","N951","N952","N953","N954","N955","N956","N957","N958","N959","N96","N960","N961","N962","N963","N964","N965","N966","N967","N968","N969","N97","N970","N971","N972","N973","N974","N975","N976","N977","N978","N979","N98","N980","N981","N982","N983","N984","N985","N986","N987","N988","N989","N99","N990","N991","N992","N993","N994","N995","N996","N997","N998","N999","P1","P10","P100","P1000","P10000","P100000","P1000000","P10000000","P100000000","P1000000000","P10000000000","P100000000000","P1000000000000","P10000000000000","P100000000000000","P1000000000000000","P10000000000000000","P100000000000000000","P1000000000000000000","P1001","P1002","P1003","P1004","P1005","P1006","P1007","P1008","P1009","P101","P1010","P1011","P1012","P1013","P1014","P1015","P1016","P1017","P1018","P1019","P102","P1020","P1021","P1022","P1023","P1024","P103","P104","P1048576","P105","P106","P107","P1073741824","P108","P109","P1099511627776","P11","P110","P111","P112","P1125899906842624","P113","P114","P115","P1152921504606846976","P116","P117","P118","P119","P12","P120","P121","P122","P123","P124","P125","P126","P127","P128","P129","P13","P130","P131","P131072","P132","P133","P134","P134217728","P135","P136","P137","P137438953472","P138","P139","P14","P140","P140737488355328","P141","P142","P143","P144","P144115188075855872","P145","P146","P147","P148","P149","P15","P150","P151","P152","P153","P154","P155","P156","P157","P158","P159","P16","P160","P161","P162","P163","P16384","P164","P165","P166","P167","P16777216","P168","P169","P17","P170","P171","P17179869184","P172","P173","P174","P175","P17592186044416","P176","P177","P178","P179","P18","P180","P18014398509481984","P181","P182","P183","P184","P185","P186","P187","P188","P189","P19","P190","P191","P192","P193","P194","P195","P196","P197","P198","P199","P2","P20","P200","P201","P202","P203","P204","P2048","P205","P206","P207","P208","P209","P2097152","P21","P210","P211","P212","P213","P214","P2147483648","P215","P216","P217","P218","P219","P2199023255552","P22","P220","P221","P222","P223","P224","P225","P2251799813685248","P226","P227","P228","P229","P23","P230","P2305843009213693952","P231","P232","P233","P234","P235","P236","P237","P238","P239","P24","P240","P241","P242","P243","P244","P245","P246","P247","P248","P249","P25","P250","P251","P252","P253","P254","P255","P256","P257","P258","P259","P26","P260","P261","P262","P262144","P263","P264","P265","P266","P267","P268","P268435456","P269","P27","P270","P271","P272","P273","P274","P274877906944","P275","P276","P277","P278","P279","P28","P280","P281","P281474976710656","P282","P283","P284","P285","P286","P287","P288","P288230376151711744","P289","P29","P290","P291","P292","P293","P294","P295","P296","P297","P298","P299","P3","P30","P300","P301","P302","P303","P304","P305","P306","P307","P308","P309","P31","P310","P311","P312","P313","P314","P315","P316","P317","P318","P319","P32","P320","P321","P322","P323","P324","P325","P326","P327","P32768","P328","P329","P33","P330","P331","P332","P333","P334","P335","P33554432","P336","P337","P338","P339","P34","P340","P341","P342","P343","P34359738368","P344","P345","P346","P347","P348","P349","P35","P350","P351","P35184372088832","P352","P353","P354","P355","P356","P357","P358","P359","P36","P360","P36028797018963968","P361","P362","P363","P364","P365","P366","P367","P368","P369","P37","P370","P371","P372","P373","P374","P375","P376","P377","P378","P379","P38","P380","P381","P382","P383","P384","P385","P386","P387","P388","P389","P39","P390","P391","P392","P393","P394","P395","P396","P397","P398","P399","P4","P40","P400","P401","P402","P403","P404","P405","P406","P407","P408","P409","P4096","P41","P410","P411","P412","P413","P414","P415","P416","P417","P418","P419","P4194304","P42","P420","P421","P422","P423","P424","P425","P426","P427","P428","P429","P4294967296","P43","P430","P431","P432","P433","P434","P435","P436","P437","P438","P439","P4398046511104","P44","P440","P441","P442","P443","P444","P445","P446","P447","P448","P449","P45","P450","P4503599627370496","P451","P452","P453","P454","P455","P456","P457","P458","P459","P46","P460","P461","P4611686018427387904","P462","P463","P464","P465","P466","P467","P468","P469","P47","P470","P471","P472","P473","P474","P475","P476","P477","P478","P479","P48","P480","P481","P482","P483","P484","P485","P486","P487","P488","P489","P49","P490","P491","P492","P493","P494","P495","P496","P497","P498","P499","P5","P50","P500","P501","P502","P503","P504","P505","P506","P507","P508","P509","P51","P510","P511","P512","P513","P514","P515","P516","P517","P518","P519","P52","P520","P521","P522","P523","P524","P524288","P525","P526","P527","P528","P529","P53","P530","P531","P532","P533","P534","P535","P536","P536870912","P537","P538","P539","P54","P540","P541","P542","P543","P544","P545","P546","P547","P548","P549","P549755813888","P55","P550","P551","P552","P553","P554","P555","P556","P557","P558","P559","P56","P560","P561","P562","P562949953421312","P563","P564","P565","P566","P567","P568","P569","P57","P570","P571","P572","P573","P574","P575","P576","P576460752303423488","P577","P578","P579","P58","P580","P581","P582","P583","P584","P585","P586","P587","P588","P589","P59","P590","P591","P592","P593","P594","P595","P596","P597","P598","P599","P6","P60","P600","P601","P602","P603","P604","P605","P606","P607","P608","P609","P61","P610","P611","P612","P613","P614","P615","P616","P617","P618","P619","P62","P620","P621","P622","P623","P624","P625","P626","P627","P628","P629","P63","P630","P631","P632","P633","P634","P635","P636","P637","P638","P639","P64","P640","P641","P642","P643","P644","P645","P646","P647","P648","P649","P65","P650","P651","P652","P653","P654","P655","P65536","P656","P657","P658","P659","P66","P660","P661","P662","P663","P664","P665","P666","P667","P668","P669","P67","P670","P671","P67108864","P672","P673","P674","P675","P676","P677","P678","P679","P68","P680","P681","P682","P683","P684","P685","P686","P687","P68719476736","P688","P689","P69","P690","P691","P692","P693","P694","P695","P696","P697","P698","P699","P7","P70","P700","P701","P702","P703","P70368744177664","P704","P705","P706","P707","P708","P709","P71","P710","P711","P712","P713","P714","P715","P716","P717","P718","P719","P72","P720","P72057594037927936","P721","P722","P723","P724","P725","P726","P727","P728","P729","P73","P730","P731","P732","P733","P734","P735","P736","P737","P738","P739","P74","P740","P741","P742","P743","P744","P745","P746","P747","P748","P749","P75","P750","P751","P752","P753","P754","P755","P756","P757","P758","P759","P76","P760","P761","P762","P763","P764","P765","P766","P767","P768","P769","P77","P770","P771","P772","P773","P774","P775","P776","P777","P778","P779","P78","P780","P781","P782","P783","P784","P785","P786","P787","P788","P789","P79","P790","P791","P792","P793","P794","P795","P796","P797","P798","P799","P8","P80","P800","P801","P802","P803","P804","P805","P806","P807","P808","P809","P81","P810","P811","P812","P813","P814","P815","P816","P817","P818","P819","P8192","P82","P820","P821","P822","P823","P824","P825","P826","P827","P828","P829","P83","P830","P831","P832","P833","P834","P835","P836","P837","P838","P8388608","P839","P84","P840","P841","P842","P843","P844","P845","P846","P847","P848","P849","P85","P850","P851","P852","P853","P854","P855","P856","P857","P858","P8589934592","P859","P86","P860","P861","P862","P863","P864","P865","P866","P867","P868","P869","P87","P870","P871","P872","P873","P874","P875","P876","P877","P878","P879","P8796093022208","P88","P880","P881","P882","P883","P884","P885","P886","P887","P888","P889","P89","P890","P891","P892","P893","P894","P895","P896","P897","P898","P899","P9","P90","P900","P9007199254740992","P901","P902","P903","P904","P905","P906","P907","P908","P909","P91","P910","P911","P912","P913","P914","P915","P916","P917","P918","P919","P92","P920","P921","P922","P923","P924","P925","P926","P927","P928","P929","P93","P930","P931","P932","P933","P934","P935","P936","P937","P938","P939","P94","P940","P941","P942","P943","P944","P945","P946","P947","P948","P949","P95","P950","P951","P952","P953","P954","P955","P956","P957","P958","P959","P96","P960","P961","P962","P963","P964","P965","P966","P967","P968","P969","P97","P970","P971","P972","P973","P974","P975","P976","P977","P978","P979","P98","P980","P981","P982","P983","P984","P985","P986","P987","P988","P989","P99","P990","P991","P992","P993","P994","P995","P996","P997","P998","P999","True","U0","U1","U10","U100","U1000","U10000","U100000","U1000000","U10000000","U100000000","U1000000000","U10000000000","U100000000000","U1000000000000","U10000000000000","U100000000000000","U1000000000000000","U10000000000000000","U100000000000000000","U1000000000000000000","U10000000000000000000","U1001","U1002","U1003","U1004","U1005","U1006","U1007","U1008","U1009","U101","U1010","U1011","U1012","U1013","U1014","U1015","U1016","U1017","U1018","U1019","U102","U1020","U1021","U1022","U1023","U1024","U103","U104","U1048576","U105","U106","U107","U1073741824","U108","U109","U1099511627776","U11","U110","U111","U112","U1125899906842624","U113","U114","U115","U1152921504606846976","U116","U117","U118","U119","U12","U120","U121","U122","U123","U124","U125","U126","U127","U128","U129","U13","U130","U131","U131072","U132","U133","U134","U134217728","U135","U136","U137","U137438953472","U138","U139","U14","U140","U140737488355328","U141","U142","U143","U144","U144115188075855872","U145","U146","U147","U148","U149","U15","U150","U151","U152","U153","U154","U155","U156","U157","U158","U159","U16","U160","U161","U162","U163","U16384","U164","U165","U166","U167","U16777216","U168","U169","U17","U170","U171","U17179869184","U172","U173","U174","U175","U17592186044416","U176","U177","U178","U179","U18","U180","U18014398509481984","U181","U182","U183","U184","U185","U186","U187","U188","U189","U19","U190","U191","U192","U193","U194","U195","U196","U197","U198","U199","U2","U20","U200","U201","U202","U203","U204","U2048","U205","U206","U207","U208","U209","U2097152","U21","U210","U211","U212","U213","U214","U2147483648","U215","U216","U217","U218","U219","U2199023255552","U22","U220","U221","U222","U223","U224","U225","U2251799813685248","U226","U227","U228","U229","U23","U230","U2305843009213693952","U231","U232","U233","U234","U235","U236","U237","U238","U239","U24","U240","U241","U242","U243","U244","U245","U246","U247","U248","U249","U25","U250","U251","U252","U253","U254","U255","U256","U257","U258","U259","U26","U260","U261","U262","U262144","U263","U264","U265","U266","U267","U268","U268435456","U269","U27","U270","U271","U272","U273","U274","U274877906944","U275","U276","U277","U278","U279","U28","U280","U281","U281474976710656","U282","U283","U284","U285","U286","U287","U288","U288230376151711744","U289","U29","U290","U291","U292","U293","U294","U295","U296","U297","U298","U299","U3","U30","U300","U301","U302","U303","U304","U305","U306","U307","U308","U309","U31","U310","U311","U312","U313","U314","U315","U316","U317","U318","U319","U32","U320","U321","U322","U323","U324","U325","U326","U327","U32768","U328","U329","U33","U330","U331","U332","U333","U334","U335","U33554432","U336","U337","U338","U339","U34","U340","U341","U342","U343","U34359738368","U344","U345","U346","U347","U348","U349","U35","U350","U351","U35184372088832","U352","U353","U354","U355","U356","U357","U358","U359","U36","U360","U36028797018963968","U361","U362","U363","U364","U365","U366","U367","U368","U369","U37","U370","U371","U372","U373","U374","U375","U376","U377","U378","U379","U38","U380","U381","U382","U383","U384","U385","U386","U387","U388","U389","U39","U390","U391","U392","U393","U394","U395","U396","U397","U398","U399","U4","U40","U400","U401","U402","U403","U404","U405","U406","U407","U408","U409","U4096","U41","U410","U411","U412","U413","U414","U415","U416","U417","U418","U419","U4194304","U42","U420","U421","U422","U423","U424","U425","U426","U427","U428","U429","U4294967296","U43","U430","U431","U432","U433","U434","U435","U436","U437","U438","U439","U4398046511104","U44","U440","U441","U442","U443","U444","U445","U446","U447","U448","U449","U45","U450","U4503599627370496","U451","U452","U453","U454","U455","U456","U457","U458","U459","U46","U460","U461","U4611686018427387904","U462","U463","U464","U465","U466","U467","U468","U469","U47","U470","U471","U472","U473","U474","U475","U476","U477","U478","U479","U48","U480","U481","U482","U483","U484","U485","U486","U487","U488","U489","U49","U490","U491","U492","U493","U494","U495","U496","U497","U498","U499","U5","U50","U500","U501","U502","U503","U504","U505","U506","U507","U508","U509","U51","U510","U511","U512","U513","U514","U515","U516","U517","U518","U519","U52","U520","U521","U522","U523","U524","U524288","U525","U526","U527","U528","U529","U53","U530","U531","U532","U533","U534","U535","U536","U536870912","U537","U538","U539","U54","U540","U541","U542","U543","U544","U545","U546","U547","U548","U549","U549755813888","U55","U550","U551","U552","U553","U554","U555","U556","U557","U558","U559","U56","U560","U561","U562","U562949953421312","U563","U564","U565","U566","U567","U568","U569","U57","U570","U571","U572","U573","U574","U575","U576","U576460752303423488","U577","U578","U579","U58","U580","U581","U582","U583","U584","U585","U586","U587","U588","U589","U59","U590","U591","U592","U593","U594","U595","U596","U597","U598","U599","U6","U60","U600","U601","U602","U603","U604","U605","U606","U607","U608","U609","U61","U610","U611","U612","U613","U614","U615","U616","U617","U618","U619","U62","U620","U621","U622","U623","U624","U625","U626","U627","U628","U629","U63","U630","U631","U632","U633","U634","U635","U636","U637","U638","U639","U64","U640","U641","U642","U643","U644","U645","U646","U647","U648","U649","U65","U650","U651","U652","U653","U654","U655","U65536","U656","U657","U658","U659","U66","U660","U661","U662","U663","U664","U665","U666","U667","U668","U669","U67","U670","U671","U67108864","U672","U673","U674","U675","U676","U677","U678","U679","U68","U680","U681","U682","U683","U684","U685","U686","U687","U68719476736","U688","U689","U69","U690","U691","U692","U693","U694","U695","U696","U697","U698","U699","U7","U70","U700","U701","U702","U703","U70368744177664","U704","U705","U706","U707","U708","U709","U71","U710","U711","U712","U713","U714","U715","U716","U717","U718","U719","U72","U720","U72057594037927936","U721","U722","U723","U724","U725","U726","U727","U728","U729","U73","U730","U731","U732","U733","U734","U735","U736","U737","U738","U739","U74","U740","U741","U742","U743","U744","U745","U746","U747","U748","U749","U75","U750","U751","U752","U753","U754","U755","U756","U757","U758","U759","U76","U760","U761","U762","U763","U764","U765","U766","U767","U768","U769","U77","U770","U771","U772","U773","U774","U775","U776","U777","U778","U779","U78","U780","U781","U782","U783","U784","U785","U786","U787","U788","U789","U79","U790","U791","U792","U793","U794","U795","U796","U797","U798","U799","U8","U80","U800","U801","U802","U803","U804","U805","U806","U807","U808","U809","U81","U810","U811","U812","U813","U814","U815","U816","U817","U818","U819","U8192","U82","U820","U821","U822","U823","U824","U825","U826","U827","U828","U829","U83","U830","U831","U832","U833","U834","U835","U836","U837","U838","U8388608","U839","U84","U840","U841","U842","U843","U844","U845","U846","U847","U848","U849","U85","U850","U851","U852","U853","U854","U855","U856","U857","U858","U8589934592","U859","U86","U860","U861","U862","U863","U864","U865","U866","U867","U868","U869","U87","U870","U871","U872","U873","U874","U875","U876","U877","U878","U879","U8796093022208","U88","U880","U881","U882","U883","U884","U885","U886","U887","U888","U889","U89","U890","U891","U892","U893","U894","U895","U896","U897","U898","U899","U9","U90","U900","U9007199254740992","U901","U902","U903","U904","U905","U906","U907","U908","U909","U91","U910","U911","U912","U913","U914","U915","U916","U917","U918","U919","U92","U920","U921","U922","U9223372036854775808","U923","U924","U925","U926","U927","U928","U929","U93","U930","U931","U932","U933","U934","U935","U936","U937","U938","U939","U94","U940","U941","U942","U943","U944","U945","U946","U947","U948","U949","U95","U950","U951","U952","U953","U954","U955","U956","U957","U958","U959","U96","U960","U961","U962","U963","U964","U965","U966","U967","U968","U969","U97","U970","U971","U972","U973","U974","U975","U976","U977","U978","U979","U98","U980","U981","U982","U983","U984","U985","U986","U987","U988","U989","U99","U990","U991","U992","U993","U994","U995","U996","U997","U998","U999","Z0","add","bitand","bitand","bitand","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","default","div","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","max","max","max","max","max","max","max","min","min","min","min","min","min","min","mul","mul","mul","neg","new","new","new","new","new","not","not","partial_cmp","partial_cmp","partial_cmp","partial_div","powi","powi","powi","rem","sub","sub","sub","to_bool","to_bool","to_i16","to_i32","to_i64","to_i8","to_int","to_int","to_int","to_int","to_isize","to_owned","to_owned","to_owned","to_u8","to_u8","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","AlgorithmName","Block","BlockSize","BlockSizeUser","Buffer","BufferKind","BufferKindUser","Core","CoreProxy","CoreWrapper","CtVariableCoreWrapper","ExtendableOutputCore","FixedOutputCore","Left","OutputSize","OutputSizeUser","ReaderCore","Reset","Right","RtVariableCoreWrapper","TRUNC_SIDE","TruncSide","UpdateCore","VariableOutputCore","XofReaderCore","XofReaderCoreWrapper","block_size","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","decompose","default","default","default","finalize_fixed_core","finalize_fixed_core","finalize_into","finalize_into_reset","finalize_variable","finalize_variable_core","finalize_variable_reset","finalize_xof","finalize_xof_core","finalize_xof_reset","flush","flush","fmt","fmt","fmt","fmt","from","from","from","from","from","from_core","into","into","into","into","into","new","new","new","new_from_slice","output_size","output_size","read","read","read_block","reset","reset","reset","reset","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update","update","update_blocks","update_blocks","write","write","write_alg_name","write_alg_name"],"q":["digest","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","digest::constsdigest::core_api","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Fixed size output value which provides a safe <code>Eq</code> …","Convinience wrapper trait covering functionality of …","Modification of the <code>Digest</code> trait suitable for trait …","Trait for hash functions with extendable-output (XOF).","Trait for hash functions with extendable-output (XOF) able …","Trait for hash functions with fixed-size output.","Trait for hash functions with fixed-size output able to …","Marker trait for cryptographic hash functions.","Types which can be initialized from another type (usually …","Buffer length is not equal to hash output size.","The error type returned when key and/or IV used in the …","The error type used in variable hash traits.","Key used by <code>KeySizeUser</code> implementors.","Types which can be initialized from key.","Maximum size of output hash.","Convinience wrapper trait covering functionality of …","Error type for when the <code>Output</code> of a <code>Mac</code> is not equal to …","Marker trait for Message Authentication algorithms.","Output array of <code>OutputSizeUser</code> implementors.","Size of the output in bytes.","Types which return data with the given size.","Reader","Resettable types.","Types which consume data with byte granularity.","Trait for hash functions with variable-size output.","Trait for hash functions with variable-size output able to …","Trait for reader types which are used to extract …","","","","","","","","","","","","Clone hasher state into a boxed trait object","Digest input data in a chained manner.","Process input data in a chained manner.","Process input data in a chained manner.","","","","","","","","","","","Type aliases for many constants.","Low-level traits operating on blocks and wrappers around …","","","","","","Compute hash of <code>data</code>.","Compute hash of <code>data</code> and write it to <code>output</code>.","Compute hash of <code>data</code> and write it into <code>output</code>.","","","","","Retrieve result and consume hasher instance.","Obtain the result of a <code>Mac</code> computation as a <code>CtOutput</code> and …","Retrieve result and consume boxed hasher instance","Retrieve result and consume boxed hasher instance","Retrieve result into a boxed slice of the specified size …","Retrieve result into a boxed slice and consume hasher.","Retrieve result into a boxed slice of the specified size …","Retrieve result into a boxed slice and reset the hasher …","Retrieve result and consume the hasher instance.","Retrieve result and reset the hasher state.","Write result into provided array and consume the hasher …","Write result into provided array and consume the hasher …","Consume value and write result into provided array.","Write result into provided array and reset the hasher …","Write result into provided array and reset the hasher …","Write result into provided array and reset the hasher …","Retrieve result and reset hasher instance.","Obtain the result of a <code>Mac</code> computation as a <code>CtOutput</code> and …","Retrieve result and reset hasher instance","Retrieve result and reset hasher instance","Write result into the output buffer.","Write result into the output buffer and reset the hasher …","Retrieve XOF reader and consume hasher instance.","Finalize XOF and write result into <code>out</code>.","Retrieve XOF reader and reset hasher instance state.","Finalize XOF, write result into <code>out</code>, and reset the hasher …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Initialize value from the <code>inner</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the inner <code>Output</code> array this type wraps.","Create new value from fixed size key.","Create new hasher instance.","Create new value from fixed size key.","Create new hasher instance with the given output size.","Create a new <code>CtOutput</code> value.","Create new value from variable size key.","Create new value from variable size key.","Create new hasher instance which has processed the …","Get output size of the hasher","Get output size of the hasher","Get output size of the hasher instance provided to the <code>new</code> …","Return output size in bytes.","Read output into the <code>buffer</code>. Can be called an unlimited …","Read output into a boxed slice of the specified size.","Reset state to its initial value.","Reset hasher instance to its initial state.","Reset hasher instance to its initial state.","Reset MAC instance to its initial state.","","","","","","","","","","","","","","","","","","","","","","","","","","Process data, updating the internal state.","Digest input data.","Update state using the provided data.","Update state using the provided data.","Check if tag/code value is correct for the processed input.","Check truncated tag correctness using all bytes of …","Check truncated tag correctness using left side bytes …","Check truncated tag correctness using right side bytes …","The type-level bit 0.","The type-level bithe type-level signed integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this bit.","","Instantiates a singleton representing this bit.","Instantiates a singleton representing the integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait which stores algorithm name constant, used in <code>Debug</code> …","Block on which <code>BlockSizeUser</code> implementors operate.","Size of the block in bytes.","Types which process data in blocks.","Buffer type used by type which implements <code>BufferKindUser</code>.","Block buffer kind over which type operates.","Types which use <code>BlockBuffer</code> functionality.","Type wrapped by <code>CoreWrapper</code>.","A proxy trait to a core type implemented by <code>CoreWrapper</code>","Wrapper around <code>BufferKindUser</code>.","Wrapper around <code>VariableOutputCore</code> which selects output size","Core trait for hash functions with extendable (XOF) output …","Core trait for hash functions with fixed output size.","Truncate left side, i.e. <code>&amp;out[..n]</code>.","Size of the output in bytes.","Types which return data with the given size.","XOF reader core state.","Resettable types.","Truncate right side, i.e. <code>&amp;out[m..]</code>.","Wrapper around <code>VariableOutputCore</code> which selects output size","Side which should be used in a truncated result.","Type which used for defining truncation side in the …","Types which consume data in blocks.","Core trait for hash functions with variable output size.","Core reader trait for extendable-output function (XOF) …","Wrapper around <code>XofReaderCore</code> implementations.","Return block size in bytes.","","","","","","","","","","","","","","","","","","","","","Decompose wrapper into inner parts.","","","","Finalize state using remaining data stored in the provided …","","","","","Finalize hasher and write full hashing result into the <code>out</code> …","","","Retrieve XOF reader using remaining data stored in the …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create new wrapper from <code>core</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Initialize hasher state for given output size.","","","","Return output size in bytes.","","","","Read next XOF block.","Reset state to its initial value.","","","","","","","","","","","","","","","","","","","","","","","","","","Update state using the provided data blocks.","","","","Write algorithm name into <code>f</code>.",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,6,0,48,0,0,0,0,0,0,4,7,8,9,10,4,7,8,9,10,1,49,50,51,4,7,8,9,10,4,7,8,9,10,0,0,0,7,8,9,10,50,47,48,4,7,8,10,50,51,1,1,48,47,52,53,54,55,50,1,54,50,1,55,50,51,1,1,47,53,48,48,52,52,4,4,8,8,9,9,10,10,4,7,7,7,8,9,10,0,56,4,7,8,9,10,7,57,50,51,47,7,51,57,50,50,1,47,6,58,58,59,50,1,51,4,7,8,9,10,4,8,9,10,4,7,8,9,10,4,7,8,9,10,4,7,8,9,10,0,50,1,51,49,51,51,51,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,24,25,25,24,24,25,24,24,25,25,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,24,25,25,23,23,23,24,24,25,25,23,23,23,23,23,23,23,24,24,25,25,23,24,25,24,25,23,23,23,23,23,23,23,23,23,24,25,23,23,23,23,23,23,23,23,23,24,25,23,24,25,24,25,23,24,25,23,24,25,23,0,0,60,0,0,61,0,62,0,0,0,0,0,42,6,0,63,0,42,0,64,0,0,0,0,0,60,38,39,40,41,42,38,39,40,41,42,38,39,40,41,42,38,39,40,41,42,40,38,40,41,65,38,40,40,39,64,39,40,63,40,39,40,39,40,41,42,38,39,40,41,42,40,38,39,40,41,42,64,39,40,40,6,39,41,41,66,59,38,39,40,38,39,40,41,42,38,39,40,41,42,38,39,40,41,42,38,39,40,41,42,39,40,67,38,39,40,68,38],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[2,[1]]]],[3],[3],[3],[4,4],[[[7,[[0,[5,6]]]]],[[7,[[0,[5,6]]]]]],[8,8],[9,9],[10,10],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[7,[6]],[7,[6]]],11],[[],8],[[],9],[[],10],[3,12],[3,[[13,[9]]]],[3],[[4,4],14],[[[7,[6]],7],14],[[8,8],14],[[10,10],14],[[],12],[[],7],[2,2],[2,2],[15,2],[[],2],[15,2],[[],2],[[],12],[[],12],[12],[[],[[13,[10]]]],[12],[12],[[],[[13,[10]]]],[12],[[],12],[[],7],[[],2],[[],2],[[],[[13,[10]]]],[[],[[13,[10]]]],[[]],[[]],[[]],[[]],[[4,16],[[13,[17]]]],[[4,16],[[13,[17]]]],[[8,16],18],[[8,16],18],[[9,16],18],[[9,16],18],[[10,16],18],[[10,16],18],[[]],[[]],[[[12,[6]]],[[7,[6]]]],[12,[[7,[6]]]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[[7,[6]]],[[12,[6]]]],[19],[[]],[20],[15,[[13,[9]]]],[[[12,[6]]],[[7,[6]]]],[[],[[13,[4]]]],[[],[[13,[4]]]],[3],[[],15],[[],15],[[],15],[[],15],[[]],[15,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],21],[[],21],[[],21],[[],21],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],22],[[],22],[[],22],[[],22],[[],22],0,[3],[[]],[[]],[[]],[12,[[13,[8]]]],[[],[[13,[8]]]],[[],[[13,[8]]]],[[],[[13,[8]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[23],[24],[[25,24]],[[25,25]],[[24,25]],[[24,24]],[25],[[24,25]],[[24,24]],[[25,24]],[[25,25]],[[]],[[]],[[]],[[]],[[]],[[]],[24,24],[25,25],[23,23],[[]],[[]],[[]],[[24,24],26],[[25,25],26],[[23,23],26],[[],24],[[],25],[[],23],[23],[[24,24],14],[[25,25],14],[[23,23],14],[[24,16],[[13,[17]]]],[[25,16],[[13,[17]]]],[[23,16],[[13,[17]]]],[[]],[[]],[[]],[24],[25],[23],[[]],[[]],[[]],[[24,24],24],[[24,25],25],[[25,24],25],[[25,25],25],[[23,27]],[[23,28]],[[23,23]],[[24,25],24],[[24,24],24],[[25,25],25],[[25,24],24],[[23,23]],[[23,28]],[[23,27]],[[23,29]],[[23,30]],[23],[23],[[],24],[[],24],[[],25],[[],25],[[],23],[24],[25],[[24,24],[[31,[26]]]],[[25,25],[[31,[26]]]],[[23,23],[[31,[26]]]],[[]],[[23,23]],[[23,27]],[[23,28]],[23],[[23,27]],[[23,28]],[[23,23]],[[],14],[[],14],[[],32],[[],33],[[],34],[[],35],[[],32],[[],35],[[],33],[[],34],[[],36],[[]],[[]],[[]],[[],37],[[],37],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],22],[[],22],[[],22],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[38,[5,5]]],[[38,[5,5]]]],[[[39,[5]]],[[39,[5]]]],[[[40,[5]]],[[40,[5]]]],[[[41,[5]]],[[41,[5]]]],[42,42],[[]],[[]],[[]],[[]],[[]],[40],[[],38],[[],[[40,[43]]]],[[],[[41,[43]]]],[[44,12]],[[38,44,19]],[[40,12]],[[40,12]],[39,[[13,[10]]]],[[44,12]],[39,[[13,[10]]]],[40],[44],[40],[39,45],[40,45],[[39,16],[[13,[17]]]],[[40,16],[[13,[17]]]],[[41,16],[[13,[17]]]],[[42,16],18],[[]],[[]],[[]],[[]],[[]],[[],40],[[]],[[]],[[]],[[]],[[]],[15,[[13,[9]]]],[15,[[13,[39,9]]]],[20,40],[[],[[13,[40,4]]]],[[],15],[39,15],[41],[41,[[45,[15]]]],[[],46],[[]],[38],[39],[40],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],22],[[],22],[[],22],[[],22],[[],22],[39],[40],[[]],[38],[39,[[45,[15]]]],[40,[[45,[15]]]],[16,[[13,[17]]]],[16,18]],"p":[[8,"DynDigest"],[3,"Box"],[8,"AsRef"],[3,"InvalidLength"],[8,"Clone"],[8,"OutputSizeUser"],[3,"CtOutput"],[3,"MacError"],[3,"InvalidOutputSize"],[3,"InvalidBufferSize"],[3,"Choice"],[6,"Output"],[4,"Result"],[15,"bool"],[15,"usize"],[3,"Formatter"],[3,"Error"],[6,"Result"],[3,"GenericArray"],[6,"Key"],[3,"String"],[3,"TypeId"],[3,"Z0"],[3,"B0"],[3,"B1"],[4,"Ordering"],[3,"PInt"],[3,"NInt"],[3,"TArr"],[3,"ATerm"],[4,"Option"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u8"],[3,"CtVariableCoreWrapper"],[3,"RtVariableCoreWrapper"],[3,"CoreWrapper"],[3,"XofReaderCoreWrapper"],[4,"TruncSide"],[8,"Default"],[6,"Buffer"],[6,"Result"],[6,"Block"],[8,"VariableOutput"],[8,"ExtendableOutput"],[8,"Update"],[8,"Digest"],[8,"Mac"],[8,"ExtendableOutputReset"],[8,"VariableOutputReset"],[8,"FixedOutput"],[8,"FixedOutputReset"],[8,"InnerInit"],[8,"KeyInit"],[8,"XofReader"],[8,"Reset"],[8,"BlockSizeUser"],[8,"BufferKindUser"],[8,"CoreProxy"],[8,"ExtendableOutputCore"],[8,"VariableOutputCore"],[8,"FixedOutputCore"],[8,"XofReaderCore"],[8,"UpdateCore"],[8,"AlgorithmName"]]},\
"either":{"doc":"The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","t":[4,2,13,2,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,12,12],"n":["Either","Left","Left","Right","Right","all","any","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","borrow","borrow_mut","clone","clone_from","cmp","collect","count","deref","deref_mut","either","either_into","either_with","eq","expect_left","expect_right","extend","factor_err","factor_first","factor_none","factor_ok","factor_second","find","find_map","flip","fmt","fmt","fold","for_both","for_each","from","from","hash","into","into","into_inner","into_iter","into_iter","is_left","is_right","last","left","left_and_then","left_or","left_or_default","left_or_else","len","map","map_left","map_right","next","next_back","nth","partial_cmp","partition","position","rfind","rfold","right","right_and_then","right_or","right_or_default","right_or_else","size_hint","try_from","try_into","try_left","try_right","type_id","unwrap_left","unwrap_right","0","0"],"q":["either","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","either::Either",""],"d":["The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","","A value of type <code>L</code>.","","A value of type <code>R</code>.","","","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","","","","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","","","","","","","","","","","","","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","","Returns the left value","Returns the right value","","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","","","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","","","","Evaluate the provided expression for both <code>Either::Left</code> and …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Extract the value of an either over two equivalent types.","","Convert the inner value to an iterator.","Return true if the value is the <code>Left</code> variant.","Return true if the value is the <code>Right</code> variant.","","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","","Map <code>f</code> over the contained value and return the result in the","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","","","","","","","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","","","","Macro for unwrapping the left side of an <code>Either</code>, which …","Dual to <code>try_left!</code>, see its documentation for more …","","Returns the left value","Returns the right value","",""],"i":[0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,17,18],"f":[0,0,0,0,0,[1,2],[1,2],[1,1],[1],[1],[1,3],[1,1],[1],[1],[1,3],[[]],[[]],[[[1,[4,4]]],[[1,[4,4]]]],[[[1,[4,4]],[1,[4,4]]]],[[[1,[5,5]],1],6],[1],[1,7],[1],[1],[1],[1],[1],[[[1,[8,8]],1],2],[[1,3]],[[1,3]],[1],[[[1,[9,9]]],[[9,[1]]]],[1],[[[1,[10,10]]],[[10,[1]]]],[[[1,[9,9]]],[[9,[1]]]],[1],[1,10],[1,10],[1,1],[[[1,[11,11]],12],13],[[1,12],13],[1],0,[1],[9,1],[[]],[[[1,[14,14]]]],[[]],[1,9],[1],[[]],[1,1],[1,2],[1,2],[1,10],[1,10],[1,1],[1],[1],[1],[1,7],[1,1],[1,1],[1,1],[1,10],[1,10],[[1,7],10],[[[1,[15,15]],1],[[10,[6]]]],[1],[1,[[10,[7]]]],[1,10],[1],[1,10],[1,1],[1],[1],[1],[1],[[],9],[[],9],0,0,[[],16],[1],[1],0,0],"p":[[4,"Either"],[15,"bool"],[15,"str"],[8,"Clone"],[8,"Ord"],[4,"Ordering"],[15,"usize"],[8,"PartialEq"],[4,"Result"],[4,"Option"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Hash"],[8,"PartialOrd"],[3,"TypeId"],[13,"Left"],[13,"Right"]]},\
"funty":{"doc":"<code>fun</code>damental <code>ty</code>pes","t":[8,8,8,8,8,8,8,8,8,8,18,16,18,18,18,18,18,18,18,18,18,18,18,18,8,8,18,8,8,8,8,8,8,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,8,18,18,18,16,18,8,8,18,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],"n":["AtLeast128","AtLeast16","AtLeast32","AtLeast64","AtLeast8","AtMost128","AtMost16","AtMost32","AtMost64","AtMost8","BITS","Bytes","DIGITS","E","EPSILON","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Floating","Fundamental","INFINITY","Integral","Is128","Is16","Is32","Is64","Is8","LN_10","LN_2","LOG10_E","LOG2_E","MANTISSA_DIGITS","MAX","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","NAN","NEG_INFINITY","Numeric","ONE","PI","RADIX","Raw","SQRT_2","Signed","Unsigned","ZERO","abs","as_bool","as_char","as_f32","as_f64","as_i128","as_i16","as_i32","as_i64","as_i8","as_isize","as_u128","as_u16","as_u32","as_u64","as_u8","as_usize","checked_abs","checked_add","checked_div","checked_div_euclid","checked_mul","checked_neg","checked_next_power_of_two","checked_pow","checked_rem","checked_rem_euclid","checked_shl","checked_shr","checked_sub","classify","count_ones","count_zeros","div_euclid","from_be","from_be_bytes","from_bits","from_le","from_le_bytes","from_ne_bytes","from_str_radix","is_finite","is_infinite","is_nan","is_negative","is_normal","is_positive","is_power_of_two","is_sign_negative","is_sign_positive","leading_ones","leading_zeros","max","max_value","min","min_value","next_power_of_two","overflowing_abs","overflowing_add","overflowing_div","overflowing_div_euclid","overflowing_mul","overflowing_neg","overflowing_pow","overflowing_rem","overflowing_rem_euclid","overflowing_shl","overflowing_shr","overflowing_sub","pow","recip","rem_euclid","reverse_bits","rotate_left","rotate_right","saturating_add","saturating_mul","saturating_pow","saturating_sub","signum","swap_bytes","to_be","to_be_bytes","to_bits","to_degrees","to_le","to_le_bytes","to_ne_bytes","to_radians","trailing_ones","trailing_zeros","wrapping_abs","wrapping_add","wrapping_div","wrapping_div_euclid","wrapping_mul","wrapping_neg","wrapping_pow","wrapping_rem","wrapping_rem_euclid","wrapping_shl","wrapping_shr","wrapping_sub"],"q":["funty","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Declare that a type is one hundred twenty-eight or more …","Declare that a type is sixteen or more bits wide.","Declare that a type is thirty-two or more bits wide.","Declare that a type is sixty-four or more bits wide.","Declare that a type is eight or more bits wide.","Declare that a type is one hundred twenty-eight or fewer …","Declare that a type is sixteen or fewer bits wide.","Declare that a type is thirty-two or fewer bits wide.","Declare that a type is sixty-four or fewer bits wide.","Declare that a type is eight or fewer bits wide.","The size of this type in bits.","The <code>[u8; N]</code> byte array that stores values of <code>Self</code>.","Approximate number of significant digits in base 10.","Euler’s number (e)","Machine epsilon value for <code>f32</code>.","1/π","1/sqrt(2)","2/π","2/sqrt(π)","π/2","π/3","π/4","π/6","π/8","Declare that a type is a floating-point number.","Declare that a type is one of the language fundamental …","Infinity (∞).","Declare that a type is a fixed-point integer.","Declare that a type is exactly one hundred twenty-eight …","Declare that a type is exactly sixteen bits wide.","Declare that a type is exactly thirty-two bits wide.","Declare that a type is exactly sixty-four bits wide.","Declare that a type is exactly eight bits wide.","ln(10)","ln(2)","log10(e)","log2(e)","Number of significant digits in base 2.","The type’s maximum value.","Largest finite <code>f32</code> value.","Maximum possible power of 10 exponent.","Maximum possible power of 2 exponent.","The type’s minimum value. This is zero for unsigned …","Smallest finite <code>f32</code> value.","Minimum possible normal power of 10 exponent.","One greater than the minimum possible normal power of 2 …","Smallest positive normal <code>f32</code> value.","Not a Number (NaN).","Negative infinity (−∞).","Declare that a type is an abstract number.","The type’s step value.","Archimedes’ constant (π)","The radix or base of the internal representation of <code>f32</code>.","The unsigned integer type of the same width as <code>Self</code>.","sqrt(2)","Declare that a type is a signed integer.","Declare that a type is an unsigned integer.","The type’s zero value.","Overflow behavior","Tests <code>self != 0</code>.","Represents <code>self</code> as a Unicode Scalar Value, if possible.","Performs <code>self as f32</code>.","Performs <code>self as f64</code>.","Performs <code>self as i128</code>.","Performs <code>self as i16</code>.","Performs <code>self as i32</code>.","Performs <code>self as i64</code>.","Performs <code>self as i8</code>.","Performs <code>self as isize</code>.","Performs <code>self as u128</code>.","Performs <code>self as u16</code>.","Performs <code>self as u32</code>.","Performs <code>self as u64</code>.","Performs <code>self as u8</code>.","Performs <code>self as usize</code>.","Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer division. Computes <code>self / rhs</code>, returning …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked integer multiplication. Computes <code>self * rhs</code>, …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …","Returns the smallest power of two greater than or equal to …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked integer subtraction. Computes <code>self - rhs</code>, …","Returns the floating point category of the number. If only …","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Calculates the quotient of Euclidean division of self by …","Converts an integer from big endian to the target’s …","Create a numeric value from its representation as a byte …","Raw transmutation from <code>u32</code>.","Converts an integer frm little endian to the target’s …","Create a numeric value from its representation as a byte …","Create a numeric value from its memory representation as a …","Converts a string slice in a given base to an integer.","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this value is <code>NaN</code>.","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if <code>self</code> has a negative sign, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> has a positive sign, including <code>+0.0</code>, …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Returns the maximum of the two numbers.","Returns the largest value that can be represented by this …","Returns the minimum of the two numbers.","Returns the smallest value that can be represented by this …","Returns the smallest power of two greater than or equal to …","Computes the absolute value of <code>self</code>.","Calculates <code>self + rhs</code>","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.","Calculates the quotient of Euclidean division …","Calculates the multiplication of <code>self</code> and <code>rhs</code>.","Negates self, overflowing if this is equal to the minimum …","Raises self to the power of <code>exp</code>, using exponentiation by …","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.","Overflowing Euclidean remainder. Calculates …","Shifts self left by <code>rhs</code> bits.","Shifts self right by <code>rhs</code> bits.","Calculates <code>self - rhs</code>","Raises self to the power of <code>exp</code>, using exponentiation by …","Takes the reciprocal (inverse) of a number, <code>1/x</code>.","Calculates the least nonnegative remainder of …","Reverses the bit pattern of the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Returns a number representing sign of <code>self</code>.","Reverses the byte order of the integer.","Converts <code>self</code> to big endian from the target’s endianness.","Return the memory representation of this number as a byte …","Raw transmutation to <code>u32</code>.","Converts radians to degrees.","Converts <code>self</code> to little endian from the target’s …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Converts degrees to radians.","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Wrapping (modular) absolute value. Computes <code>self.abs()</code>, …","Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping …","Wrapping (modular) division. Computes <code>self / rhs</code>, wrapping …","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>, …","Wrapping (modular) remainder. Computes <code>self % rhs</code>, …","Wrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …"],"i":[0,0,0,0,0,0,0,0,0,0,22,23,24,24,24,24,24,24,24,24,24,24,24,24,0,0,24,0,0,0,0,0,0,24,24,24,24,24,22,24,24,24,22,24,24,24,24,24,24,0,22,24,24,24,24,0,0,22,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,25,22,22,22,22,22,27,22,22,22,22,22,22,24,22,22,22,22,23,24,22,23,23,22,24,24,24,25,24,25,27,24,24,22,22,24,22,24,22,27,25,22,22,22,22,22,22,22,22,22,22,22,22,24,22,22,22,22,22,22,22,22,25,22,22,23,24,24,22,23,23,24,22,22,25,22,22,22,22,22,22,22,22,22,22,22],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[],1],[[],[[3,[2]]]],[[],4],[[],5],[[],6],[[],7],[[],8],[[],9],[[],10],[[],11],[[],12],[[],13],[[],14],[[],15],[[],16],[[],17],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[14,3],[[],3],[[],3],[14,3],[14,3],[[],3],[[],18],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[19,14],[[21,[20]]]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14],[[]],[[]],[14],[14],[[]],[14],[[]],[[]],[[]],[14],[14],[[]],[[]],[14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[14],[[]],[[]],[14],[14],[[]]],"p":[[15,"bool"],[15,"char"],[4,"Option"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"u8"],[15,"usize"],[4,"FpCategory"],[15,"str"],[3,"ParseIntError"],[4,"Result"],[8,"Integral"],[8,"Numeric"],[8,"Floating"],[8,"Signed"],[8,"Fundamental"],[8,"Unsigned"]]},\
"generic_array":{"doc":"This crate implements a structure that can be used as a …","tn":["ArrayLength","ArrayType","GenericArray","GenericArrayIter","append","arr","arr","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut_slice","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from_slice","cmp","concat","default","deref","deref_mut","eq","fmt","fmt","fmt","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_exact_iter","from_iter","from_mut_slice","from_slice","functional","generate","hash","into","into_iter","into_iter","into_iter","iter","map","partial_cmp","pop_back","pop_front","prepend","sequence","split","split","split","try_from","try_into","type_id","zip","AddLength","Inc","Output","FunctionalSequence","Mapped","MappedGenericSequence","MappedSequence","fold","map","zip","GenericArrayIter","as_mut_slice","as_slice","borrow","borrow_mut","clone","count","drop","fmt","fold","from","into","into_iter","last","len","next","next_back","nth","rfold","size_hint","try_from","try_into","type_id","Concat","First","GenericSequence","Length","Lengthen","Longer","Output","Rest","Second","Sequence","SequenceItem","Shorten","Shorter","Split","append","concat","generate","pop_back","pop_front","prepend","split"],"q":["generic_arraygeneric_array::arr","","","generic_array::functional","","","","","","","generic_array::iter","","","","","","","","","","","","","","","","","","","","","","","generic_array::sequence","","","","","","","","","","","","","","","","","","","",""],"d":["Trait making <code>GenericArray</code> work, marking types to be used …","Associated type representing the array type for the number","Struct representing a generic array - <code>GenericArray&lt;T, N&gt;</code> …","","","Implementation for <code>arr!</code> macro.","Macro allowing for easy generation of Generic Arrays. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extracts a mutable slice containing the entire array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extracts a slice containing the entire array.","","","","","","Construct a <code>GenericArray</code> from a slice by cloning its …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts mutable slice to a mutable generic array reference","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts slice to a generic array reference with inferred …","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>GenericArray</code> instance from an iterator with …","","Converts mutable slice to a mutable generic array reference","Converts slice to a generic array reference with inferred …","Functional programming with generic sequences","","","Calls <code>U::from(self)</code>.","","","","<code>GenericArray</code> iterator implementation.","","","","","","Useful traits for manipulating sequences of data stored in …","","","","","","","","Helper trait for <code>arr!</code> macro","Helper type for <code>arr!</code> macro","Resulting length","Defines functional programming methods for generic …","Mapped sequence type","Defines the relationship between one generic sequence and …","Accessor type for a mapped generic sequence","Folds (or reduces) a sequence of data into a single value.","Maps a <code>GenericSequence</code> to another <code>GenericSequence</code>.","Combines two <code>GenericSequence</code> instances and iterates …","An iterator that moves out of a <code>GenericArray</code>","Returns the remaining items of this iterator as a mutable …","Returns the remaining items of this iterator as a slice","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Defines <code>GenericSequence</code>s which can be joined together, …","First part of the resulting split array","Defines some sequence with an associated length and …","<code>GenericArray</code> associated length","Defines any <code>GenericSequence</code> which can be lengthened or …","<code>GenericSequence</code> that has one more element than <code>Self</code>","Resulting sequence formed by the concatenation.","Sequence to be concatenated with <code>self</code>","Second part of the resulting split array","Concrete sequence type used in conjuction with reference …","Accessor for <code>GenericSequence</code> item type, which is really …","Defines a <code>GenericSequence</code> which can be shortened by …","<code>GenericSequence</code> that has one less element than <code>Self</code>","Defines a <code>GenericSequence</code> that can be split into two parts …","Returns a new array with the given element appended to the …","Concatenate, or join, two sequences.","Initializes a new sequence instance using the given …","Returns a new array without the last element, and the last …","Returns a new array without the first element, and the …","Returns a new array with the given element prepended to …","Splits an array at the given index, returning the separate …"],"i":[0,1,0,0,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,2,0,2,2,2,2,2,2,2,0,0,98,0,99,0,0,100,100,100,0,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,0,101,0,102,0,103,104,104,101,102,0,0,105,0,103,104,102,105,105,103,101],"f":[0,0,0,0,[[[2,[1]]]],0,0,[[[2,[3]]]],[[[2,[4]]]],[[[2,[5]]]],[[[2,[6]]]],[[[2,[7]]]],[[[2,[8]]]],[[[2,[9]]]],[[[2,[10]]]],[[[2,[11]]]],[[[2,[12]]]],[[[2,[13]]]],[[[2,[14]]]],[[[2,[15]]]],[[[2,[16]]]],[[[2,[17]]]],[[[2,[18]]]],[[[2,[19]]]],[[[2,[20]]]],[[[2,[21]]]],[[[2,[22]]]],[[[2,[23]]]],[[[2,[24]]]],[[[2,[25]]]],[[[2,[26]]]],[[[2,[27]]]],[[[2,[28]]]],[[[2,[29]]]],[[[2,[30]]]],[[[2,[31]]]],[[[2,[32]]]],[[[2,[33]]]],[[[2,[34]]]],[[[2,[35]]]],[[[2,[36]]]],[[[2,[37]]]],[[[2,[38]]]],[[[2,[39]]]],[[[2,[40]]]],[[[2,[41]]]],[[[2,[42]]]],[[[2,[43]]]],[[[2,[44]]]],[[[2,[45]]]],[[[2,[46]]]],[[[2,[47]]]],[[[2,[48]]]],[[[2,[49]]]],[[[2,[50]]]],[[[2,[51]]]],[[[2,[52]]]],[[[2,[53]]]],[[[2,[54]]]],[[[2,[55]]]],[[[2,[56]]]],[[[2,[57]]]],[[[2,[58]]]],[[[2,[59]]]],[[[2,[60]]]],[[[2,[61]]]],[[[2,[62]]]],[[[2,[63]]]],[[[2,[64]]]],[[[2,[65]]]],[[[2,[66]]]],[[[2,[67]]]],[[[2,[68]]]],[[[2,[69]]]],[[[2,[70]]]],[2],[[[2,[71]]]],[[[2,[72]]]],[[[2,[73]]]],[[[2,[74]]]],[[[2,[75]]]],[[[2,[76]]]],[[[2,[77]]]],[[[2,[78]]]],[[[2,[79]]]],[2],[[[2,[24]]]],[[[2,[25]]]],[[[2,[77]]]],[[[2,[76]]]],[[[2,[73]]]],[[[2,[72]]]],[[[2,[40]]]],[[[2,[32]]]],[[[2,[65]]]],[[[2,[41]]]],[2],[[[2,[5]]]],[[[2,[69]]]],[[[2,[6]]]],[[[2,[67]]]],[[[2,[7]]]],[[[2,[68]]]],[[[2,[8]]]],[[[2,[4]]]],[[[2,[64]]]],[[[2,[43]]]],[[[2,[9]]]],[[[2,[63]]]],[[[2,[11]]]],[[[2,[61]]]],[[[2,[12]]]],[[[2,[62]]]],[[[2,[13]]]],[[[2,[60]]]],[[[2,[59]]]],[[[2,[58]]]],[[[2,[14]]]],[[[2,[57]]]],[[[2,[54]]]],[[[2,[53]]]],[[[2,[52]]]],[[[2,[56]]]],[[[2,[15]]]],[[[2,[50]]]],[[[2,[49]]]],[[[2,[48]]]],[[[2,[51]]]],[[[2,[46]]]],[[[2,[47]]]],[[[2,[45]]]],[[[2,[44]]]],[[[2,[66]]]],[[[2,[75]]]],[[[2,[17]]]],[[[2,[3]]]],[[[2,[78]]]],[[[2,[42]]]],[[[2,[18]]]],[[[2,[70]]]],[[[2,[39]]]],[[[2,[16]]]],[[[2,[37]]]],[[[2,[38]]]],[[[2,[35]]]],[[[2,[34]]]],[[[2,[33]]]],[[[2,[31]]]],[[[2,[36]]]],[[[2,[27]]]],[[[2,[30]]]],[[[2,[29]]]],[[[2,[28]]]],[[[2,[71]]]],[[[2,[55]]]],[[[2,[26]]]],[[[2,[74]]]],[[[2,[79]]]],[[[2,[23]]]],[[[2,[20]]]],[[[2,[22]]]],[[[2,[21]]]],[[[2,[19]]]],[[[2,[10]]]],[2],[[]],[2],[2],[[]],[[[2,[80]]],[[2,[80]]]],[[],[[2,[80]]]],[[[2,[81]],2],82],[2],[[],[[2,[83]]]],[2],[2],[[[2,[84]],[2,[84]]],85],[[[2,[86,[1,[86]]]],87],88],[[[2,[86,[1,[86]]]],87],88],[[[2,[89]],87],88],[2],[[],2],[[],2],[[],2],[[],2],[[],[[2,[26]]]],[[],2],[[],2],[[],[[2,[22]]]],[[],2],[[],2],[[],[[2,[18]]]],[[],2],[[],2],[[],[[2,[12]]]],[[],2],[[],2],[[],[[2,[6]]]],[[],2],[[],2],[[],[[2,[40]]]],[[],2],[[],2],[[],[[2,[28]]]],[[],2],[[],2],[[],[[2,[20]]]],[[],2],[[],2],[[],[[2,[14]]]],[[],2],[[],2],[[],[[2,[5]]]],[[],2],[[],2],[[],[[2,[27]]]],[[],2],[[],2],[[],[[2,[16]]]],[[],2],[[],2],[[],[[2,[32]]]],[[],2],[[],2],[[],[[2,[10]]]],[[],2],[[],2],[[],[[2,[24]]]],[[],2],[[],2],[[],[[2,[8]]]],[[],2],[[],2],[[],[[2,[36]]]],[[],2],[[],2],[[],2],[[],[[2,[38]]]],[[],2],[[],2],[[],2],[[],2],[[],[[2,[4]]]],[[],2],[[],2],[[],[[2,[34]]]],[[],2],[[],[[2,[42]]]],[[],2],[[],2],[[],2],[[],[[2,[39]]]],[[],[[2,[43]]]],[[],2],[[],2],[[],2],[[],2],[[],[[2,[47]]]],[[],2],[[],2],[[],[[2,[3]]]],[[],2],[[],[[2,[51]]]],[[],2],[[],2],[[],2],[[],[[2,[45]]]],[[],[[2,[56]]]],[[],2],[[],2],[[],2],[[],[[2,[49]]]],[[],[[2,[57]]]],[[],2],[[],2],[[],2],[[],2],[[],[[2,[60]]]],[[],2],[[],2],[[],[[2,[53]]]],[[],2],[[],[[2,[62]]]],[[],2],[[],2],[[],2],[[],[[2,[59]]]],[[],[[2,[63]]]],[[],2],[[],2],[[],2],[[],2],[[],[[2,[66]]]],[[],2],[[],2],[[],[[2,[61]]]],[[],2],[[],[[2,[68]]]],[[],2],[[],2],[[],2],[[],[[2,[64]]]],[[],[[2,[69]]]],[[],2],[[],2],[[],2],[[],2],[[],[[2,[55]]]],[[],2],[[],2],[[],[[2,[67]]]],[[],2],[[],[[2,[75]]]],[[],2],[[],2],[[],2],[[],[[2,[70]]]],[[],[[2,[77]]]],[[],2],[[],2],[[],2],[[],2],[[],[[2,[78]]]],[[],2],[[],2],[[],[[2,[73]]]],[[],2],[[],[[2,[74]]]],[[],2],[[],2],[[],2],[[],[[2,[79]]]],[[],[[2,[72]]]],[[],2],[[],2],[[],2],[[],2],[[],[[2,[65]]]],[[],[[2,[30]]]],[[],2],[[],[[2,[76]]]],[[],2],[[],[[2,[58]]]],[[],2],[[],2],[[],2],[[],2],[[],[[2,[54]]]],[[],2],[[],2],[[],[[2,[7]]]],[[],2],[[],[[2,[52]]]],[[],2],[[],2],[[],2],[[]],[[],[[2,[50]]]],[[],2],[[],2],[[],[[2,[9]]]],[[],2],[[],[[2,[48]]]],[[],2],[[],2],[[],2],[[],[[2,[11]]]],[[],[[2,[46]]]],[[],2],[[],2],[[],2],[[],2],[[],[[2,[44]]]],[[],2],[[],2],[[],[[2,[13]]]],[[],2],[[],[[2,[41]]]],[[],2],[[],2],[[],2],[[],[[2,[15]]]],[[],[[2,[37]]]],[[],2],[[],2],[[],2],[[],2],[[],[[2,[35]]]],[[],2],[[],2],[[],[[2,[17]]]],[[],2],[[],[[2,[33]]]],[[],2],[[],2],[[],2],[[],[[2,[19]]]],[[],[[2,[31]]]],[[],2],[[],2],[[],2],[[],2],[[],[[2,[29]]]],[[],2],[[],2],[[],[[2,[21]]]],[[],2],[[],[[2,[71]]]],[[],2],[[],2],[[],2],[[],[[2,[23]]]],[[],[[2,[25]]]],[[],2],[[],2],[[],[[90,[2]]]],[[],2],[[],2],[[],2],0,[[],2],[[[2,[91]]]],[[]],[2],[2],[2],0,[2,[[92,[2]]]],[[[2,[93]],2],[[90,[82]]]],[[[2,[1]]]],[[[2,[1]]]],[[[2,[1]]]],0,[2],[2],[2],[[],94],[[],94],[[],95],[2,[[92,[2]]]],0,0,0,0,0,0,0,[[]],[[],92],[[],92],0,[96],[96],[[]],[[]],[[[96,[80]]],[[96,[80]]]],[96,97],[96],[[[96,[89]],87],88],[96],[[]],[[]],[[]],[96,90],[96,97],[96,90],[96,90],[[96,97],90],[96],[96],[[],94],[[],94],[[],95],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[8,"ArrayLength"],[3,"GenericArray"],[6,"U12"],[6,"U34"],[6,"U25"],[6,"U20"],[6,"U1024"],[6,"U31"],[6,"U1000"],[6,"U29"],[6,"U512"],[6,"U19"],[6,"U256"],[6,"U24"],[6,"U128"],[6,"U27"],[6,"U500"],[6,"U18"],[6,"U400"],[6,"U23"],[6,"U300"],[6,"U17"],[6,"U200"],[6,"U30"],[6,"U100"],[6,"U16"],[6,"U26"],[6,"U22"],[6,"U80"],[6,"U15"],[6,"U70"],[6,"U28"],[6,"U64"],[6,"U14"],[6,"U63"],[6,"U32"],[6,"U62"],[6,"U33"],[6,"U13"],[6,"U21"],[6,"U61"],[6,"U35"],[6,"U36"],[6,"U60"],[6,"U11"],[6,"U59"],[6,"U37"],[6,"U58"],[6,"U10"],[6,"U57"],[6,"U38"],[6,"U56"],[6,"U9"],[6,"U55"],[6,"U47"],[6,"U39"],[6,"U40"],[6,"U54"],[6,"U8"],[6,"U41"],[6,"U7"],[6,"U42"],[6,"U43"],[6,"U6"],[6,"U53"],[6,"U44"],[6,"U5"],[6,"U45"],[6,"U46"],[6,"U4"],[6,"U90"],[6,"U52"],[6,"U3"],[6,"U51"],[6,"U48"],[6,"U1"],[6,"U49"],[6,"U50"],[6,"U2"],[8,"Clone"],[8,"Ord"],[4,"Ordering"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[15,"u8"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[4,"Option"],[8,"Hash"],[6,"MappedSequence"],[8,"PartialOrd"],[4,"Result"],[3,"TypeId"],[3,"GenericArrayIter"],[15,"usize"],[8,"AddLength"],[8,"MappedGenericSequence"],[8,"FunctionalSequence"],[8,"Split"],[8,"GenericSequence"],[8,"Lengthen"],[8,"Concat"],[8,"Shorten"]]},\
"getrandom":{"doc":"Interface to the operating system’s random number …","t":[18,18,3,18,18,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11],"n":["CUSTOM_START","ERRNO_NOT_POSITIVE","Error","FAILED_RDRAND","INTERNAL_START","IOS_SEC_RANDOM","NODE_CRYPTO","NODE_RANDOM_FILL_SYNC","NO_RDRAND","UNSUPPORTED","VXWORKS_RAND_SECURE","WEB_CRYPTO","WEB_GET_RANDOM_VALUES","WINDOWS_RTL_GEN_RANDOM","borrow","borrow_mut","clone","clone_into","code","eq","fmt","fmt","from","from","getrandom","into","raw_os_error","to_owned","to_string","try_from","try_into","type_id"],"q":["getrandom","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Codes at or above this point can be used by users to …","The platform-specific <code>errno</code> returned a non-positive value.","A small and <code>no_std</code> compatible error type","RDRAND instruction failed due to a hardware issue.","Codes below this point represent OS Errors (i.e. positive …","Call to iOS <code>SecRandomCopyBytes</code> failed.","NodeJS does not have support for the <code>crypto</code> module.","NodeJS does not have support for <code>crypto.randomFillSync</code>.","RDRAND instruction unsupported on this target.","This target/platform is not supported by <code>getrandom</code>.","On VxWorks, call to <code>randSecure</code> failed (random number …","The browser does not have support for <code>self.crypto</code>.","The browser does not have support for …","Call to Windows <code>RtlGenRandom</code> failed.","","","","","Extract the bare error code.","","","","","Returns the argument unchanged.","Fill <code>dest</code> with random bytes from the system’s preferred …","Calls <code>U::from(self)</code>.","Extract the raw OS error code (if this error came from the …","","","","",""],"i":[1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[[]],[1,2],[[1,1],3],[[1,4],5],[[1,4],5],[2,1],[[]],[[],[[6,[1]]]],[[]],[1,[[8,[7]]]],[[]],[[],9],[[],6],[[],6],[[],10]],"p":[[3,"Error"],[3,"NonZeroU32"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[15,"i32"],[4,"Option"],[3,"String"],[3,"TypeId"]]},\
"heck":{"doc":"<strong>heck</strong> is a case conversion library.","t":[12,12,12,12,12,12,12,12,12,12,3,3,3,3,3,3,3,3,3,3,10,8,8,8,8,8,8,8,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","0","0","0","0","0","0","0","0","0","AsKebabCase","AsLowerCamelCase","AsPascalCase","AsShoutyKebabCase","AsShoutySnakeCase","AsShoutySnekCase","AsSnakeCase","AsSnekCase","AsTitleCase","AsUpperCamelCase","TO_SHOUTY_SNEK_CASE","ToKebabCase","ToLowerCamelCase","ToPascalCase","ToShoutyKebabCase","ToShoutySnakeCase","ToShoutySnekCase","ToSnakeCase","ToSnekCase","ToTitleCase","ToUpperCamelCase","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into","into","into","to_kebab_case","to_lower_camel_case","to_pascal_case","to_shouty_kebab_case","to_shouty_snake_case","to_snake_case","to_snek_case","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_title_case","to_upper_camel_case","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["heck","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","This wrapper performs a kebab case conversion in …","This wrapper performs a lower camel case conversion in …","This wrapper performs a upper camel case conversion in …","This wrapper performs a kebab case conversion in …","This wrapper performs a shouty snake  case conversion in …","This wrapper performs a shouty snake  case conversion in …","This wrapper performs a snake case conversion in …","This wrapper performs a snake case conversion in …","This wrapper performs a title case conversion in …","This wrapper performs a upper camel case conversion in …","CONVERT THIS TYPE TO SNEK CASE.","This trait defines a kebab case conversion.","This trait defines a lower camel case conversion.","ToPascalCase is an alias for ToUpperCamelCase. See …","This trait defines a shouty kebab case conversion.","This trait defines a shouty snake case conversion.","Oh heck, ToShoutySnekCase is an alias for …","This trait defines a snake case conversion.","Oh heck, SnekCase is an alias for ToSnakeCase. See …","This trait defines a title case conversion.","This trait defines an upper camel case conversion.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this type to kebab case.","Convert this type to lower camel case.","Convert this type to upper camel case.","Convert this type to shouty kebab case.","Convert this type to shouty snake case.","Convert this type to snake case.","Convert this type to snek case.","","","","","","","","Convert this type to title case.","Convert this type to upper camel case.","","","","","","","","","","","","","","","","","","","","",""],"i":[3,6,7,8,8,9,9,10,11,11,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,3,6,7,8,9,10,11,3,6,7,8,9,10,11,3,6,7,8,9,10,11,3,6,7,8,9,10,11,3,6,7,8,9,10,11,16,17,18,19,20,21,22,3,6,7,8,9,10,11,23,24,3,6,7,8,9,10,11,3,6,7,8,9,10,11,3,6,7,8,9,10,11],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[[2,[1]]]],4],5],[[[6,[[2,[1]]]],4],5],[[[7,[[2,[1]]]],4],5],[[[8,[[2,[1]]]],4],5],[[[9,[[2,[1]]]],4],5],[[[10,[[2,[1]]]],4],5],[[[11,[[2,[1]]]],4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14]],"p":[[15,"str"],[8,"AsRef"],[3,"AsKebabCase"],[3,"Formatter"],[6,"Result"],[3,"AsLowerCamelCase"],[3,"AsShoutyKebabCase"],[3,"AsShoutySnakeCase"],[3,"AsSnakeCase"],[3,"AsTitleCase"],[3,"AsUpperCamelCase"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"ToShoutySnekCase"],[8,"ToKebabCase"],[8,"ToLowerCamelCase"],[8,"ToPascalCase"],[8,"ToShoutyKebabCase"],[8,"ToShoutySnakeCase"],[8,"ToSnakeCase"],[8,"ToSnekCase"],[8,"ToTitleCase"],[8,"ToUpperCamelCase"]]},\
"hex":{"doc":"Encoding and decoding hex strings.","t":[16,8,4,13,13,13,8,11,11,11,11,5,5,5,10,10,5,5,11,11,11,11,10,11,11,11,11,11,11,12,12],"n":["Error","FromHex","FromHexError","InvalidHexCharacter","InvalidStringLength","OddLength","ToHex","borrow","borrow_mut","clone","clone_into","decode","decode_to_slice","encode","encode_hex","encode_hex_upper","encode_to_slice","encode_upper","eq","fmt","fmt","from","from_hex","into","to_owned","to_string","try_from","try_into","type_id","c","index"],"q":["hex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hex::FromHexError",""],"d":["","Types that can be decoded from a hex string.","The error type for decoding a hex string into <code>Vec&lt;u8&gt;</code> or …","An invalid character was found. Valid ones are: <code>0...9</code>, …","If the hex string is decoded into a fixed sized container, …","A hex string’s length needs to be even, as two digits …","Encoding values as hex string.","","","","","Decodes a hex string into raw bytes.","Decode a hex string into a mutable bytes slice.","Encodes <code>data</code> as hex string using lowercase characters.","Encode the hex strict representing <code>self</code> into the result. …","Encode the hex strict representing <code>self</code> into the result. …","Encodes some bytes into a mutable slice of bytes.","Encodes <code>data</code> as hex string using uppercase characters.","","","","Returns the argument unchanged.","Creates an instance of type <code>Self</code> from the given hex …","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[13,0,0,1,1,1,0,1,1,1,1,0,0,0,14,14,0,0,1,1,1,1,13,1,1,1,1,1,1,15,15],"f":[0,0,0,0,0,0,0,[[]],[[]],[1,1],[[]],[2,[[5,[[4,[3]],1]]]],[2,[[5,[1]]]],[2,6],[[],[[8,[7]]]],[[],[[8,[7]]]],[2,[[5,[1]]]],[2,6],[[1,1],9],[[1,10],11],[[1,10],11],[[]],[2,5],[[]],[[]],[[],6],[[],5],[[],5],[[],12],0,0],"p":[[4,"FromHexError"],[8,"AsRef"],[15,"u8"],[3,"Vec"],[4,"Result"],[3,"String"],[15,"char"],[8,"FromIterator"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"TypeId"],[8,"FromHex"],[8,"ToHex"],[13,"InvalidHexCharacter"]]},\
"impl_serde":{"doc":"Serde serialization support for uint and fixed hash.","t":[14,14],"n":["impl_fixed_hash_serde","impl_uint_serde"],"q":["impl_serde",""],"d":["Add Serde serialization support to a fixed-sized hash type …","Add Serde serialization support to an integer created by …"],"i":[0,0],"f":[0,0],"p":[]},\
"impl_trait_for_tuples":{"doc":"  ","t":[23],"n":["impl_for_tuples"],"q":["impl_trait_for_tuples"],"d":["See crate documentation."],"i":[0],"f":[0],"p":[]},\
"ink_allocator":{"doc":"Crate providing allocator support for all Wasm …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"ink_engine":{"doc":"","t":[13,4,8,13,4,13,13,13,13,13,11,11,11,11,10,11,11,11,11,0,11,11,11,11,11,11,10,11,11,0,11,11,11,11,11,11,11,11,11,12,12,12,13,13,3,13,13,3,4,13,13,13,3,13,13,13,13,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Account","AccountError","ChainExtension","Decoding","Error","NoAccountForId","UnexpectedUserAccount","UninitializedBlocks","UninitializedExecutionContext","UnregisteredChainExtension","borrow","borrow","borrow_mut","borrow_mut","call","clone","clone_into","eq","eq","ext","fmt","fmt","from","from","from","from","func_id","into","into","test_api","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","0","CalleeReverted","CalleeTrapped","ChainSpec","CodeNotFound","EcdsaRecoveryFailed","Engine","Error","KeyNotFound","LoggingDisabled","NotCallable","ReturnCode","TransferFailed","Unknown","_BelowSubsistenceThreshold","_EndowmentTooLow","address","advance_block","balance","block_number","block_time","block_timestamp","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_chain_extension","caller","chain_extension_handler","chain_spec","clear_storage","contains_storage","count_reads","count_used_storage_cells","count_writes","database","debug_message","default","default","deposit_event","ecdsa_recover","exec_context","fmt","from","from","from","from","gas_left","gas_price","get_balance","get_callee","get_contract_storage_rw","get_emitted_debug_messages","get_emitted_events","get_storage","hash_blake2_128","hash_blake2_256","hash_keccak_256","hash_sha2_256","initialize_or_reset","instantiate","into","into","into","into","into_u32","minimum_balance","minimum_balance","new","random","set_balance","set_callee","set_caller","set_storage","set_storage_return_size","set_value_transferred","terminate","transfer","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value_transferred","vzip","vzip","vzip","vzip","weight_to_fee","DebugInfo","EmittedEvent","RecordedDebugMessages","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone_into","clone_into","data","default","default","from","from","from","inc_reads","inc_writes","into","into","into","into_iter","new","new","record","record_cell_for_account","record_debug_message","record_event","remove_cell_for_account","reset","to_owned","to_owned","topics","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["ink_engine","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ink_engine::AccountError","","ink_engine::Error","ink_engine::ext","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ink_engine::test_api","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Errors encountered upon interacting with accounts.","Types implementing this trait can be used as chain …","","Errors which can happen when interacting with this crate.","","","","","","","","","","Calls the chain extension with the given input.","","","","","Provides the same interface as Substrate’s FRAME <code>contract</code>…","","","Returns the argument unchanged.","","","Returns the argument unchanged.","The static function ID of the chain extension.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","The called function ran to completion but decided to …","The called function trapped and has its state changes …","The chain specification.","No code could be found at the supplied code hash.","ECDSA public key recovery failed. Most probably wrong …","The off-chain engine.","Every error that can be returned to a contract when it …","The passed key does not exist in storage.","The call to <code>seal_debug_message</code> had no effect because debug …","The account that was called is no contract.","The raw return code returned by the host side.","Transfer failed for other not further specified reason. …","Returns if an unknown error was received from the host …","Deprecated and no longer returned: There is only the …","Deprecated and no longer returned: Endowment is no longer …","Returns the address of the executed contract.","Advances the chain by a single block.","Returns the balance of the executed contract.","Returns the current block number.","The targeted block time.","Returns the timestamp of the current block.","","","","","","","","","","Calls the chain extension method registered at <code>func_id</code> …","Returns the address of the caller.","Handler for registered chain extensions.","The chain specification.","Removes the storage entries at the given key.","Returns the size of the value stored in the contract …","Returns the total number of reads executed.","Returns the amount of storage cells used by the account …","Returns the total number of writes executed.","The environment database.","Records the given debug message and appends to stdout.","","","Deposits an event identified by the supplied topics and …","Recovers the compressed ECDSA public key for given …","The current execution context.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","The current gas price.","Returns the current balance of <code>account_id</code>.","Returns the callee, i.e. the currently executing contract.","Returns the total number of reads and writes of the …","Returns the contents of the past performed environmental …","Returns the recorded emitted events in order.","Returns the decoded contract storage at the key if any.","Conduct the BLAKE-2 128-bit hash and place the result into …","Conduct the BLAKE-2 256-bit hash and place the result into …","Conduct the KECCAK 256-bit hash and place the result into …","Conduct the SHA-2 256-bit hash and place the result into …","Resets the environment.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the raw underlying <code>u32</code> representation.","Returns the minimum balance that is required for creating …","The minimum value an account of the chain must have (i.e. …","","Returns a randomized hash.","Sets the balance of <code>account_id</code> to <code>new_balance</code>.","Sets the callee for the next call.","Sets a caller for the next call.","Writes the encoded value into the storage at the given key.","Writes the encoded value into the storage at the given key.","Sets the value transferred from the caller to the callee …","Remove the calling account and transfer remaining balance.","Transfers value from the contract to the destination …","","","","","","","","","","","","","Returns the transferred value for the called contract.","","","","","Emulates gas price calculation.","Recorder for relevant interactions with this crate.","Record for an emitted event.","","","","","","","","","","","","","Recorded encoding of the emitted event.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Increases the number of storage reads for the supplied …","Increases the number of storage writes for the supplied …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Records that a cell exists for an account under <code>key</code>.","Records a debug message.","Records an event.","Removes the cell under <code>key</code> for the supplied account.","Resets the recorder.","","","Recorded topics of the emitted event.","","","","","","","","","","","",""],"i":[5,0,0,3,0,3,3,5,5,5,3,5,3,5,27,3,3,3,5,0,3,5,3,3,5,5,27,3,5,0,3,3,5,3,5,3,5,3,5,28,29,30,13,13,0,13,13,0,0,13,13,13,0,13,13,13,13,11,11,11,11,17,11,22,11,17,13,22,11,17,13,11,11,11,11,11,11,11,11,11,11,11,11,11,17,11,11,11,13,22,11,17,13,11,17,11,11,11,11,11,11,11,11,11,11,11,11,22,11,17,13,22,11,17,11,11,11,11,11,11,11,11,11,11,22,11,17,13,22,11,17,13,22,11,17,13,11,22,11,17,13,11,0,0,0,25,24,20,25,24,20,20,24,20,24,20,24,25,20,25,24,20,25,25,25,24,20,20,25,20,20,25,25,25,25,25,24,20,24,25,24,20,25,24,20,25,24,20,25,24,20],"f":[0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,2],[3,3],[[]],[[3,3],4],[[5,5],4],0,[[3,6],7],[[5,6],7],[[]],[8,3],[3,5],[[]],[[],2],[[]],[[]],0,[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[11],[11],[11],[11],0,[11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[11,12],[[9,[13]]]],[[11,2]],[11],0,0,[11],[11,[[14,[2]]]],[11,15],[11,[[9,[15,5]]]],[11,15],0,[[11,16]],[[],11],[[],17],[11],[11,[[9,[13]]]],0,[[13,6],7],[[]],[[]],[[]],[[]],[11],0,[[11,[1,[18]]],[[9,[19,5]]]],[11,[[1,[18]]]],[[11,[1,[18]]]],[11,20],[11,21],[11,[[9,[13]]]],[[]],[[]],[[]],[[]],[11],[[11,12],[[9,[13]]]],[[]],[[]],[[]],[[]],[22,2],[11],0,[[],11],[11],[[11,[1,[18]],19]],[[11,[1,[18]]]],[[11,[1,[18]]]],[11],[11,[[14,[2]]]],[[11,19]],[11,23],[11,[[9,[13]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[11],[[]],[[]],[[]],[[]],[[11,12]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[20],[24,24],[20,20],[[]],[[]],0,[[],25],[[],20],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[20],[[],25],[[],20],[[20,26]],0,[[25,26]],[[25,24]],0,[25],[[]],[[]],0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[]],[[]],[[]]],"p":[[3,"Vec"],[15,"u32"],[4,"AccountError"],[15,"bool"],[4,"Error"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[3,"TypeId"],[3,"Engine"],[15,"u64"],[4,"Error"],[4,"Option"],[15,"usize"],[15,"str"],[3,"ChainSpec"],[15,"u8"],[15,"u128"],[3,"RecordedDebugMessages"],[8,"Iterator"],[3,"ReturnCode"],[15,"never"],[3,"EmittedEvent"],[3,"DebugInfo"],[3,"String"],[8,"ChainExtension"],[13,"Decoding"],[13,"NoAccountForId"],[13,"Account"]]},\
"ink_env":{"doc":"The <code>ink_env</code> utilities used to interoperate with the …","t":[3,16,16,16,16,3,13,13,16,8,13,13,4,13,8,4,8,3,16,13,13,18,4,13,13,16,6,3,16,8,13,13,13,13,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,5,0,10,11,5,11,11,11,11,11,11,11,11,11,11,11,5,5,5,14,14,11,11,11,11,11,11,5,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,5,5,0,11,11,5,5,5,11,11,11,11,11,11,11,5,5,10,11,5,5,5,11,11,5,5,11,11,5,5,5,11,11,11,11,5,0,11,11,11,11,11,11,10,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,3,3,3,3,3,3,3,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,4,11,11,11,11,11,11,11,11,12,6,3,3,3,6,16,3,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,3,8,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,0,11,11,11,11,3,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,4,8,8,4,4,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,3,3,5,12,5,12,11,11,11,11,11,11,10,5,12,11,11,11,11,5,12,11,11,11,11,5,12,11,11,12,11,12,11,11,11,11,10,5,5,11,11,11,11,11,11,5,5,5,5,11,5,5,5,5,5,5,5,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AccountId","AccountId","Balance","BlockNumber","Bytes","CallFlags","CalleeReverted","CalleeTrapped","ChainExtension","Clear","CodeNotFound","Decode","DefaultEnvironment","EcdsaRecoveryFailed","Environment","Error","FromLittleEndian","Hash","Hash","KeyNotFound","LoggingDisabled","MAX_EVENT_TOPICS","NoChainExtension","NotCallable","OffChain","RemainingTopics","Result","ReturnFlags","Timestamp","Topics","TransferFailed","Unknown","_BelowSubsistenceThreshold","_EndowmentTooLow","account_id","allow_reentry","as_byte_slice","as_byte_slice","as_mut","as_mut","as_mut","as_mut_byte_slice","as_mut_byte_slice","as_mut_slice_of","as_mut_slice_of","as_ref","as_ref","as_ref","as_slice_of","as_slice_of","balance","block_number","block_timestamp","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","caller","caller_is_origin","chain_extension","clear","clear","clear_contract_storage","clone","clone","clone","clone","clone_input","clone_into","clone_into","clone_into","clone_into","cmp","cmp","code_hash","contract_storage_contains","debug_message","debug_print","debug_println","decode","decode","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_input","decode_with_depth_limit","decode_with_depth_limit","default","default","default","default","ecdsa_recover","ecdsa_to_eth_address","emit_event","encode","encode","encode_to","encode_to","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","forward_input","from","from","from","from","from","from","from","from","from","from","from","from","from","from_le_bytes","gas_left","get_contract_storage","hash","hash","hash","hash_bytes","hash_encoded","instantiate_contract","into","into","into","into","into","into","into","invoke_contract","invoke_contract_delegate","is_clear","is_clear","is_contract","minimum_balance","own_code_hash","partial_cmp","partial_cmp","random","return_value","set_allow_reentry","set_clone_input","set_code_hash","set_contract_storage","set_contract_storage_return_size","set_forward_input","set_reverted","set_tail_call","tail_call","terminate_contract","test","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","topics","transfer","transferred_value","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_info","type_info","type_info","using_encoded","using_encoded","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weight_to_fee","0","0","Call","CallBuilder","CallParams","CreateBuilder","CreateParams","DelegateCall","ExecutionInput","FromAccountId","Selector","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_call","build_create","call_flags","call_type","callee","callee","clone","clone_into","code_hash","code_hash","code_hash","decode","decode_all","decode_all_with_depth_limit","decode_with_depth_limit","default","default","default","default","encode","encode_to","encode_to","endowment","eq","exec_input","exec_input","fire","fire","fire","fire","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_account_id","gas_limit","gas_limit","gas_limit","instantiate","instantiate","into","into","into","into","into","into","into","into","invoke","invoke","new","new","new","new","params","params","params","params","params","push_arg","push_arg","returns","salt_bytes","size_hint","state","to_bytes","to_keyed_vec","to_owned","transferred_value","transferred_value","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","using_encoded","utils","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Salt","borrow","borrow_mut","from","into","try_from","try_into","type_id","vzip","0","ArgsList","Argument","ArgumentList","ArgumentListEnd","EmptyArgumentList","Output","ReturnType","Set","Unset","Unwrap","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","default","empty","empty","encode_to","encode_to","encode_to","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","push_arg","push_arg","push_arg","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unwrap_or_else","unwrap_or_else","unwrap_or_else","value","vzip","vzip","vzip","vzip","vzip","vzip","ChainExtensionMethod","FromStatusCode","borrow","borrow_mut","build","call","call","call","call","fmt","from","from_status_code","handle_error_code","ignore_error_code","input","into","output","output_result","state","try_from","try_into","type_id","vzip","HandleErrorCode","IgnoreErrorCode","NoResult","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","from","from","from","into","into","into","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Blake2x128","Blake2x256","CryptoHash","HashOutput","Keccak256","Sha2x256","Type","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","hash","hash","hash","hash","hash","into","into","into","into","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","CallData","ChainExtension","DefaultAccounts","EmittedEvent","advance_block","alice","assert_contract_termination","bob","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call","callee","charlie","clone","clone","clone_into","clone_into","count_used_storage_cells","data","decode","decode_all","decode_all_with_depth_limit","decode_with_depth_limit","default_accounts","django","encode_to","eq","eve","fmt","frank","from","from","from","from","func_id","get_account_balance","get_contract_storage_rw","into","into","into","new","params","push_arg","recorded_debug_messages","recorded_events","register_chain_extension","run_test","selector","set_account_balance","set_balance","set_block_entropy","set_callee","set_caller","set_clear_storage_disabled","set_value_transferred","size_hint","to_bytes","to_keyed_vec","to_owned","to_owned","topics","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["ink_envink_env::Error","","ink_env::call","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ink_env::call::state","","","","","","","","","ink_env::call::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ink_env::chain_extension","","","","","","","","","","","","","","","","","","","","","","","ink_env::chain_extension::state","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ink_env::hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ink_env::test","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The default environment <code>AccountId</code> type.","The address type.","The type of balances.","The type of block number.","The little-endian bytes representation.","The flags used to change the behavior of a contract call.","The call to another contract has been reverted.","The call to another contract has trapped.","The chain extension for the environment.","The equivalent of <code>Zero</code> for hashes.","No code could be found at the supplied code hash.","Error upon decoding an encoded value.","The fundamental types of the default configuration.","ECDSA pubkey recovery failed. Most probably wrong recovery …","The environmental types usable by contracts defined with …","Errors that can be encountered upon environmental …","Allows to instantiate a type from its little-endian bytes …","The default environment <code>Hash</code> type.","The type of hash.","The queried contract storage entry is missing.","The call to <code>seal_debug_message</code> had no effect because debug …","The maximum number of supported event topics provided by …","Placeholder for chains that have no defined chain …","The account that was called is no contract, but a plain …","An error that can only occur in the off-chain environment.","Type state indicating how many event topics are to be …","A result of environmental operations.","The flags to indicate further information about the end of …","The type of a timestamp.","Implemented by event types to guide the event topic …","Transfer failed for other not further specified reason. …","An unknown error has occurred.","Deprecated and no longer returned: There is only the …","Deprecated and no longer returned: Endowment is no longer …","Returns the account ID of the executed contract.","Returns <code>true</code> if call reentry is allowed.","","","","","","","","","","","","","","","Returns the balance of the executed contract.","Returns the current block number.","Returns the current block timestamp.","","","","","","","","","","","","","","","Utilities to call or instantiate contracts on the chain.","Returns the address of the caller of the executed contract.","Checks whether the caller of the current contract is the …","Definitions and utilities for calling chain extension …","Returns a clear hash.","","Clears the contract’s storage key entry.","","","","","Returns <code>true</code> if input cloning is set.","","","","","","","Retrieves the code hash of the contract at the specified …","Checks whether there is a value stored under the given key …","Appends the given message to the debug message buffer.","Appends a formatted string to the <code>debug_message</code> buffer if …","Appends a formatted string to the <code>debug_message</code> buffer, as …","","","","","","","Returns the execution input to the executed contract and …","","","","","","","Recovers the compressed ECDSA public key for given …","Returns an Ethereum address from the ECDSA compressed …","Emits an event with the given event data.","","","","","","","","","","","","","","Returns <code>true</code> if input forwarding is set.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Create a new instance from the little-endian bytes …","Returns the amount of gas left for the contract execution.","Returns the value stored under the given key in the …","Provides type definitions and traits for the built-in …","","","Conducts the crypto hash of the given input and stores the …","Conducts the crypto hash of the given encoded input and …","Instantiates another contract.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Invokes a contract message and returns its result.","Invokes a contract message via delegate call and returns …","Returns <code>true</code> if the hash is clear.","","Checks whether the specified account is a contract.","Returns the minimum balance that is required for creating …","Retrieves the code hash of the currently executing …","","","Returns a random hash seed and the block number since …","Returns the value back to the caller of the executed …","Allow the callee to reenter into the current contract.","Identical to <code>Self::set_forward_input</code> but without consuming …","Replace the contract code at the specified address with …","Writes the value to the contract storage under the given …","Writes the value to the contract storage under the given …","Forwards the input for the current function to the callee.","Sets the bit to indicate that the execution is going to be …","Do not return from the call but rather return the result …","Returns <code>true</code> if the tail call property is set.","Terminates the existence of the currently executed smart …","Operations on the off-chain testing environment.","","","","","","","Guides event topic serialization using the given topics …","Transfers value from the contract to the destination …","Returns the transferred value for the contract execution.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the price for the specified amount of gas.","","","The default call type for cross-contract calls. Performs a …","Builds up a cross contract call.","The final parameters to the cross-contract call.","Builds up contract instantiations.","Builds up contract instantiations.","The <code>delegatecall</code> call type. Performs a call with the given …","The input data for a smart contract execution.","Contracts that can be constructed from an <code>AccountId</code>.","The function selector.","","","","","","","","","","","","","","","","","Returns a new <code>CallBuilder</code> to build up the parameters to a …","Returns a new <code>CreateBuilder</code> to build up the parameters to …","The flags used to change the behavior of the contract call.","The type of the call.","Sets the <code>callee</code> for the current cross-contract call.","Sets the <code>callee</code> for the current cross-contract call.","","","Sets the <code>code_hash</code> to perform a delegate call with.","Sets the <code>code_hash</code> to perform a delegate call with.","Sets the used code hash for the contract instantiation.","","","","","","","","","","","","Sets the value transferred upon the execution of the call.","","Sets the execution input to the given value.","Sets the value transferred upon the execution of the call.","Invokes the cross-chain function call and returns the …","Invokes the cross-chain function call and returns the …","Invokes the cross-chain function call.","Invokes the cross-chain function call.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Creates the contract instance from the account ID of the …","Sets the <code>gas_limit</code> for the current cross-contract call.","Sets the <code>gas_limit</code> for the current cross-contract call.","Sets the maximum allowed gas costs for the contract …","Instantiates the contract using the given instantiation …","Instantiates the contract and returns its account ID back …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Invokes the contract via delegated call with the given …","Invokes the contract with the given built-up call …","Returns a clean builder for <code>Call</code>.","Returns a clean builder for <code>DelegateCall</code>","Creates a new execution input with the given selector.","Creates a selector directly from 4 bytes.","Finalizes the call builder to call a function.","Finalizes the call builder to call a function.","Finalizes the call builder to call a function.","Finalizes the call builder to call a function.","Sets the value transferred upon the execution of the call.","Pushes an argument to the execution input.","Pushes an argument to the execution input.","Sets the type of the returned value upon the execution of …","Sets the value transferred upon the execution of the call.","","Type states that tell what state of a instantiation …","Returns the underlying bytes of the selector.","","","Sets the <code>transferred_value</code> for the current cross-contract …","Sets the <code>transferred_value</code> for the current cross-contract …","","","","","","","","","","","","","","","","","","","","","","","","","","Utility types for the cross-contract calling API.","","","","","","","","","Type state for the salt used for contract instantiation.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Minor simplification of an argument list with a head and …","A single argument and its reference to a known value.","An argument list.","The end of an argument list.","An empty argument list.","The output type of the <code>unwrap_or_else</code> operation.","Represents a return type.","A parameter that has been set to some value.","A parameter that has not been set, yet.","Implemented by <code>Set</code> and <code>Unset</code> in order to unwrap their …","","","","","","","","","","","","","","","","","","","","","","","Creates a new empty argument list.","Creates a new empty argument list.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Pushes the first argument to the empty argument list.","Pushes another argument to the argument list.","Pushes the first argument to the empty argument list.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set value or evaluates the given closure.","","","Returns the set value.","","","","","","","A concrete instance of a chain extension method.","Implemented by error codes in order to construct them from …","","","Creates a new chain extension method instance.","Calls the chain extension method for case 1.A described …","Calls the chain extension method for case 2.A described …","Calls the chain extension method for case 1.B described …","Calls the chain extension method for case 2.B described …","","Returns the argument unchanged.","Returns <code>Ok</code> if the status code for the called chain …","Makes the chain extension method call handle the returned …","Makes the chain extension method call assume that the …","Sets the input types of the chain extension method call to …","Calls <code>U::from(self)</code>.","Sets the output type of the chain extension method call to …","Sets the output type of the chain extension method call to …","Type states of the chain extension method instance.","","","","","Type state meaning that the chain extension method uses …","Type state meaning that the chain extension method ignores …","Type state meaning that the chain extension method …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","The BLAKE-2 crypto hash with 128-bit output.","The BLAKE-2 crypto hash with 256-bit output.","Types that are usable as built-in cryptographic hashes.","The output type of built-in cryptographic hash functions.","The KECCAK crypto hash with 256-bit output.","The SHA-2 crypto hash with 256-bit output.","The output type of the crypto hash.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Hashes the given raw byte input and copies the result into …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","The raw ABI respecting input data to a call.","Types implementing this trait can be used as chain …","The default accounts.","Record for an emitted event.","Advances the chain by a single block.","The predefined <code>ALICE</code> account holding substantial amounts …","Tests if a contract terminates successfully after …","The predefined <code>BOB</code> account holding some amounts of value.","","","","","","","Calls the chain extension with the given input.","Gets the currently set callee.","The predefined <code>CHARLIE</code> account holding some amounts of …","","","","","Returns the amount of storage cells used by the account …","Recorded encoding of the emitted event.","","","","","Returns the default accounts for testing purposes: Alice, …","The predefined <code>DJANGO</code> account holding no value.","","","The predefined <code>EVE</code> account holding no value.","","The predefined <code>FRANK</code> account holding no value.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","The static function ID of the chain extension.","Returns the balance of the account.","Returns the total number of reads and writes of the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates new call ABI data for the given selector.","Returns the underlying bytes of the encoded input …","Pushes the given argument onto the call ABI data in …","Returns the contents of the past performed environmental …","Returns the recorded emitted events in order.","Registers a new chain extension.","Runs the given closure test function with the default …","Returns the selector of <code>self</code>.","Sets the balance of the account to the given balance.","Sets the balance of <code>account_id</code> to <code>new_balance</code>.","Set the entropy hash of the current block.","Sets the callee for the next call.","Sets a caller for the next call.","Set to true to disable clearing storage","Sets the value transferred from the caller to the callee …","","Returns the underlying byte representation.","","","","Recorded topics of the emitted event.","","","","","","","","","","","",""],"i":[0,43,43,43,67,0,18,18,43,0,18,18,0,18,0,0,0,0,43,18,18,43,0,18,18,68,0,0,43,0,18,18,18,18,0,1,3,4,3,3,4,3,4,3,4,3,3,4,3,4,0,0,0,69,15,1,18,8,3,4,69,15,1,18,8,3,4,0,0,0,0,70,4,0,1,8,3,4,1,1,8,3,4,3,4,0,0,0,0,0,3,4,3,4,3,4,0,3,4,15,1,3,4,0,0,0,3,4,3,4,18,8,3,4,1,18,8,3,4,1,69,15,1,18,18,18,18,18,8,3,3,4,4,67,0,0,0,3,4,0,0,0,69,15,1,18,8,3,4,0,0,70,4,0,0,0,3,4,0,0,1,1,0,0,0,1,15,1,1,0,0,3,4,1,8,3,4,68,0,0,69,15,1,18,8,3,3,4,4,69,15,1,18,8,3,4,69,15,1,18,8,3,4,8,3,4,3,4,69,15,1,18,8,3,4,0,71,72,0,0,0,0,0,0,0,0,0,33,44,38,40,26,25,36,42,33,44,38,40,26,25,36,42,0,0,38,38,33,38,42,42,44,38,40,42,42,42,42,33,44,36,42,42,36,42,40,42,38,40,38,38,38,38,26,25,36,42,33,44,38,40,26,25,36,42,42,73,33,38,40,40,25,33,44,38,40,26,25,36,42,26,26,33,44,36,42,38,38,38,38,40,36,36,38,40,36,0,42,42,42,33,38,33,44,38,40,26,25,36,42,33,44,38,40,26,25,36,42,33,44,38,40,26,25,36,42,42,0,33,44,38,40,26,25,36,42,0,39,39,39,39,39,39,39,39,41,0,0,0,0,0,74,0,0,0,0,37,41,34,48,47,52,37,41,34,48,47,52,37,41,34,37,41,34,37,34,48,52,35,48,35,48,47,37,41,34,48,47,52,37,41,34,48,47,52,37,41,34,48,47,52,35,48,48,35,48,47,37,41,34,37,41,34,48,47,52,37,41,34,48,47,52,37,41,34,48,47,52,74,41,34,41,37,41,34,48,47,52,0,0,53,53,53,53,53,53,53,53,53,75,53,53,53,53,53,53,0,53,53,53,53,0,0,0,55,54,56,55,54,56,55,54,56,55,54,56,55,54,56,55,54,56,55,54,56,55,54,56,55,54,56,0,0,0,0,0,0,76,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,77,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,0,0,0,0,0,63,0,63,63,61,62,63,61,62,78,0,63,61,62,61,62,0,62,61,61,61,61,0,63,61,61,63,61,63,63,61,62,62,78,0,0,63,61,62,61,61,61,0,0,0,0,61,0,0,0,0,0,0,0,61,61,61,61,62,62,63,61,62,63,61,62,63,61,62,63,61,62],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[1,2],[[]],[[]],[3],[3],[4],[[]],[[]],[[],[[6,[5]]]],[[],[[6,[5]]]],[3],[3],[4],[[],[[6,[5]]]],[[],[[6,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[],2],0,[[]],[[],4],[7],[1,1],[8,8],[3,3],[4,4],[1,2],[[]],[[]],[[]],[[]],[[3,3],9],[[4,4],9],[[],10],[7,[[12,[11]]]],[13],0,0,[[],[[6,[3,14]]]],[[],[[6,[4,14]]]],[[],[[6,[14]]]],[[],[[6,[14]]]],[11,[[6,[14]]]],[11,[[6,[14]]]],[[],10],[11,[[6,[14]]]],[11,[[6,[14]]]],[[],15],[[],1],[[],3],[[],4],[[],10],[[],10],[[]],[3,[[17,[16]]]],[4,[[17,[16]]]],[3],[4],[[18,18],2],[[8,8],2],[[3,3],2],[[4,4],2],[[1,19],20],[[18,19],20],[[8,19],20],[[3,19],20],[[4,19],20],[1,2],[[]],[[]],[[]],[[]],[14,18],[21,18],[22,18],[23,18],[[]],[[],3],[[]],[[]],[[],4],[[]],[[],24],[7,[[10,[12]]]],0,[3],[4],[[]],[[]],[25,10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[26,10],[26,10],[[],2],[4,2],[[],2],[[]],[[],10],[[3,3],[[12,[9]]]],[[4,4],[[12,[9]]]],[[],10],[15,27],[[1,2],1],[[1,2],1],[[],10],[7],[7,[[12,[11]]]],[[1,2],1],[[15,2],15],[[1,2],1],[1,2],[[],27],0,[[],[[17,[16,28]]]],[[],[[17,[16,28]]]],[[]],[[]],[[]],[[]],[[[0,[0]]]],[[],10],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],[[6,[3,29]]]],[[],6],[[],6],[[],[[6,[4,29]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],31],[[],31],[[],31],[[3,32]],[[4,32]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[38,[[34,[33]],[34,[[36,[35]]]],[34,[37]]]]]],[[],[[40,[34,[34,[24]],34,[34,[[36,[35]]]],[34,[39]]]]]],[[38,1],38],[[[38,[34]]],[[38,[41]]]],[33,33],[[[38,[[41,[33]]]]],[[38,[[41,[33]]]]]],[42,42],[[]],[[[44,[43]]],[[44,[43]]]],[[[38,[[41,[44]]]]],[[38,[[41,[44]]]]]],[[[40,[34]]],[[40,[41]]]],[[],[[6,[42,14]]]],[[],[[6,[14]]]],[11,[[6,[14]]]],[11,[[6,[14]]]],[[],[[33,[43]]]],[[],[[44,[43]]]],[[],[[36,[45]]]],[[],42],[42,[[17,[16]]]],[36],[42],[[[40,[34]]],[[40,[41]]]],[[42,42],2],[[[38,[[34,[[36,[35]]]]]],36],[[38,[[41,[36]]]]]],[[[40,[[34,[[36,[35]]]]]],36],[[40,[[41,[36]]]]]],[[[38,[[41,[33]],[41,[36]],[41,[37]]]]],[[6,[18]]]],[[[38,[[41,[44]],[41,[36]],[41,[37]]]]],[[6,[18]]]],[[[38,[[41,[44]],[34,[[36,[35]]]],[34,[37]]]]],[[6,[18]]]],[[[38,[[41,[33]],[34,[[36,[35]]]],[34,[37]]]]],[[6,[18]]]],[[[26,[46,46,46,46]],19],20],[[[25,[46,46,46,46]],19],20],[[[36,[46]],19],20],[[42,19],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],42],[[]],[[]],[[33,24],33],[[[38,[[41,[33]]]],24],[[38,[[41,[33]]]]]],[[[40,[[34,[24]]]],24],[[40,[[41,[24]]]]]],[[[40,[41,41,[41,[36]],41]]],[[6,[18]]]],[25,[[6,[18]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[26,[44]]],[[6,[18]]]],[[[26,[33]]],[[6,[18]]]],[[],[[33,[43]]]],[[],[[44,[43]]]],[42,[[36,[35]]]],[[],42],[[[38,[[41,[33]],[34,[[36,[35]]]],34]]],[[26,[33,35]]]],[[[38,[[41,[44]],[41,[36]],[41,[37]]]]],[[26,[44]]]],[[[38,[[41,[44]],[34,[[36,[35]]]],34]]],[[26,[44,35]]]],[[[38,[[41,[33]],[41,[36]],[41,[37]]]]],[[26,[33]]]],[[[40,[41,41,[41,[36]],41]]],25],[[[36,[[48,[47]]]]],[[36,[[49,[49]]]]]],[[[36,[35]]],[[36,[[48,[47,35]]]]]],[[[38,[[34,[37]]]]],[[38,[[41,[37]]]]]],[[[40,[[34,[39]]]]],[[40,[41]]]],[36,50],0,[42],[[],[[17,[16,28]]]],[[]],[33,33],[[[38,[[41,[33]]]]],[[38,[[41,[33]]]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[42,32]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],6],[[],6],[[],30],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[37,37],[[[41,[51]]],[[41,[51]]]],[34,34],[[]],[[]],[[]],[[],37],[[],34],[[],[[48,[45,45]]]],[[],52],[[],35],[[],35],[35],[[[48,[47]]]],[47],[[[37,[46]],19],20],[[[41,[46]],19],20],[[[34,[46]],19],20],[[[48,[46,46]],19],20],[[[47,[46]],19],20],[[52,19],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35,[[48,[47,35]]]],[[[48,[47]]],[[48,[47,[48,[47]]]]]],[[[48,[52,52]]],[[48,[47,[48,[52,52]]]]]],[35,50],[[[48,[47]]],50],[47,50],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[]],[41],[34],[41],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[11,53],[[[53,[6,54]]],6],[[[53,[6,55]]],6],[[[53,[56,54]]],6],[[[53,[56,55]]]],[[[53,[46,46,46]],19],20],[[]],[11,6],[53,[[53,[54]]]],[53,[[53,[55]]]],[53,53],[[]],[53,[[53,[56]]]],[53,[[53,[6]]]],0,[[],6],[[],6],[[],30],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[55,19],20],[[[54,[46]],19],20],[[[56,[46]],19],20],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],30],[[],30],[[],30],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[57,57],[58,58],[59,59],[60,60],[[]],[[]],[[]],[[]],[[57,57],2],[[58,58],2],[[59,59],2],[[60,60],2],[[57,19],20],[[58,19],20],[[59,19],20],[[60,19],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],0,0,0,0,[[]],0,[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[17,11],[[]],0,[61,61],[62,62],[[]],[[]],[[],[[10,[50]]]],0,[[],[[6,[61,14]]]],[[],[[6,[14]]]],[11,[[6,[14]]]],[11,[[6,[14]]]],[[],63],0,[61],[[61,61],2],0,[[61,19],20],0,[[]],[[]],[64,62],[[]],[[],11],[[],10],[[]],[[]],[[]],[[]],[42,61],[61],[61],[[],65],[[],66],[[]],[[],10],[61,42],[[]],[[]],[[],10],[[]],[[]],[2],[[]],[61,50],[61],[[],[[17,[16,28]]]],[[]],[[]],0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],30],[[],30],[[],30],[[]],[[]],[[]]],"p":[[3,"CallFlags"],[15,"bool"],[3,"AccountId"],[3,"Hash"],[4,"Error"],[4,"Result"],[3,"Key"],[4,"DefaultEnvironment"],[4,"Ordering"],[6,"Result"],[15,"u32"],[4,"Option"],[15,"str"],[3,"Error"],[3,"ReturnFlags"],[15,"u8"],[3,"Vec"],[4,"Error"],[3,"Formatter"],[6,"Result"],[4,"Error"],[4,"AccountError"],[4,"Error"],[15,"u64"],[3,"CreateParams"],[3,"CallParams"],[15,"never"],[3,"Global"],[3,"TryFromSliceError"],[3,"TypeId"],[3,"Type"],[8,"FnOnce"],[3,"Call"],[3,"Unset"],[6,"EmptyArgumentList"],[3,"ExecutionInput"],[3,"ReturnType"],[3,"CallBuilder"],[4,"Salt"],[3,"CreateBuilder"],[3,"Set"],[3,"Selector"],[8,"Environment"],[3,"DelegateCall"],[8,"Default"],[8,"Debug"],[3,"Argument"],[3,"ArgumentList"],[6,"ArgsList"],[15,"usize"],[8,"Clone"],[3,"ArgumentListEnd"],[3,"ChainExtensionMethod"],[3,"HandleErrorCode"],[4,"IgnoreErrorCode"],[3,"NoResult"],[4,"Sha2x256"],[4,"Keccak256"],[4,"Blake2x256"],[4,"Blake2x128"],[3,"CallData"],[3,"EmittedEvent"],[3,"DefaultAccounts"],[3,"EmittedEvent"],[3,"RecordedDebugMessages"],[8,"Iterator"],[8,"FromLittleEndian"],[8,"Topics"],[4,"NoChainExtension"],[8,"Clear"],[13,"Decode"],[13,"OffChain"],[8,"FromAccountId"],[8,"Unwrap"],[8,"FromStatusCode"],[8,"HashOutput"],[8,"CryptoHash"],[8,"ChainExtension"]]},\
"ink_lang":{"doc":"","t":[8,3,16,8,11,11,14,11,11,11,11,11,11,23,11,11,11,23,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,0,14,14,11,23,10,11,23,11,11,11,11,11,0,11,11,18,18,18,8,8,8,8,8,8,8,8,8,13,8,4,8,8,16,8,18,18,18,16,16,13,13,18,18,18,18,18,18,16,18,18,18,18,13,18,18,18,16,16,3,8,8,16,16,16,16,13,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5],"n":["ChainExtensionInstance","EnvAccess","Instance","ToAccountId","account_id","balance","blake2x256","block_number","block_timestamp","borrow","borrow_mut","caller","caller_is_origin","chain_extension","clone","clone_into","code_hash","contract","default","ecdsa_recover","ecdsa_to_eth_address","extension","fmt","from","gas_left","hash_bytes","hash_encoded","instantiate","instantiate_contract","into","invoke_contract","invoke_contract_delegate","is_contract","minimum_balance","own_code_hash","random","reflect","selector_bytes","selector_id","terminate_contract","test","to_account_id","to_owned","trait_definition","transfer","transferred_value","try_from","try_into","type_id","utils","vzip","weight_to_fee","CALLABLE","CALLABLE","CONSTRUCTORS","ContractAmountDispatchables","ContractConstructorDecoder","ContractDispatchableConstructors","ContractDispatchableMessages","ContractEnv","ContractEventBase","ContractMessageDecoder","ContractName","ContractReference","CouldNotReadInput","DecodeDispatch","DispatchError","DispatchableConstructorInfo","DispatchableMessageInfo","Env","ExecuteDispatchable","ID","IDS","IDS","Input","Input","InvalidParameters","InvalidSelector","LABEL","LABEL","MESSAGES","MUTATES","NAME","NAME","Output","PATH","PAYABLE","PAYABLE","PAYABLE","PaidUnpayableMessage","SELECTOR","SELECTOR","SELECTOR","Storage","Storage","TraitDefinitionRegistry","TraitInfo","TraitMessageInfo","Type","Type","Type","Type","UnknownSelector","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","decode_dispatch","eq","execute_dispatchable","fmt","fmt","from","from","into","into","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","initialize_contract"],"q":["ink_lang","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ink_lang::reflect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ink_lang::utils"],"d":["Trait implemented by chain extensions.","The API behind the <code>self.env()</code> and <code>Self::env()</code> syntax in …","The type of the chain extension instance.","Implemented by contracts that are compiled as dependencies.","Returns the account ID of the executed contract.","Returns the balance of the executed contract.","Computes and expands into the BLAKE2b 256-bit hash of the …","Returns the current block number.","Returns the timestamp of the current block.","","","Returns the address of the caller of the executed contract.","Checks whether the caller of the current contract is the …","Defines the interface for a chain extension.","","","Returns the code hash of the contract at the given <code>account</code> …","Entry point for writing ink! smart contracts.","","Recovers the compressed ECDSA public key for given …","Returns an Ethereum address from the ECDSA compressed …","Allows to call one of the available defined chain …","","Returns the argument unchanged.","Returns the amount of gas left for the contract execution.","Computes the hash of the given bytes using the …","Computes the hash of the given SCALE encoded value using …","Creates a new instance of the chain extension to use …","Instantiates another contract.","Calls <code>U::from(self)</code>.","Invokes a contract message and returns its result.","Invokes in delegate manner a code message and returns its …","Checks whether a specified account belongs to a contract.","Returns the minimum balance that is required for creating …","Returns the code hash of the contract at the given <code>account</code> …","Returns a random hash seed.","Definitions and utilities for ink! smart contract static …","Computes the ink! selector of the string and expands into …","Computes the ink! selector of the string and expands into …","Terminates the existence of a contract.","Defines a unit test that makes use of ink!’s off-chain …","Returns the underlying account identifier of the …","","Marks trait definitions to ink! as special ink! trait …","Transfers value from the contract to the destination …","Returns the transferred value for the contract execution.","","","","Utility functions for contract development.","","Returns the price for the specified amount of gas.","The closure that can be used to dispatch into the …","The closure that can be used to dispatch into the …","The number of dispatchable ink! constructors.","Reflects the number of dispatchable ink! messages and …","Generated type used to decode all dispatchable ink! …","Reflects the sequence of all dispatchable ink! …","Reflects the sequence of all dispatchable ink! messages of …","Stores the used host environment type of the ink! smart …","Defines a base event type for the contract.","Generated type used to decode all dispatchable ink! …","Stores the name of the ink! smart contract.","Refers to the generated ink! smart contract reference type.","Failed to read execution input for the dispatchable.","Decodes an ink! dispatch input into a known selector and …","An error that can occur during dispatch of ink! …","Stores various information of the respective dispatchable …","Stores various information of the respective dispatchable …","The environment type.","Starts the execution of the respective ink! message or …","The unique id of the ink! trait definition.","The sequence stores selector IDs of all ink! messages …","The sequence stores selector IDs of all ink! constructors …","Reflects the input types of the dispatchable ink! message.","Reflects the input types of the dispatchable ink! …","Failed to decode the parameters for the selected …","Failed to decode into a valid dispatch selector.","The label of the dispatchable ink! message.","The label of the dispatchable ink! constructor.","The number of dispatchable ink! messages.","Yields <code>true</code> if the dispatchable ink! message mutates the …","The name of the ink! smart contract.","The name of the ink! trait.","Reflects the output type of the dispatchable ink! message.","The module path of the ink! trait definition.","Yields <code>true</code> if the dispatchable ink! message is payable.","Yields <code>true</code> if the dispatchable ink! constructor is …","Is <code>true</code> if the ink! trait message has been annotated with …","Invalidly paid an unpayable dispatchable.","The selectors of the dispatchable ink! message.","The selectors of the dispatchable ink! constructor.","The unique selector of the ink! trait message.","The ink! storage struct type.","The ink! storage struct type.","Type that is guaranteed by ink! to implement all ink! …","Captures info about an ink! trait definition.","Stores information for every ink! trait message of an ink! …","The generated contract reference type.","The ink! smart contract message decoder type.","The ink! smart contract constructor decoder type.","The generated base event enum.","The decoded selector is not known to the dispatch decoder.","","","","","","","","","Executes the ink! smart contract message or constructor.","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Initializes the ink! contract using the given …"],"i":[0,0,15,0,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,15,1,1,1,1,1,1,1,1,0,0,0,1,0,16,1,0,1,1,1,1,1,0,1,1,17,18,19,0,0,0,0,0,0,0,0,0,13,0,0,0,0,20,0,21,22,23,17,18,13,13,17,18,19,17,24,21,17,21,17,18,25,13,17,18,25,17,18,0,0,0,26,27,28,29,13,30,13,30,13,13,13,31,13,32,13,13,30,13,30,13,13,13,30,13,30,13,30,13,30,13,0],"f":[0,0,0,0,[1],[1],0,[1],[1],[[]],[[]],[1],[1,2],0,[[[1,[3]]],[[1,[3]]]],[[]],[1,4],0,[[],1],[1,4],[1,4],[1],[[1,5],6],[[]],[1,7],[1],[1],[[]],[[1,8],4],[[]],[[1,9],4],[[1,9],4],[1,2],[1],[1,4],[1],0,0,0,[1,10],0,[[]],[[]],0,[1,4],[1],[[],11],[[],11],[[],12],0,[[]],[[1,7]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[13,13],[[]],[[],[[11,[13]]]],[[13,13],2],[[],[[11,[13]]]],[[13,5],6],[[13,5],6],[[]],[[]],[[]],[[]],[[]],[[],14],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[]],[[]],[[]]],"p":[[3,"EnvAccess"],[15,"bool"],[8,"Clone"],[6,"Result"],[3,"Formatter"],[6,"Result"],[15,"u64"],[3,"CreateParams"],[3,"CallParams"],[15,"never"],[4,"Result"],[3,"TypeId"],[4,"DispatchError"],[3,"String"],[8,"ChainExtensionInstance"],[8,"ToAccountId"],[8,"DispatchableMessageInfo"],[8,"DispatchableConstructorInfo"],[8,"ContractAmountDispatchables"],[8,"ContractEnv"],[8,"TraitInfo"],[8,"ContractDispatchableMessages"],[8,"ContractDispatchableConstructors"],[8,"ContractName"],[8,"TraitMessageInfo"],[8,"ContractReference"],[8,"ContractMessageDecoder"],[8,"ContractConstructorDecoder"],[8,"ContractEventBase"],[3,"TraitDefinitionRegistry"],[8,"DecodeDispatch"],[8,"ExecuteDispatchable"]]},\
"ink_lang_codegen":{"doc":"","t":[8,16,5],"n":["CodeGenerator","Generator","generate_code"],"q":["ink_lang_codegen","",""],"d":["Types for which code can be generated by this crate.","The underlying generator generating the code.","Generates the entire code for the given ink! contract."],"i":[0,2,0],"f":[0,0,[[],1]],"p":[[3,"TokenStream"],[8,"CodeGenerator"]]},\
"ink_lang_ir":{"doc":"The ink! intermediate representation (IR) and abstractions.","t":[3,8,4,3,3,3,3,3,13,13,3,3,13,3,8,13,4,13,13,4,3,3,3,4,3,3,8,4,3,3,3,3,3,3,3,3,13,13,13,3,13,13,4,13,13,13,3,3,3,13,4,12,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,10,10,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,0,11,10,11,11,11,11,12,12,12,12,12,12,12,12,12,12,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["Blake2x256Macro","Callable","CallableKind","CallableWithSelector","ChainExtension","ChainExtensionMethod","Config","Constructor","Constructor","Constructor","Contract","Event","Event","ExtensionId","HexLiteral","ImplBlock","ImplItem","Inherited","Ink","InkItem","InkItemTrait","InkTest","InkTraitDefinition","InkTraitItem","InkTraitMessage","InputsIter","IsDocAttribute","Item","ItemImpl","ItemMod","IterConstructors","IterEvents","IterInkTraitItems","IterItemImpls","IterMessages","Message","Message","Message","Message","Namespace","Other","Public","Receiver","Ref","RefMut","Rust","Selector","SelectorMacro","Storage","Storage","Visibility","anonymous","as_bytes","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","blake2b_256","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","callable","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","compose","composed_selector","compute","config","config","default","default","deref","env","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error_code","events","extract_docs","fields","fields","filter_map_constructor","filter_map_event_item","filter_map_impl_block","filter_map_message","filter_map_message","filter_map_other_item","filter_map_storage_item","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format_err","format_err_spanned","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_u32","handle_status","has_wildcard_selector","has_wildcard_selector","has_wildcard_selector","has_wildcard_selector","hash","hash","hash","hash","hex_lits","hex_padded_suffixed","hex_padded_unsuffixed","hex_suffixed","hex_unsuffixed","id","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","impls","ink_attrs","ink_attrs","input","input","inputs","inputs","inputs","inputs","inputs","inputs","inputs_span","inputs_span","inputs_span","inputs_span","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_be_u32","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_u32","is_constructor","is_doc_attribute","is_event_item","is_impl_block","is_inherited","is_ink_item","is_ink_item","is_message","is_other_item","is_payable","is_payable","is_payable","is_payable","is_pub","is_ref","is_ref_mut","is_rust_item","is_storage_item","item","item_fn","item_impl","items","items","iter_constructors","iter_items","iter_messages","iter_methods","kind","kind","kind","kind","len","local_id","local_id","map_ink_item","map_rust_item","marker","module","multiunzip","mutates","namespace","new","new","new","new","new","next","next","next","next","next","next","output","output","partial_cmp","partial_cmp","partial_cmp","receiver","receiver","returns_result","selector","self_type","sig","sig","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","statements","statements","statements","statements","storage","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","trait_ident","trait_path","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","user_provided_selector","user_provided_selector","user_provided_selector","user_provided_selector","utils","vis","visibility","visibility","visibility","visibility","whitelisted_attributes","0","0","0","0","0","0","0","0","0","0","SelectorBytes","SelectorId","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","ensure_pub_visibility","local_message_id"],"q":["ink_lang_irink_lang_ir::ImplItem","","","ink_lang_ir::InkItem","","","ink_lang_ir::InkTraitItem","ink_lang_ir::Item","","ink_lang_ir::Visibility","ink_lang_ir::marker","","","","","","","","","","","","","","","","ink_lang_ir::utils",""],"d":["Computes the BLAKE2b-256 bit hash of a string or byte …","An ink! callable.","The kind of externally callable smart contract entity.","Wrapper for a callable that adds its composed selector.","An ink! chain extension.","An ink! chain extension method.","The ink! configuration.","An ink! constructor definition.","An ink! constructor externally callable.","A <code>#[ink(constructor)]</code> marked inherent function.","An ink! contract definition consisting of the ink! …","An ink! event struct definition.","An ink! event definition.","The unique ID of an ink! chain extension method.","Used to convert literal values into their hex …","An ink! implementation block.","An item within an ink! implementation block.","","The item is an ink! specific item.","An ink! specific item.","A checked ink! trait definition without its configuration.","The ink! test with all required information.","A checked ink! trait definition without its configuration.","An ink! item within an ink! trait definition.","A checked ink! message of an ink! trait definition.","Iterator over the input parameters of an ink! message or …","An extension trait for <code>syn::Attribute</code> in order to query …","An item in the root of the ink! module (<code>ir::ItemMod</code>).","An ink! implementation block.","The ink! module.","Iterator yielding all ink! constructor within a source ink!","Iterator yielding all ink! event definitions within the …","Iterator over all the ink! trait items of an ink! trait …","Iterator yielding all ink! implementation block …","Iterator yielding all ink! messages within a source ink! …","An ink! message definition.","An ink! message externally callable.","A <code>#[ink(message)]</code> marked method.","","An ink! namespace applicable to a trait implementation …","Any other implementation block item.","","The receiver of an ink! message.","The <code>&amp;self</code> message receiver.","The <code>&amp;mut self</code> message receiver.","The item is a normal Rust item.","The selector of an ink! dispatchable.","The selector ID of an ink! dispatchable.","An ink! storage struct definition.","The ink! storage struct definition.","The visibility of an ink! message or constructor.","","Returns the namespace as bytes.","Returns the Rust attributes of the ink! chain extension.","Returns the Rust attributes of the ink! chain extension …","Returns all non-ink! attributes.","Returns the non-ink! attributes of the ink! storage struct.","Returns a slice of all non-ink! attributes of the ink! …","Returns a slice of all non-ink! attributes of the ink! …","Returns all non-ink! specific attributes of the …","Returns all non-ink! attributes of the ink! module.","Returns all non-ink! attributes.","Returns the attributes of the ink! trait definition.","Computes the BLAKE-2b 256-bit hash for the given input and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a shared reference to the underlying callable.","","","","","","","","","","","","","","","","","","","","","","Note","Returns the composed selector of the ink! callable the <code>impl</code>…","Computes the BLAKE-2 256-bit based selector from the given …","Returns the configuration of the ink! smart contract.","Returns the ink! trait definition config.","","","","Returns the environmental types definition if specified. …","","","","","","","","","","","","","","","","","","","Returns the type of the error code of the chain extension.","Returns an iterator yielding all event definitions in this …","Returns the contents of the Rust documentation attribute …","Returns an iterator yielding all the <code>#[ink(topic)]</code> …","Returns an iterator yielding all fields of the storage …","Returns <code>Some</code> if <code>self</code> is an ink! constructor.","Returns <code>Some</code> if <code>self</code> is an ink! event struct definition.","Returns <code>Some</code> if <code>self</code> is an ink! implementation block.","Returns <code>Some</code> if <code>self</code> is an ink! message.","Returns <code>Some</code> if the ink! trait item is a message.","Returns <code>Some</code> if <code>self</code> is a not an ink! specific item.","Returns <code>Some</code> if <code>self</code> is the ink! storage struct definition.","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>syn::Error</code> with the format message and infers the","Creates a <code>syn::Error</code> with the format message and infers the","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new chain extension method ID from the given <code>u32</code>.","Returns <code>true</code> if the chain extension method was flagged …","Returns <code>true</code> if the ink! callable is flagged as a wildcard …","","","","","Returns the underlying selector.","","","Returns the 4 bytes that make up the selector as hex …","Converts the given value into a hex represented literal …","Converts the given value into a hex represented literal …","Converts the given value into a hex represented literal …","Converts the given value into a hex represented literal …","Returns the unique ID of the chain extension method.","Returns the identifier of the ink! callable.","Returns the identifier of the ink! chain extension.","Returns the identifier of the ink! chain extension method.","Returns the identifier of the event struct.","Returns the identifier of the storage struct.","","","","Returns the identifier of the ink! module.","Returns the Rust identifier of the ink! trait item.","Returns the Rust identifier of the ink! message.","Returns the identifier of the ink! trait definition.","Returns an iterator yielding all ink! implementation …","Returns the ink! attributes of the ink! trait item.","Returns all ink! attributes.","Returns the literal input of the BLAKE-2b hash.","Returns the literal input of the selector ID.","Returns an iterator yielding all input parameters of the …","Returns an iterator over the inputs of the chain extension …","","","","Returns an iterator over the inputs of the ink! trait …","Returns the span of the inputs of the ink! callable.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the big-endian <code>u32</code> representation of the selector …","","","","","","","Returns the underlying raw <code>u32</code> index.","Returns <code>true</code> if the <code>impl</code> block item is an ink! message.","Returns <code>true</code> if the attribute is a Rust documentation …","Returns <code>true</code> if the ink! specific item is an event struct …","Returns <code>true</code> if the ink! specific item is an …","Returns <code>true</code> if the visibility of the ink! message of …","Returns <code>true</code> if <code>self</code> is an ink! specific item.","Returns <code>true</code> if the given <code>syn::Item</code> is eventually an ink! …","Returns <code>true</code> if the <code>impl</code> block item is an ink! message.","Returns <code>true</code> if the <code>impl</code> block item is a non ink! specific …","Returns <code>true</code> if the ink! callable is flagged as payable.","","","","Returns <code>true</code> if the visibility of the ink! message of …","Returns <code>true</code> if the receiver is <code>&amp;self</code>.","Returns <code>true</code> if the receiver is <code>&amp;mut self</code>.","Returns <code>true</code> if <code>self</code> is an normal Rust item.","Returns <code>true</code> if the ink! specific item is the storage …","Returns the ink! trait item representing the ink! trait …","The function which was annotated.","Returns the parent implementation block of the ink! …","Returns a slice over the shared references of the items of …","Returns all (ink! and non-ink! specific) item definitions …","Returns an iterator yielding the ink! messages of the …","Returns an iterator yielding the ink! specific items of …","Returns an iterator yielding the ink! messages of the …","Returns a slice over all the chain extension methods.","Returns the kind of the ink! callable.","","","","","Returns a local ID unique to the ink! message with respect …","Returns a local ID unique to the ink! trait definition of …","Returns <code>Some</code> if <code>self</code> is an ink! specific item.","Returns <code>Some</code> if <code>self</code> is an ink! specific item.","Marker types and definitions.","Returns the ink! inline module definition.","","Returns <code>true</code> if the ink! message may mutate the contract …","Returns the namespace of the implementation block if any …","Creates a new ink! contract from the given ink! …","Returns <code>Ok</code> if the trait matches all requirements for an …","Returns <code>Ok</code> if the trait matches all requirements for an …","Creates a new ink! item trait from the given configuration …","Returns <code>Ok</code> if the input matches all requirements for an …","","","","","","","Returns the return type of the ink! message if any.","Returns the return type of the ink! message if any.","","","","Returns the <code>self</code> receiver of the ink! message.","Returns the <code>self</code> receiver of the ink! trait message.","Returns <code>true</code> if the chain extension method was flagged …","Returns the underlying selector.","Returns the <code>Self</code> type of the implementation block.","Returns the method signature of the ink! chain extension …","Returns the original signature of the ink! message.","Returns the span of the ink! chain extension.","Returns the span of the ink! chain extension method.","","","","","Returns the associated span if any.","","","","","","","","Returns the span of the ink! message.","Returns span of the ink! trait definition.","Returns a slice over shared references to the statements …","","","","Returns the storage struct definition for this ink! module.","Returns the underlying four bytes.","","","","","","","","","","","We mainly implement this trait for this ink! type to have …","We mainly implement this trait for this ink! type to have …","We mainly implement this trait for this ink! type to have …","We mainly implement this trait for this ink! type to have …","","We mainly implement this trait for this ink! type to have …","We mainly implement this trait for this ink! type to have …","","We mainly implement this trait for this ink! type to have …","We mainly implement this trait for this ink! type to have …","We mainly implement this trait for ink! module to have a …","Returns the trait identifier if this is a trait …","Returns the trait type path if this is a trait …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the selector of the ink! callable if any has been …","","","","","Returns the visibility of the ink! module.","Returns the visibility of the ink! callable.","","","","Return set of attributes that can be passed to call …","","","","","","","","","","","Used as generic parameter for the <code>selector_bytes!</code> macro.","Used as generic parameter for the <code>selector_id!</code> macro.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Ensures that the given visibility is <code>pub</code> and otherwise …","Returns a local ID unique to the ink! trait definition for …"],"i":[0,0,0,0,0,0,0,0,16,30,0,0,29,0,0,29,0,17,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,30,20,0,30,17,0,18,18,28,0,0,0,29,0,6,1,2,5,6,7,8,9,10,11,12,13,0,23,59,43,53,55,32,47,54,1,40,2,5,15,24,6,7,28,29,16,14,17,8,30,18,9,10,11,19,42,20,12,13,25,23,59,43,53,55,32,47,54,1,40,2,5,15,24,6,7,28,29,16,14,17,8,30,18,9,10,11,19,42,20,12,13,25,14,1,15,16,14,17,18,19,20,12,1,15,16,14,17,18,19,20,12,1,15,19,19,14,19,23,25,1,24,14,24,1,2,5,15,24,6,7,28,29,8,30,18,9,10,11,19,13,25,2,11,71,6,7,30,29,29,30,20,30,29,1,40,2,5,15,24,6,7,28,29,16,16,14,17,8,30,18,9,10,11,19,42,20,12,13,25,0,0,23,59,43,43,43,43,53,55,32,47,54,1,1,40,2,5,15,24,6,7,28,29,29,29,29,16,14,17,8,30,18,9,10,11,19,19,42,20,12,13,25,15,5,72,14,8,9,1,40,15,19,19,73,73,73,73,5,72,2,5,6,7,14,8,9,11,20,12,13,11,20,12,40,42,72,5,14,8,9,12,72,14,8,9,23,59,43,53,55,32,47,54,1,40,2,5,15,24,6,7,28,29,16,14,17,8,30,18,9,10,11,19,42,20,12,13,25,19,43,53,55,32,47,54,15,30,71,29,29,17,28,29,30,30,72,14,8,9,17,18,18,28,29,25,59,14,10,11,10,13,10,2,72,14,8,9,43,9,12,28,28,0,23,54,12,10,23,59,2,13,25,43,53,55,32,47,54,9,12,1,15,19,9,12,5,42,10,5,12,2,5,6,7,28,29,17,17,8,30,18,9,10,11,12,13,72,14,8,9,11,19,1,15,16,14,17,18,19,20,12,16,6,7,28,29,17,8,30,18,9,10,11,10,10,23,59,59,43,53,55,32,47,54,1,40,40,2,2,5,15,24,6,6,7,7,28,28,29,16,14,17,8,8,30,30,18,9,9,10,10,11,11,19,42,42,20,12,13,25,23,59,43,53,55,32,47,54,1,40,2,5,15,24,6,7,28,29,16,14,17,8,30,18,9,10,11,19,42,20,12,13,25,23,59,43,53,55,32,47,54,1,40,2,5,15,24,6,7,28,29,16,14,17,8,30,18,9,10,11,19,42,20,12,13,25,72,14,8,9,0,11,72,14,8,9,24,74,75,76,77,78,79,80,81,82,83,0,0,84,85,84,85,84,85,84,85,84,85,84,85,84,85,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[2,[[4,[3]]]],[5,[[4,[3]]]],[6],[7],[8],[9],[10],[11],[12,[[4,[3]]]],[13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14],[1,1],[15,15],[16,16],[14,14],[17,17],[18,18],[19,19],[20,20],[12,12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],21],[[15,15],21],[[19,19],21],[22,19],[14,19],[[],19],[23,24],0,[[],1],[[],24],[14],[24,26],[[1,1],27],[[2,2],27],[[5,5],27],[[15,15],27],[[24,24],27],[[6,6],27],[[7,7],27],[[28,28],27],[[29,29],27],[[8,8],27],[[30,30],27],[[18,18],27],[[9,9],27],[[10,10],27],[[11,11],27],[[19,19],27],[[13,13],27],[[25,25],27],[2,31],[11,32],[[],[[34,[33]]]],0,[7,[[36,[35]]]],[30,[[34,[8]]]],[29,[[34,[6]]]],[29,[[34,[10]]]],[30,[[34,[9]]]],[20,[[34,[12]]]],[30,[[34,[37]]]],[29,[[34,[7]]]],[[1,38],39],[[40,38],39],[[2,38],39],[[5,38],39],[[15,38],39],[[24,38],39],[[6,38],39],[[7,38],39],[[28,38],39],[[29,38],39],[[16,38],39],[[16,38],39],[[[14,[41]],38],39],[[17,38],39],[[8,38],39],[[30,38],39],[[18,38],39],[[9,38],39],[[10,38],39],[[11,38],39],[[19,38],39],[[[42,[41]],38],39],[[20,38],39],[[12,38],39],[[13,38],39],[[25,38],39],0,0,[[]],[[]],[8,43],[9,43],[12,43],[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[44]]],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,29],[[]],[7,29],[10,29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[]],[[]],[[]],[[]],[[]],[45,15],[5,27],[[],27],[14,27],[8,27],[9,27],[1],[40],[15],[19],[19],[[],46],[[],46],[[],46],[[],46],[5,15],[[],22],[2,22],[5,22],[6,22],[7,22],[14,22],[8,22],[9,22],[11,22],[20,22],[12,22],[13,22],[11,47],0,0,[40,48],[42,48],[[],43],0,[14,43],[8,43],[9,43],[12,43],[[],49],[14,49],[8,49],[9,49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,45],[[]],[[]],[[]],[[]],[[]],[[]],[15,45],[30,27],[[],27],[29,27],[29,27],[17,27],[28,27],[50,[[52,[27,51]]]],[30,27],[30,27],[[],27],[14,27],[8,27],[9,27],[17,27],[18,27],[18,27],[28,27],[29,27],[25,13],0,[14,10],[10],[11],[10,53],[13,54],[10,55],[2,[[56,[5]]]],[[],16],[14,16],[8,16],[9,16],[43,57],[9,45],[12,45],[28,[[34,[29]]]],[28,[[34,[50]]]],0,[23,11],[[]],[12,27],[10,[[34,[1]]]],[[58,58],[[52,[23,51]]]],[[58,58],[[52,[59,51]]]],[[58,58],[[60,[2]]]],0,[[58,58],[[60,[25]]]],[43,34],[53,34],[55,34],[32,34],[47,34],[54,34],[9,[[34,[31]]]],[12,[[34,[31]]]],[[1,1],[[34,[21]]]],[[15,15],[[34,[21]]]],[[19,19],[[34,[21]]]],[9,18],[12,18],[5,27],[42,19],[10,31],[5,62],[12,62],[2,49],[5,49],[[],49],[[],49],[[],49],[[],49],[17,[[34,[49]]]],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[12,49],[13,49],[[]],[14],[8],[9],[11,7],[19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],33],[[6,58]],[[7,58]],[[28,58]],[[29,58]],[[17,58]],[[8,58]],[[30,58]],[[18,58]],[[9,58]],[[10,58]],[[11,58]],[10,[[34,[22]]]],[10,[[34,[26]]]],[[],52],[63,[[52,[59]]]],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[58,[[52,[40]]]],[[],52],[61,[[52,[2]]]],[[],52],[[],52],[[],52],[64,[[52,[6]]]],[[],52],[64,[[52,[7]]]],[[],52],[50,[[52,[28]]]],[[],52],[[],52],[[],52],[[],52],[[],52],[65,[[52,[8]]]],[[],52],[[],52],[37,[[52,[30]]]],[[],52],[65,[[52,[9]]]],[[],52],[66,[[52,[10]]]],[[],52],[67,[[52,[11]]]],[[],52],[[],52],[58,[[52,[42]]]],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],[[34,[19]]]],[14,[[34,[19]]]],[8,[[34,[19]]]],[9,[[34,[19]]]],0,[11,69],[[],17],[14,17],[8,17],[9,17],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],52],[[],52],[[],52],[[],52],[[],68],[[],68],[[70,49,69],[[52,[51]]]],[22,45]],"p":[[3,"Namespace"],[3,"ChainExtension"],[3,"Attribute"],[3,"Vec"],[3,"ChainExtensionMethod"],[3,"Event"],[3,"Storage"],[3,"Constructor"],[3,"Message"],[3,"ItemImpl"],[3,"ItemMod"],[3,"InkTraitMessage"],[3,"InkItemTrait"],[3,"CallableWithSelector"],[3,"ExtensionId"],[4,"CallableKind"],[4,"Visibility"],[4,"Receiver"],[3,"Selector"],[4,"InkTraitItem"],[4,"Ordering"],[3,"Ident"],[3,"Contract"],[3,"Config"],[3,"InkTraitDefinition"],[3,"Path"],[15,"bool"],[4,"Item"],[4,"InkItem"],[4,"ImplItem"],[4,"Type"],[3,"IterEvents"],[3,"String"],[4,"Option"],[3,"Field"],[3,"Iter"],[4,"ImplItem"],[3,"Formatter"],[6,"Result"],[3,"Blake2x256Macro"],[8,"Debug"],[3,"SelectorMacro"],[3,"InputsIter"],[15,"u8"],[15,"u32"],[3,"LitInt"],[3,"IterItemImpls"],[4,"Lit"],[3,"Span"],[4,"Item"],[3,"Error"],[4,"Result"],[3,"IterConstructors"],[3,"IterInkTraitItems"],[3,"IterMessages"],[3,"Iter"],[15,"usize"],[3,"TokenStream"],[3,"InkTest"],[6,"Result"],[3,"ItemTrait"],[3,"Signature"],[3,"ItemFn"],[3,"ItemStruct"],[3,"ImplItemMethod"],[3,"ItemImpl"],[3,"ItemMod"],[3,"TypeId"],[4,"Visibility"],[15,"str"],[8,"IsDocAttribute"],[8,"Callable"],[8,"HexLiteral"],[13,"Constructor"],[13,"Message"],[13,"Other"],[13,"Storage"],[13,"Event"],[13,"ImplBlock"],[13,"Message"],[13,"Ink"],[13,"Rust"],[13,"Public"],[4,"SelectorId"],[4,"SelectorBytes"]]},\
"ink_lang_macro":{"doc":"","t":[14,23,23,14,14,23,23],"n":["blake2x256","chain_extension","contract","selector_bytes","selector_id","test","trait_definition"],"q":["ink_lang_macro","","","","","",""],"d":["Computes and expands into the BLAKE2b 256-bit hash of the …","Defines the interface for a chain extension.","Entry point for writing ink! smart contracts.","Computes the ink! selector of the string and expands into …","Computes the ink! selector of the string and expands into …","Defines a unit test that makes use of ink!’s off-chain …","Marks trait definitions to ink! as special ink! trait …"],"i":[0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0],"p":[]},\
"ink_metadata":{"doc":"","t":[3,3,3,3,6,3,3,3,3,3,3,3,3,3,4,4,3,3,3,13,13,13,13,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,13,3,13,13,3,4,3,13,3,3,13,3,3,13,4,3,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12],"n":["ConstructorSpec","ConstructorSpecBuilder","ContractSpec","ContractSpecBuilder","DisplayName","EventParamSpec","EventParamSpecBuilder","EventSpec","EventSpecBuilder","InkProject","MessageParamSpec","MessageParamSpecBuilder","MessageSpec","MessageSpecBuilder","MetadataVersionDeprecated","MetadataVersioned","ReturnTypeSpec","Selector","TypeSpec","V0","V1","V2","V3","args","args","args","args","args","args","args","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","constructors","constructors","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","display_name","docs","docs","docs","docs","docs","docs","docs","docs","docs","docs","docs","done","done","done","done","done","done","eq","eq","eq","eq","eq","eq","eq","eq","eq","events","events","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_label","from_label","indexed","indexed","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_portable","into_portable","into_portable","into_portable","into_portable","into_portable","into_portable","into_portable","label","label","label","label","label","label","layout","layout","messages","messages","mutates","mutates","new","new","new","new","new","new","new","of_type","of_type","opt_type","payable","payable","payable","payable","payable","registry","return_type","returns","selector","selector","selector","selector","selector","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","spec","to_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_name_segs","with_name_str","0","0","0","0","Array","ArrayLayout","Blake2x256","Cell","CellLayout","CryptoHasher","Discriminant","Enum","EnumLayout","FieldLayout","Hash","HashLayout","HashingStrategy","Keccak256","Layout","LayoutKey","Sha2x256","Struct","StructLayout","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cells_per_elem","clone","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","dispatch_key","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hasher","into","into","into","into","into","into","into","into","into","into","into","into_portable","into_portable","into_portable","into_portable","into_portable","into_portable","into_portable","key","layout","layout","layout","len","name","new","new","new","new","new","new","new","offset","offset","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","postfix","prefix","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","strategy","to_bytes","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","variants","0","0","0","0","0"],"q":["ink_metadataink_metadata::MetadataVersioned","","","","ink_metadata::layoutink_metadata::layout::Layout","","","",""],"d":["Describes a constructor of a contract.","A builder for constructors.","Describes a contract.","A builder for contracts.","Describes the syntactical name of a type at a given type …","Describes a pair of parameter label and type.","Used to construct an event parameter specification.","Describes an event definition.","An event specification builder.","An entire ink! project for metadata file generation …","Describes a pair of parameter label and type.","Used to construct a message parameter specification.","Describes a contract message.","A builder for messages.","Enum to represent a deprecated metadata version that …","Versioned ink! project metadata.","Describes the contract message return type.","The 4 byte selector to identify constructors and messages","A type specification.","Version 0 placeholder. Represents the original …","Version 1 of the contract metadata.","Version 2 of the contract metadata.","Version 3 of the contract metadata.","Sets the input arguments of the message specification.","Sets the input arguments of the message specification.","Sets the input arguments of the event specification.","Returns the parameters of the deployment handler.","Returns the parameters of the message.","The event arguments.","The parameters of the deployment handler.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets the constructors of the contract specification.","Returns the set of constructors of the contract.","","","","","","","","","","","","","","Returns the compile-time known displayed representation of …","Sets the documentation of the contract specification.","Sets the documentation of the message specification.","Sets the documentation of the message specification.","Sets the input arguments of the event specification.","Sets the documentation of the event parameter.","Returns the contract documentation.","Returns the deployment handler documentation.","Returns the message documentation.","The event documentation.","Returns the documentation associated with the arguments.","The deployment handler documentation.","Finalizes construction of the contract specification.","Finishes construction of the constructor.","Finishes construction of the message.","Finalizes building the event specification.","Finishes constructing the event parameter spec.","Finishes construction of the message parameter.","","","","","","","","","","Sets the events of the contract specification.","Returns the events of the contract.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new constructor spec builder.","Creates a new message spec builder.","If the event parameter is indexed.","Returns true if the event parameter is indexed.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the label of the constructor.","Returns the label of the message.","Returns the label of the event.","Returns the label of the parameter.","Returns the label of the parameter.","The label of the constructor.","","Returns the storage layout of the contract.","Sets the messages of the contract specification.","Returns the external messages of the contract.","Sets if the message is mutable, thus taking <code>&amp;mut self</code> or …","Returns true if the message is allowed to mutate the …","Creates a new contract specification.","Creates a new event specification builder.","Creates a new type specification without a display name.","Creates a new event parameter specification builder.","Creates a new return type specification from the given …","Constructs a new message parameter specification via …","","Sets the type of the event parameter.","Sets the type of the message parameter.","Returns the optional return type","Sets if the constructor is payable, thus accepting value …","Sets if the message is payable, thus accepting value for …","Returns if the constructor is payable by the caller.","Returns true if the message is payable by the caller.","If the constructor accepts any <code>value</code> from the caller.","Returns a read-only registry of types in the contract.","Returns the return type of the message.","Sets the return type of the message.","Sets the function selector of the message.","Sets the function selector of the message.","Returns the selector hash of the message.","Returns the selector hash of the message.","The selector hash of the message.","","","","","","","","","","","","","Returns the specification of the contract.","Returns the underlying selector bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the actual type.","Returns the type of the parameter.","Returns the type of the parameter.","","","","","","","","","","","","","","","","","","","Creates a new type specification with a display name …","Creates a new type specification with a display name.","","","","","An array of associated storage cells encoded with a given …","A layout for an array of associated cells with the same …","The BLAKE-2 crypto hasher with an output of 256 bits.","An encoded cell.","A SCALE encoded cell.","One of the supported crypto hashers.","The discriminant of an enum variant.","An enum layout with a discriminant telling which variant …","An enum storage layout.","The layout for a particular field of a struct layout.","A layout that hashes values into the entire storage key …","A hashing layout potentially hitting all cells of the …","The unbounded hashing strategy.","The KECCAK crypto hasher with an output of 256 bits.","Represents the static storage layout of an ink! smart …","A pointer into some storage region.","The SHA-2 crypto hasher with an output of 256 bits.","A struct layout with fields of different types.","A struct layout with consecutive fields of different …","","","","","","","","","","","","","","","","","","","","","","","Returns the number of cells each element in the array …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the key where the discriminant is stored to …","","","","","","","","","","","","Returns the fields of the struct layout.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the supported crypto hasher.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Returns the offset key into the storage.","Returns the storage layout of the unbounded layout …","Returns the layout of the elements stored in the array …","Returns the kind of the field.","Returns the number of elements in the array layout.","Returns the name of the field.","Creates a new cell layout.","Creates a new unbounded layout.","Creates a new unbounded hashing strategy.","Creates an array layout with the given length.","Creates a new struct layout.","Creates a new field layout.","Creates a new enum layout.","Returns the key offset used by the strategy.","Returns the offset key of the array layout.","","","","","","","","","","","","Returns the optional postfix to the computed hash.","Returns the optional prefix to the computed hash.","","","","","","","","","","","","Returns the hashing strategy to layout the underlying …","Returns the underlying bytes of the layout key.","","","","","","","","","","","","","","","","","","","","","","","","Returns the type of the encoded entity.","","","","","","","","","","","","Returns the value of the discriminant","Returns the variants of the enum.","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,1,2,3,4,5,6,4,7,1,2,3,20,21,8,4,5,6,9,12,13,14,15,16,17,18,7,1,2,3,20,21,8,4,5,6,9,12,13,14,15,16,17,18,7,8,9,8,4,5,6,9,12,13,14,15,16,17,18,12,7,1,2,3,20,8,4,5,6,13,4,7,1,2,3,20,21,8,4,5,6,9,12,13,14,15,7,8,8,4,5,6,9,12,13,14,15,16,17,18,7,1,2,3,20,21,8,4,5,6,9,9,12,13,14,15,16,16,17,18,4,5,20,13,7,1,2,3,20,21,8,4,5,6,9,12,13,14,15,16,17,18,8,4,5,6,12,13,14,15,4,5,6,13,15,4,0,18,7,8,2,5,8,6,12,13,14,15,18,20,21,14,1,2,4,5,4,18,5,2,1,2,4,5,4,8,4,5,6,9,12,13,14,15,16,17,18,18,9,7,1,2,3,20,21,8,4,5,6,9,12,13,14,15,16,17,18,7,1,2,3,20,21,8,4,5,6,9,12,13,14,15,16,17,18,12,13,15,7,1,2,3,20,21,8,4,5,6,9,12,13,14,15,16,17,18,12,12,53,54,55,56,29,0,42,29,0,0,0,29,0,0,29,0,0,42,0,0,42,29,0,29,38,39,40,41,42,33,43,44,35,45,29,38,39,40,41,42,33,43,44,35,45,33,35,35,29,38,39,40,41,42,33,43,44,35,45,29,38,39,40,41,42,33,43,44,35,45,45,29,38,39,40,41,42,33,43,44,35,45,43,29,38,39,40,41,42,33,43,44,35,45,29,29,29,29,29,29,38,38,38,38,39,39,40,41,42,33,43,44,35,35,45,41,29,38,39,40,41,42,33,43,44,35,45,29,39,40,33,43,44,45,39,40,33,44,33,44,39,40,41,33,43,44,45,40,33,29,38,39,40,41,42,33,43,44,35,45,41,41,29,38,39,40,41,42,33,43,44,35,45,40,38,35,29,38,39,40,41,42,33,43,44,35,45,29,38,39,40,41,42,33,43,44,35,45,39,29,38,39,40,41,42,33,43,44,35,45,35,45,57,58,59,60,61],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[2,2],[3,3],[4],[5],[6],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[7,[0]]],[[7,[0]]]],[8],[[],9],[[],[[11,[[8,[10]]]]]],[[],[[11,[[4,[10]]]]]],[[],[[11,[[5,[10]]]]]],[[],[[11,[[6,[10]]]]]],[[],[[11,[9]]]],[[],[[11,[[12,[10]]]]]],[[],[[11,[[13,[10]]]]]],[[],[[11,[[14,[10]]]]]],[[],[[11,[[15,[10]]]]]],[[],[[11,[16]]]],[[],[[11,[17]]]],[[],[[11,[18]]]],[12,19],[7,7],[1,1],[2,2],[3,3],[20,20],[8],[4],[5],[6],[13],0,[[[7,[0]]],8],[[[1,[0,0]]],4],[[[2,[0,0,0,0]]],5],[3,6],[20,13],[21,15],[[[8,[[0,[22,10]]]],8],23],[[[4,[[0,[22,10]]]],4],23],[[[5,[[0,[22,10]]]],5],23],[[[6,[[0,[22,10]]]],6],23],[[9,9],23],[[[12,[[0,[22,10]]]],12],23],[[[13,[[0,[22,10]]]],13],23],[[[14,[[0,[22,10]]]],14],23],[[[15,[[0,[22,10]]]],15],23],[7,7],[8],[[[8,[[0,[24,10]]]],25],26],[[[4,[[0,[24,10]]]],25],26],[[[5,[[0,[24,10]]]],25],26],[[[6,[[0,[24,10]]]],25],26],[[9,25],26],[[[12,[[0,[24,10]]]],25],26],[[[13,[[0,[24,10]]]],25],26],[[[14,[[0,[24,10]]]],25],26],[[[15,[[0,[24,10]]]],25],26],[[16,25],26],[[17,25],26],[[18,25],26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[18,16],[[]],[[]],[27,[[1,[[0,[0]],[0,[0]]]]]],[27,[[2,[[0,[0]],[0,[0]],[0,[0]],[0,[0]]]]]],[[20,23],20],[13,23],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[8,28]],[[4,28]],[[5,28]],[[6,28]],[[12,28]],[[13,28]],[[14,28]],[[15,28]],[4],[5],[6],[13],[15],0,0,[18,29],[7,7],[8],[[[2,[[0,[0]]]],23],[[2,[0]]]],[5,23],[[],7],[27,3],[[],12],[27,20],[[],14],[27,21],[[],18],[[20,12],20],[[21,12],21],[14,[[30,[12]]]],[[[1,[[0,[0]]]],23],[[1,[0]]]],[[[2,[[0,[0]]]],23],[[2,[0]]]],[4,23],[5,23],0,[18,31],[5,14],[[[2,[[0,[0]]]],14],[[2,[0]]]],[[[1,[[0,[0]]]]],[[1,[0]]]],[[[2,[[0,[0]]]]],[[2,[0]]]],[4,9],[5,9],0,[[[8,[10]]],11],[[[4,[10]]],11],[[[5,[10]]],11],[[[6,[10]]],11],[9,11],[[[12,[10]]],11],[[[13,[10]]],11],[[[14,[10]]],11],[[[15,[10]]],11],[16,11],[17,11],[18,11],[18,8],[9],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[12],[13,12],[15,12],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],12],[27,12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[33,34],[35,35],[[]],[[[29,[[0,[36,10]]]],29],37],[[38,38],37],[[[39,[[0,[36,10]]]],39],37],[[[40,[[0,[36,10]]]],40],37],[[41,41],37],[[42,42],37],[[[33,[[0,[36,10]]]],33],37],[[[43,[[0,[36,10]]]],43],37],[[[44,[[0,[36,10]]]],44],37],[[35,35],37],[[[45,[[0,[36,10]]]],45],37],[[],[[11,[[29,[10]]]]]],[[],[[11,[38]]]],[[],[[11,[[39,[10]]]]]],[[],[[11,[[40,[10]]]]]],[[],[[11,[41]]]],[[],[[11,[42]]]],[[],[[11,[[33,[10]]]]]],[[],[[11,[[43,[10]]]]]],[[],[[11,[[44,[10]]]]]],[[],[[11,[35]]]],[[],[[11,[[45,[10]]]]]],[45,38],[[[29,[[0,[22,10]]]],29],23],[[38,38],23],[[[39,[[0,[22,10]]]],39],23],[[[40,[[0,[22,10]]]],40],23],[[41,41],23],[[42,42],23],[[[33,[[0,[22,10]]]],33],23],[[[43,[[0,[22,10]]]],43],23],[[[44,[[0,[22,10]]]],44],23],[[35,35],23],[[[45,[[0,[22,10]]]],45],23],[43],[[[29,[[0,[24,10]]]],25],26],[[38,25],26],[[[39,[[0,[24,10]]]],25],26],[[[40,[[0,[24,10]]]],25],26],[[41,25],26],[[42,25],26],[[[33,[[0,[24,10]]]],25],26],[[[43,[[0,[24,10]]]],25],26],[[[44,[[0,[24,10]]]],25],26],[[35,25],26],[[[45,[[0,[24,10]]]],25],26],[[[45,[10]]],[[29,[10]]]],[[[43,[10]]],[[29,[10]]]],[[[40,[10]]],[[29,[10]]]],[[[33,[10]]],[[29,[10]]]],[[[39,[10]]],[[29,[10]]]],[[]],[[]],[46,38],[46,38],[[],38],[[],[[39,[10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[47,35],[[]],[[]],[41,42],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[29,28]],[[39,28]],[[40,28]],[[33,28]],[[43,28]],[[44,28]],[[45,28]],[39,38],[40,29],[33,29],[44,29],[33,48],[44,30],[38,39],[41,40],[[42,[50,[49]],[50,[49]]],41],[[48,34],33],[[],43],[[],44],[[],45],[40,38],[33,38],[[[29,[[0,[51,10]]]],29],[[30,[37]]]],[[38,38],[[30,[37]]]],[[[39,[[0,[51,10]]]],39],[[30,[37]]]],[[[40,[[0,[51,10]]]],40],[[30,[37]]]],[[41,41],[[30,[37]]]],[[42,42],[[30,[37]]]],[[[33,[[0,[51,10]]]],33],[[30,[37]]]],[[[43,[[0,[51,10]]]],43],[[30,[37]]]],[[[44,[[0,[51,10]]]],44],[[30,[37]]]],[[35,35],[[30,[37]]]],[[[45,[[0,[51,10]]]],45],[[30,[37]]]],[41],[41],[[[29,[10]]],11],[38,11],[[[39,[10]]],11],[[[40,[10]]],11],[41,11],[42,11],[[[33,[10]]],11],[[[43,[10]]],11],[[[44,[10]]],11],[35,11],[[[45,[10]]],11],[40,41],[38],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[39],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[35,47],[45,52],0,0,0,0,0],"p":[[3,"ConstructorSpecBuilder"],[3,"MessageSpecBuilder"],[3,"EventSpecBuilder"],[3,"ConstructorSpec"],[3,"MessageSpec"],[3,"EventSpec"],[3,"ContractSpecBuilder"],[3,"ContractSpec"],[3,"Selector"],[8,"Form"],[4,"Result"],[3,"TypeSpec"],[3,"EventParamSpec"],[3,"ReturnTypeSpec"],[3,"MessageParamSpec"],[4,"MetadataVersioned"],[4,"MetadataVersionDeprecated"],[3,"InkProject"],[6,"DisplayName"],[3,"EventParamSpecBuilder"],[3,"MessageParamSpecBuilder"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"Registry"],[4,"Layout"],[4,"Option"],[3,"PortableRegistry"],[3,"TypeId"],[3,"ArrayLayout"],[15,"u64"],[3,"Discriminant"],[8,"Ord"],[4,"Ordering"],[3,"LayoutKey"],[3,"CellLayout"],[3,"HashLayout"],[3,"HashingStrategy"],[4,"CryptoHasher"],[3,"StructLayout"],[3,"FieldLayout"],[3,"EnumLayout"],[3,"Key"],[15,"usize"],[15,"u32"],[15,"u8"],[3,"Vec"],[8,"PartialOrd"],[3,"BTreeMap"],[13,"V0"],[13,"V1"],[13,"V2"],[13,"V3"],[13,"Cell"],[13,"Hash"],[13,"Array"],[13,"Struct"],[13,"Enum"]]},\
"ink_prelude":{"doc":"Data structures to operate on contract memory during …","t":[0,0,0,14,0,0,14,8,8,13,4,13,16,8,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,3,3,4,13,13,3,3,13,3,3,4,13,3,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,12,12,12,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,4,3,3,3,3,3,3,13,3,3,3,3,13,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,4,3,3,3,3,3,3,3,13,13,3,3,3,3,3,4,3,3,13,13,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,6,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["borrow","boxed","collections","format","string","vec","vec","Borrow","BorrowMut","Borrowed","Cow","Owned","Owned","ToOwned","add","add","add_assign","add_assign","as_ref","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","clone_into","cmp","default","deref","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","hash","into","into_owned","is_borrowed","is_owned","ne","ne","ne","ne","ne","ne","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","to_mut","to_owned","to_owned","to_string","to_string","try_from","try_into","type_id","0","0","Box","ThinBox","allocator","as_fd","as_mut","as_raw_fd","as_ref","assume_init","assume_init","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call","call_mut","call_once","cause","clone","clone","clone","clone","clone","clone","clone_from","clone_from","clone_into","cmp","consume","default","default","default","default","default","deref","deref","deref_mut","deref_mut","description","downcast","downcast","downcast","downcast_unchecked","downcast_unchecked","downcast_unchecked","drop","drop","eq","fill_buf","finish","flush","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_raw","from_raw_in","ge","gt","hash","into","into","into_boxed_slice","into_future","into_inner","into_iter","into_pin","into_raw","into_raw_with_allocator","into_searcher","is_contained_in","is_empty","is_prefix_of","is_read_vectored","is_suffix_of","is_write_vectored","last","le","leak","len","lt","ne","new","new","new_in","new_uninit","new_uninit_in","new_uninit_slice","new_uninit_slice_in","new_unsize","new_zeroed","new_zeroed_in","new_zeroed_slice","new_zeroed_slice_in","next","next_back","nth","nth_back","partial_cmp","pin","pin_in","poll","poll_next","read","read_buf","read_exact","read_line","read_to_end","read_to_string","read_until","read_vectored","resume","seek","size_hint","size_hint","source","source","stream_position","strip_prefix_of","strip_suffix_of","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_new","try_new_in","try_new_uninit","try_new_uninit_in","try_new_uninit_slice","try_new_zeroed","try_new_zeroed_in","try_new_zeroed_slice","type_id","type_id","write","write","write","write_all","write_fmt","write_i128","write_i16","write_i32","write_i64","write_i8","write_isize","write_length_prefix","write_str","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","write_vectored","AllocError","BTreeMap","BTreeSet","BinaryHeap","Bound","CapacityOverflow","Excluded","HashMap","HashSet","Included","LinkedList","TryReserveError","TryReserveErrorKind","Unbounded","VecDeque","as_mut","as_ref","binary_heap","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","btree_map","btree_set","capacity","capacity","clear","clear","clone","clone","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","contains","contains_key","default","default","difference","drain","drain","drain_filter","drain_filter","entry","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend_one","extend_one","extend_one","extend_one","extend_reserve","extend_reserve","extend_reserve","extend_reserve","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_iter","from_iter","get","get","get_key_value","get_many_mut","get_many_unchecked_mut","get_mut","get_or_insert","get_or_insert_owned","get_or_insert_with","hash","hash_map","hash_set","hasher","hasher","index","insert","insert","intersection","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_keys","into_values","is_disjoint","is_empty","is_empty","is_subset","is_superset","iter","iter","iter_mut","keys","kind","len","len","linked_list","map","new","new","raw_entry","raw_entry_mut","remove","remove","remove_entry","replace","reserve","reserve","retain","retain","shrink_to","shrink_to","shrink_to_fit","shrink_to_fit","sub","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_reserve","try_reserve","type_id","type_id","type_id","type_id","type_id","union","values","values_mut","vec_deque","with_capacity","with_capacity","with_capacity_and_hasher","with_capacity_and_hasher","with_hasher","with_hasher","0","0","layout","BinaryHeap","Drain","DrainSorted","IntoIter","IntoIterSorted","Iter","PeekMut","append","as_slice","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","default","deref","deref_mut","drain","drain_sorted","drop","drop","extend","extend","extend_one","extend_one","extend_reserve","extend_reserve","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_iter","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter_sorted","into_sorted_vec","into_vec","is_empty","is_empty","is_empty","is_empty","iter","last","len","new","next","next","next","next","next","next_back","next_back","next_back","peek","peek_mut","pop","pop","push","reserve","reserve_exact","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity","BTreeMap","DrainFilter","Entry","IntoIter","IntoKeys","IntoValues","Iter","IterMut","Keys","Occupied","OccupiedEntry","OccupiedError","Range","RangeMut","Vacant","VacantEntry","Values","ValuesMut","and_modify","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains_key","default","description","drain_filter","drop","drop","drop","entry","entry","eq","extend","extend","extend_one","extend_one","first_entry","first_key_value","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","get","get","get_key_value","get_mut","get_mut","hash","index","insert","insert","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_keys","into_mut","into_values","is_empty","iter","iter_mut","key","key","key","keys","last","last","last","last","last","last","last","last","last","last_entry","last_key_value","len","len","len","len","len","len","len","len","len","max","max","max","max","max","max","min","min","min","min","min","min","new","new_in","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","or_default","or_insert","or_insert_with","or_insert_with_key","partial_cmp","pop_first","pop_last","range","range_mut","remove","remove","remove_entry","remove_entry","retain","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","split_off","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","values","values_mut","0","0","BTreeSet","Difference","DrainFilter","Intersection","IntoIter","Iter","Range","SymmetricDifference","Union","append","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","default","difference","drain_filter","drop","eq","extend","extend","extend_one","extend_one","first","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_iter","get","hash","insert","intersection","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","last","last","last","len","len","len","max","max","min","min","min","min","min","min","new","new_in","next","next","next","next","next","next","next","next","next_back","next_back","next_back","partial_cmp","pop_first","pop_last","range","remove","replace","retain","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","split_off","sub","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","DefaultHasher","Drain","DrainFilter","Entry","HashMap","IntoIter","IntoKeys","IntoValues","Iter","IterMut","Keys","Occupied","Occupied","OccupiedEntry","OccupiedError","RandomState","RawEntryBuilder","RawEntryBuilderMut","RawEntryMut","RawOccupiedEntryMut","RawVacantEntryMut","Vacant","Vacant","VacantEntry","Values","ValuesMut","and_modify","and_modify","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_hasher","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","description","entry","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hash","from_hash","from_key","from_key","from_key_hashed_nocheck","from_key_hashed_nocheck","get","get","get_key_value","get_key_value_mut","get_mut","get_mut","insert","insert","insert","insert","insert_entry","insert_entry","insert_hashed_nocheck","insert_key","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_key","into_key_value","into_mut","into_mut","key","key","key","key","key_mut","len","len","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next","next","next","next","or_default","or_insert","or_insert","or_insert_with","or_insert_with","or_insert_with_key","remove","remove","remove_entry","remove_entry","replace_entry","replace_key","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","write","write_str","0","0","0","0","Difference","Drain","DrainFilter","HashSet","Intersection","IntoIter","Iter","SymmetricDifference","Union","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","len","len","len","next","next","next","next","next","next","next","next","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Cursor","CursorMut","DrainFilter","IntoIter","Iter","IterMut","LinkedList","append","as_cursor","back","back","back","back_mut","back_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","cmp","contains","current","current","cursor_back","cursor_back_mut","cursor_front","cursor_front_mut","default","drain_filter","drop","drop","eq","extend","extend","extend_one","extend_one","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_iter","front","front","front","front_mut","front_mut","hash","index","index","insert_after","insert_before","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","iter","iter_mut","last","last","len","move_next","move_next","move_prev","move_prev","ne","new","next","next","next","next","next_back","next_back","next_back","partial_cmp","peek_next","peek_next","peek_prev","peek_prev","pop_back","pop_back","pop_front","pop_front","push_back","push_back","push_front","push_front","remove","remove_current","remove_current_as_list","size_hint","size_hint","size_hint","size_hint","splice_after","splice_before","split_after","split_before","split_off","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Drain","IntoIter","Iter","IterMut","VecDeque","allocator","append","as_mut_slices","as_slices","back","back_mut","binary_search","binary_search_by","binary_search_by_key","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","cmp","contains","default","drain","drop","drop","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend_one","extend_one","extend_reserve","extend_reserve","flush","fmt","fmt","fmt","fmt","fmt","fold","fold","from","from","from","from","from","from","from","from_iter","front","front_mut","get","get_mut","hash","index","index_mut","insert","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_empty","is_empty","iter","iter_mut","last","last","len","make_contiguous","new","new_in","next","next","next","next","next_back","next_back","next_back","next_back","nth","nth","partial_cmp","partition_point","pop_back","pop_front","push_back","push_front","range","range_mut","read","read_buf","remove","reserve","reserve_exact","resize","resize_with","retain","retain_mut","rfold","rfold","rotate_left","rotate_right","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","split_off","swap","swap_remove_back","swap_remove_front","to_owned","to_owned","to_owned","truncate","try_fold","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","try_rfold","type_id","type_id","type_id","type_id","type_id","with_capacity","with_capacity_in","write","write_all","Drain","FromUtf16Error","FromUtf8Error","ParseError","String","ToString","add","add_assign","as_bytes","as_bytes","as_mut","as_mut_str","as_mut_vec","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_from","clone_into","clone_into","cmp","default","deref","deref_mut","description","description","drain","drop","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","extend_from_within","extend_one","extend_one","extend_one","extend_one","extend_one","extend_reserve","extend_reserve","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_raw_parts","from_str","from_utf16","from_utf16_lossy","from_utf8","from_utf8_lossy","from_utf8_unchecked","hash","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","insert","insert_str","into","into","into","into","into_boxed_str","into_bytes","into_bytes","into_iter","into_raw_parts","into_searcher","is_contained_in","is_empty","is_prefix_of","is_suffix_of","last","len","ne","ne","ne","ne","new","next","next_back","partial_cmp","pop","push","push_str","remove","remove_matches","replace_range","reserve","reserve_exact","retain","shrink_to","shrink_to_fit","size_hint","split_off","strip_prefix_of","strip_suffix_of","to_owned","to_owned","to_socket_addrs","to_string","to_string","to_string","to_string","to_string","truncate","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","type_id","type_id","utf8_error","with_capacity","write_char","write_str","Drain","DrainFilter","IntoIter","Splice","Vec","advance_back_by","advance_by","allocator","allocator","allocator","allocator","append","as_mut","as_mut","as_mut_ptr","as_mut_slice","as_mut_slice","as_ptr","as_ref","as_ref","as_ref","as_ref","as_slice","as_slice","as_slice","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_from","clone_into","clone_into","cmp","count","dedup","dedup_by","dedup_by_key","default","deref","deref_mut","drain","drain_filter","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","extend","extend","extend_from_slice","extend_from_within","extend_one","extend_one","extend_reserve","extend_reserve","flush","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_raw_parts","from_raw_parts_in","hash","index","index_mut","insert","into","into","into","into","into","into_boxed_slice","into_flattened","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_raw_parts","into_raw_parts_with_alloc","is_empty","is_empty","is_empty","is_write_vectored","leak","len","ne","ne","ne","ne","ne","ne","new","new_in","next","next","next","next","next_back","next_back","next_back","next_chunk","partial_cmp","pop","push","remove","reserve","reserve_exact","resize","resize_with","retain","retain_mut","set_len","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","spare_capacity_mut","splice","split_at_spare_mut","split_off","swap_remove","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","type_id","type_id","type_id","with_capacity","with_capacity_in","write","write_all","write_vectored"],"q":["ink_prelude","","","","","","","ink_prelude::borrow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ink_prelude::borrow::Cow","","ink_prelude::boxedink_prelude::collectionsink_prelude::collections::Bound","","ink_prelude::collections::TryReserveErrorKind","ink_prelude::collections::binary_heap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ink_prelude::collections::btree_mapink_prelude::collections::btree_map::Entry","","ink_prelude::collections::btree_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ink_prelude::collections::hash_mapink_prelude::collections::hash_map::Entry","","ink_prelude::collections::hash_map::RawEntryMut","","ink_prelude::collections::hash_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ink_prelude::collections::linked_list","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ink_prelude::collections::vec_dequeink_prelude::stringink_prelude::vecd":["A module for working with borrowed data.","A pointer type for heap allocation.","Collection types.","Creates a <code>String</code> using interpolation of runtime …","A UTF-8–encoded, growable string.","A contiguous growable array type with heap-allocated …","Creates a <code>Vec</code> containing the arguments.","A trait for borrowing data.","A trait for mutably borrowing data.","Borrowed data.","A clone-on-write smart pointer.","Owned data.","The resulting type after obtaining ownership.","A generalization of <code>Clone</code> to borrowed data.","","","","","","","Immutably borrows from an owned value.","","","Mutably borrows from an owned value.","","","","Uses borrowed data to replace owned data, usually by …","","","Creates an owned Cow&lt;’a, B&gt; with the default value for …","","","","","","","","","","","","","","","","","","","","","","","Converts a <code>String</code> reference into a <code>Borrowed</code> variant. No …","Converts the string reference into a <code>Cow::Borrowed</code>.","Converts a <code>&amp;</code><code>CString</code> into a borrowed <code>Cow</code> without copying or …","Converts a <code>String</code> into an <code>Owned</code> variant. No heap …","Converts the string reference into a <code>Cow::Borrowed</code>.","Converts a string slice into a <code>Borrowed</code> variant. No heap …","Creates a clone-on-write pointer from a reference to …","Converts a <code>CStr</code> into a borrowed <code>Cow</code> without copying or …","Returns the argument unchanged.","Creates an <code>Owned</code> variant of <code>Cow</code> from an owned instance of …","Converts a <code>CString</code> into an owned <code>Cow</code> without copying or …","Moves the string into a <code>Cow::Owned</code>.","Creates a <code>Borrowed</code> variant of <code>Cow</code> from a slice.","Creates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to <code>Vec</code>.","Creates a clone-on-write pointer from an owned instance of …","Creates a clone-on-write pointer from a reference to <code>Path</code>.","","","","","","Calls <code>U::from(self)</code>.","Extracts the owned data.","Returns true if the data is borrowed, i.e. if <code>to_mut</code> would …","Returns true if the data is owned, i.e. if <code>to_mut</code> would be …","","","","","","","","","","","","","","","","","","","","Acquires a mutable reference to the owned form of the data.","Creates owned data from borrowed data, usually by cloning.","","","","","","","","","A pointer type for heap allocation.","ThinBox.","Returns a reference to the underlying allocator.","","","","","Converts to <code>Box&lt;[T], A&gt;</code>.","Converts to <code>Box&lt;T, A&gt;</code>.","","","","","","","","","","","Returns a new box with a <code>clone()</code> of this box’s contents.","","","","","","","Copies <code>source</code>’s contents into <code>self</code> without creating a …","","","","","","","","Creates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.","","","","","","Attempt to downcast the box to a concrete type.","Attempt to downcast the box to a concrete type.","Attempt to downcast the box to a concrete type.","Downcasts the box to a concrete type.","Downcasts the box to a concrete type.","Downcasts the box to a concrete type.","","","","","","","","","","","","Returns the argument unchanged.","Converts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …","Converts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>","Converts the given <code>String</code> to a boxed <code>str</code> slice that is …","Converts a <code>Cow&lt;&#39;_, [T]&gt;</code> into a <code>Box&lt;[T]&gt;</code>","Converts a type of <code>Error</code> into a box of dyn <code>Error</code>.","Converts a <code>Cow&lt;&#39;_, str&gt;</code> into a <code>Box&lt;str&gt;</code>","Converts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>","Converts a <code>T</code> into a <code>Box&lt;T&gt;</code>","Converts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>","Converts an <code>OsString</code> into a Box&lt;OsStr&gt; without copying or …","Converts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents …","Returns the argument unchanged.","Converts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>","Creates a boxed <code>Path</code> from a reference.","Converts a <code>PathBuf</code> into a Box&lt;Path&gt;.","Converts a <code>CString</code> into a Box&lt;CStr&gt; without copying or …","Converts a <code>Cow</code> into a box of dyn <code>Error</code>.","Convert a vector into a boxed slice.","","Converts a <code>str</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.","Converts a <code>Cow&lt;&#39;a, OsStr&gt;</code> into a Box&lt;OsStr&gt;, by copying …","Converts a <code>String</code> into a box of dyn <code>Error</code>.","Converts a <code>str</code> into a box of dyn <code>Error</code>.","Converts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn …","Copies the string into a newly allocated Box&lt;OsStr&gt;.","Creates a boxed <code>Path</code> from a clone-on-write pointer.","Converts a <code>Cow</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.","Converts a <code>String</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.","","Constructs a box from a raw pointer.","Constructs a box from a raw pointer in the given allocator.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>","","Consumes the <code>Box</code>, returning the wrapped value.","","Converts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …","Consumes the <code>Box</code>, returning a wrapped raw pointer.","Consumes the <code>Box</code>, returning a wrapped raw pointer and the …","","","","","","","","","","Consumes and leaks the <code>Box</code>, returning a mutable reference, …","","","","Moves a type to the heap with its <code>Metadata</code> stored in the …","Allocates memory on the heap and then places <code>x</code> into it.","Allocates memory in the given allocator then places <code>x</code> into …","Constructs a new box with uninitialized contents.","Constructs a new box with uninitialized contents in the …","Constructs a new boxed slice with uninitialized contents.","Constructs a new boxed slice with uninitialized contents …","Moves a type to the heap with its <code>Metadata</code> stored in the …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new boxed slice with uninitialized contents, …","Constructs a new boxed slice with uninitialized contents …","","","","","","Constructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…","Constructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement …","","","","","","","","","","","","","","","","","","","","","","","","Attempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.","","","","Allocates memory on the heap then places <code>x</code> into it, …","Allocates memory in the given allocator then places <code>x</code> into …","Constructs a new box with uninitialized contents on the …","Constructs a new box with uninitialized contents in the …","Constructs a new boxed slice with uninitialized contents. …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new boxed slice with uninitialized contents, …","","","Writes the value and converts to <code>Box&lt;T, A&gt;</code>.","","","","","","","","","","","","","","","","","","","","The memory allocator returned an error","An ordered map based on a B-Tree.","An ordered set based on a B-Tree.","A priority queue implemented with a binary heap.","An endpoint of a range of keys.","Error due to the computed capacity exceeding the collection…","An exclusive bound.","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","An inclusive bound.","A doubly-linked list with owned nodes.","The error type for <code>try_reserve</code> methods.","Details of the allocation that caused a <code>TryReserveError</code>","An infinite endpoint. Indicates that there is no bound in …","A double-ended queue implemented with a growable ring …","Converts from <code>&amp;mut Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;mut T&gt;</code>.","Converts from <code>&amp;Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;T&gt;</code>.","A priority queue implemented with a binary heap.","Returns the intersection of <code>self</code> and <code>rhs</code> as a new …","Returns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.","Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …","","","","","","","","","","","An ordered map based on a B-Tree.","An ordered set based on a B-Tree.","Returns the number of elements the map can hold without …","Returns the number of elements the set can hold without …","Clears the map, removing all key-value pairs. Keeps the …","Clears the set, removing all values.","","","","","","","","","","","","","Map a <code>Bound&lt;&amp;T&gt;</code> to a <code>Bound&lt;T&gt;</code> by cloning the contents of …","Returns <code>true</code> if the set contains a value.","Returns <code>true</code> if the map contains a value for the specified …","Creates an empty <code>HashMap&lt;K, V, S&gt;</code>, with the <code>Default</code> value …","Creates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …","Visits the values representing the difference, i.e., the …","Clears the map, returning all key-value pairs as an …","Clears the set, returning all elements as an iterator. …","Creates an iterator which uses a closure to determine if …","Creates an iterator which uses a closure to determine if a …","Gets the given key’s corresponding entry in the map for …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Examples","Examples","Returns the argument unchanged.","Returns the argument unchanged.","","Always evaluates to <code>TryReserveErrorKind::CapacityOverflow</code>.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns a reference to the value corresponding to the key.","Returns a reference to the value in the set, if any, that …","Returns the key-value pair corresponding to the supplied …","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Returns a mutable reference to the value corresponding to …","Inserts the given <code>value</code> into the set if it is not present, …","Inserts an owned copy of the given <code>value</code> into the set if …","Inserts a value computed from <code>f</code> into the set if the given …","","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","Returns a reference to the map’s <code>BuildHasher</code>.","Returns a reference to the set’s <code>BuildHasher</code>.","Returns a reference to the value corresponding to the …","Inserts a key-value pair into the map.","Adds a value to the set.","Visits the values representing the intersection, i.e., the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates a consuming iterator, that is, one that moves each …","Creates a consuming iterator, that is, one that moves each …","","Creates a consuming iterator visiting all the keys in …","Creates a consuming iterator visiting all the values in …","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","Returns <code>true</code> if the map contains no elements.","Returns <code>true</code> if the set contains no elements.","Returns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…","Returns <code>true</code> if the set is a superset of another, i.e., …","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all elements in arbitrary order. The …","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all keys in arbitrary order. The …","Details about the allocation that caused the error","Returns the number of elements in the map.","Returns the number of elements in the set.","A doubly-linked list with owned nodes.","Maps a <code>Bound&lt;T&gt;</code> to a <code>Bound&lt;U&gt;</code> by applying a function to …","Creates an empty <code>HashMap</code>.","Creates an empty <code>HashSet</code>.","Creates a raw immutable entry builder for the HashMap.","Creates a raw entry builder for the HashMap.","Removes a key from the map, returning the value at the key …","Removes a value from the set. Returns whether the value was","Removes a key from the map, returning the stored key and …","Adds a value to the set, replacing the existing value, if …","Reserves capacity for at least <code>additional</code> more elements to …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Shrinks the capacity of the map with a lower limit. It …","Shrinks the capacity of the set with a lower limit. It …","Shrinks the capacity of the map as much as possible. It …","Shrinks the capacity of the set as much as possible. It …","Returns the difference of <code>self</code> and <code>rhs</code> as a new …","Visits the values representing the symmetric difference, …","Removes and returns the value in the set, if any, that is …","","","","","","","","","","","","Tries to insert a key-value pair into the map, and returns …","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","Visits the values representing the union, i.e., all the …","An iterator visiting all values in arbitrary order. The …","An iterator visiting all values mutably in arbitrary order.","A double-ended queue (deque) implemented with a growable …","Creates an empty <code>HashMap</code> with at least the specified …","Creates an empty <code>HashSet</code> with at least the specified …","Creates an empty <code>HashMap</code> with at least the specified …","Creates an empty <code>HashSet</code> with at least the specified …","Creates an empty <code>HashMap</code> which will use the given hash …","Creates a new empty hash set which will use the given …","","","The layout of allocation request that failed","A priority queue implemented with a binary heap.","A draining iterator over the elements of a <code>BinaryHeap</code>.","A draining iterator over the elements of a <code>BinaryHeap</code>.","An owning iterator over the elements of a <code>BinaryHeap</code>.","","An iterator over the elements of a <code>BinaryHeap</code>.","Structure wrapping a mutable reference to the greatest …","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","Returns a slice of all values in the underlying vector, in …","","","","","","","","","","","","","","","Returns the number of elements the binary heap can hold …","Drops all items from the binary heap.","","","","","","","","","","Creates an empty <code>BinaryHeap&lt;T&gt;</code>.","","","Clears the binary heap, returning an iterator over the …","Clears the binary heap, returning an iterator over the …","","Removes heap elements in heap order.","","","","","","","","","","","","","","Converts a <code>Vec&lt;T&gt;</code> into a <code>BinaryHeap&lt;T&gt;</code>.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a consuming iterator, that is, one that moves each …","","","","","","","Returns an iterator which retrieves elements in heap order.","Consumes the <code>BinaryHeap</code> and returns a vector in sorted …","Consumes the <code>BinaryHeap</code> and returns the underlying vector …","Checks if the binary heap is empty.","","","","Returns an iterator visiting all values in the underlying …","","Returns the length of the binary heap.","Creates an empty <code>BinaryHeap</code> as a max-heap.","","","","","","","","","Returns the greatest item in the binary heap, or <code>None</code> if …","Returns a mutable reference to the greatest item in the …","Removes the greatest item from the binary heap and returns …","Removes the peeked value from the heap and returns it.","Pushes an item onto the binary heap.","Reserves capacity for at least <code>additional</code> elements more …","Reserves the minimum capacity for at least <code>additional</code> …","Retains only the elements specified by the predicate.","Discards capacity with a lower bound.","Discards as much additional capacity as possible.","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> elements …","Tries to reserve the minimum capacity for at least …","","","","","","","","Creates an empty <code>BinaryHeap</code> with at least the specified …","An ordered map based on a B-Tree.","An iterator produced by calling <code>drain_filter</code> on BTreeMap.","A view into a single entry in a map, which may either be …","An owning iterator over the entries of a <code>BTreeMap</code>.","An owning iterator over the keys of a <code>BTreeMap</code>.","An owning iterator over the values of a <code>BTreeMap</code>.","An iterator over the entries of a <code>BTreeMap</code>.","A mutable iterator over the entries of a <code>BTreeMap</code>.","An iterator over the keys of a <code>BTreeMap</code>.","An occupied entry.","A view into an occupied entry in a <code>BTreeMap</code>. It is part of …","The error returned by <code>try_insert</code> when the key already …","An iterator over a sub-range of entries in a <code>BTreeMap</code>.","A mutable iterator over a sub-range of entries in a …","A vacant entry.","A view into a vacant entry in a <code>BTreeMap</code>. It is part of …","An iterator over the values of a <code>BTreeMap</code>.","A mutable iterator over the values of a <code>BTreeMap</code>.","Provides in-place mutable access to an occupied entry …","Moves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clears the map, removing all elements.","","","","","","","","","","","","Returns <code>true</code> if the map contains a value for the specified …","Creates an empty <code>BTreeMap</code>.","","Creates an iterator that visits all elements (key-value …","","","","Gets the given key’s corresponding entry in the map for …","The entry in the map that was already occupied.","","","","","","Returns the first entry in the map for in-place …","Returns the first key-value pair in the map. The key in …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>[(K, V); N]</code> into a <code>BTreeMap&lt;(K, V)&gt;</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Gets a reference to the value in the entry.","Returns a reference to the value corresponding to the key.","Returns the key-value pair corresponding to the supplied …","Gets a mutable reference to the value in the entry.","Returns a mutable reference to the value corresponding to …","","Returns a reference to the value corresponding to the …","Sets the value of the entry with the <code>VacantEntry</code>’s key, …","Sets the value of the entry with the <code>OccupiedEntry</code>’s key,","Inserts a key-value pair into the map.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Take ownership of the key.","Creates a consuming iterator visiting all the keys, in …","Converts the entry into a mutable reference to its value.","Creates a consuming iterator visiting all the values, in …","Returns <code>true</code> if the map contains no elements.","Gets an iterator over the entries of the map, sorted by …","Gets a mutable iterator over the entries of the map, …","Returns a reference to this entry’s key.","Gets a reference to the key that would be used when …","Gets a reference to the key in the entry.","Gets an iterator over the keys of the map, in sorted order.","","","","","","","","","","Returns the last entry in the map for in-place …","Returns the last key-value pair in the map. The key in …","Returns the number of elements in the map.","","","","","","","","","","","","","","","","","","","","","Makes a new, empty <code>BTreeMap</code>.","Makes a new empty BTreeMap with a reasonable choice for B.","","","","","","","","","","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting, if empty, …","","Removes and returns the first element in the map. The key …","Removes and returns the last element in the map. The key …","Constructs a double-ended iterator over a sub-range of …","Constructs a mutable double-ended iterator over a …","Takes the value of the entry out of the map, and returns …","Removes a key from the map, returning the value at the key …","Take ownership of the key and value from the map.","Removes a key from the map, returning the stored key and …","Retains only the elements specified by the predicate.","","","","","","","","","","Splits the collection into two at the given key. Returns …","","","","","","","","","","","","","","","","","","","","","","","Tries to insert a key-value pair into the map, and returns …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The value which was not inserted, because the entry was …","Gets an iterator over the values of the map, in order by …","Gets a mutable iterator over the values of the map, in …","","","An ordered set based on a B-Tree.","A lazy iterator producing elements in the difference of …","An iterator produced by calling <code>drain_filter</code> on BTreeSet.","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>BTreeSet</code>.","An iterator over the items of a <code>BTreeSet</code>.","An iterator over a sub-range of items in a <code>BTreeSet</code>.","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>BTreeSet</code>…","Moves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …","Returns the intersection of <code>self</code> and <code>rhs</code> as a new …","Returns the union of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>.","Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …","","","","","","","","","","","","","","","","","","","Clears the set, removing all elements.","","","","","","","","","","","","","","","","","Returns <code>true</code> if the set contains an element equal to the …","Creates an empty <code>BTreeSet</code>.","Visits the elements representing the difference, i.e., the …","Creates an iterator that visits all elements in ascending …","","","","","","","Returns a reference to the first element in the set, if …","","","","","","","","","","Returns the argument unchanged.","Converts a <code>[T; N]</code> into a <code>BTreeSet&lt;T&gt;</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a reference to the element in the set, if any, …","","Adds a value to the set.","Visits the elements representing the intersection, i.e., …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Gets an iterator for moving out the <code>BTreeSet</code>’s contents.","","","","","","","","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","Returns <code>true</code> if the set contains no elements.","Returns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…","Returns <code>true</code> if the set is a superset of another, i.e., …","Gets an iterator that visits the elements in the <code>BTreeSet</code> …","Returns a reference to the last element in the set, if any.","","","Returns the number of elements in the set.","","","","","","","","","","","Makes a new, empty <code>BTreeSet</code>.","Makes a new <code>BTreeSet</code> with a reasonable choice of B.","","","","","","","","","","","","","Removes the first element from the set and returns it, if …","Removes the last element from the set and returns it, if …","Constructs a double-ended iterator over a sub-range of …","If the set contains an element equal to the value, removes …","Adds a value to the set, replacing the existing element, …","Retains only the elements specified by the predicate.","","","","","","","","Splits the collection into two at the value. Returns a new …","Returns the difference of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>…","Visits the elements representing the symmetric difference, …","Removes and returns the element in the set, if any, that …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Visits the elements representing the union, i.e., all the …","The default <code>Hasher</code> used by <code>RandomState</code>.","A draining iterator over the entries of a <code>HashMap</code>.","A draining, filtering iterator over the entries of a …","A view into a single entry in a map, which may either be …","A hash map implemented with quadratic probing and SIMD …","An owning iterator over the entries of a <code>HashMap</code>.","An owning iterator over the keys of a <code>HashMap</code>.","An owning iterator over the values of a <code>HashMap</code>.","An iterator over the entries of a <code>HashMap</code>.","A mutable iterator over the entries of a <code>HashMap</code>.","An iterator over the keys of a <code>HashMap</code>.","An occupied entry.","An occupied entry.","A view into an occupied entry in a <code>HashMap</code>. It is part of …","The error returned by <code>try_insert</code> when the key already …","<code>RandomState</code> is the default state for <code>HashMap</code> types.","A builder for computing where in a HashMap a key-value …","A builder for computing where in a HashMap a key-value …","A view into a single entry in a map, which may either be …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","A vacant entry.","A vacant entry.","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","An iterator over the values of a <code>HashMap</code>.","A mutable iterator over the values of a <code>HashMap</code>.","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs a new <code>RandomState</code>.","Creates a new <code>DefaultHasher</code> using <code>new</code>. See its …","","The entry in the map that was already occupied.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>RawEntryMut</code> from the given hash.","Access an entry by hash.","Creates a <code>RawEntryMut</code> from the given key.","Access an entry by key.","Creates a <code>RawEntryMut</code> from the given key and its hash.","Access an entry by a key and its hash.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Gets a reference to the key and value in the entry.","Gets a mutable reference to the key and value in the entry.","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the <code>VacantEntry</code>’s key, …","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the <code>VacantEntry</code>’s key, …","Sets the value of the entry, and returns an <code>OccupiedEntry</code>.","Sets the value of the entry with the <code>VacantEntry</code>’s key, …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns the entry’s old …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Converts the entry into a mutable reference to the key in …","Take ownership of the key.","Converts the <code>OccupiedEntry</code> into a mutable reference to the …","Converts the <code>OccupiedEntry</code> into a mutable reference to the …","Converts the <code>OccupiedEntry</code> into a mutable reference to the …","Gets a reference to the key in the entry.","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Gets a mutable reference to the key in the entry.","","","","","","","","","","Constructs a new <code>RandomState</code> that is initialized with …","Creates a new <code>DefaultHasher</code>.","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting, if empty, …","Takes the value out of the entry, and returns it.","Takes the value out of the entry, and returns it.","Take the ownership of the key and value from the map.","Take the ownership of the key and value from the map.","Replaces the entry, returning the old key and value. The …","Replaces the key in the hash map with the key used to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The value which was not inserted, because the entry was …","","","","","","","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>HashSet</code>.","A draining, filtering iterator over the items of a <code>HashSet</code>.","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>HashSet</code>.","An iterator over the items of a <code>HashSet</code>.","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>HashSet</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A cursor over a <code>LinkedList</code>.","A cursor over a <code>LinkedList</code> with editing operations.","An iterator produced by calling <code>drain_filter</code> on LinkedList.","An owning iterator over the elements of a <code>LinkedList</code>.","An iterator over the elements of a <code>LinkedList</code>.","A mutable iterator over the elements of a <code>LinkedList</code>.","A doubly-linked list with owned nodes.","Moves all elements from <code>other</code> to the end of the list.","Returns a read-only cursor pointing to the current element.","Provides a reference to the back element, or <code>None</code> if the …","Provides a reference to the back element of the cursor’s …","Provides a reference to the back element of the cursor’s …","Provides a mutable reference to the back element, or <code>None</code> …","Provides a mutable reference to back element of the cursor…","","","","","","","","","","","","","","","Removes all elements from the <code>LinkedList</code>.","","","","","","","","","","","Returns <code>true</code> if the <code>LinkedList</code> contains an element equal …","Returns a reference to the element that the cursor is …","Returns a reference to the element that the cursor is …","Provides a cursor at the back element.","Provides a cursor with editing operations at the back …","Provides a cursor at the front element.","Provides a cursor with editing operations at the front …","Creates an empty <code>LinkedList&lt;T&gt;</code>.","Creates an iterator which uses a closure to determine if …","","","","","","","","","","","","","","","Converts a <code>[T; N]</code> into a <code>LinkedList&lt;T&gt;</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Provides a reference to the front element, or <code>None</code> if the …","Provides a reference to the front element of the cursor’…","Provides a reference to the front element of the cursor’…","Provides a mutable reference to the front element, or <code>None</code> …","Provides a mutable reference to the front element of the …","","Returns the cursor position index within the <code>LinkedList</code>.","Returns the cursor position index within the <code>LinkedList</code>.","Inserts a new element into the <code>LinkedList</code> after the …","Inserts a new element into the <code>LinkedList</code> before the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the list into an iterator yielding elements by …","","","","","","","Returns <code>true</code> if the <code>LinkedList</code> is empty.","Provides a forward iterator.","Provides a forward iterator with mutable references.","","","Returns the length of the <code>LinkedList</code>.","Moves the cursor to the next element of the <code>LinkedList</code>.","Moves the cursor to the next element of the <code>LinkedList</code>.","Moves the cursor to the previous element of the <code>LinkedList</code>.","Moves the cursor to the previous element of the <code>LinkedList</code>.","","Creates an empty <code>LinkedList</code>.","","","","","","","","","Returns a reference to the next element.","Returns a reference to the next element.","Returns a reference to the previous element.","Returns a reference to the previous element.","Removes the last element from a list and returns it, or …","Removes the last element from the cursor’s parent list …","Removes the first element and returns it, or <code>None</code> if the …","Removes the first element from the cursor’s parent list …","Appends an element to the back of a list.","Appends an element to the back of the cursor’s parent …","Adds an element first in the list.","Appends an element to the front of the cursor’s parent …","Removes the element at the given index and returns it.","Removes the current element from the <code>LinkedList</code>.","Removes the current element from the <code>LinkedList</code> without …","","","","","Inserts the elements from the given <code>LinkedList</code> after the …","Inserts the elements from the given <code>LinkedList</code> before the …","Splits the list into two after the current element. This …","Splits the list into two before the current element. This …","Splits the list into two at the given index. Returns …","","","","","","","","","","","","","","","","","","","","","","","","","","A draining iterator over the elements of a <code>VecDeque</code>.","An owning iterator over the elements of a <code>VecDeque</code>.","An iterator over the elements of a <code>VecDeque</code>.","A mutable iterator over the elements of a <code>VecDeque</code>.","A double-ended queue implemented with a growable ring …","Returns a reference to the underlying allocator.","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","Returns a pair of slices which contain, in order, the …","Returns a pair of slices which contain, in order, the …","Provides a reference to the back element, or <code>None</code> if the …","Provides a mutable reference to the back element, or <code>None</code> …","Binary searches this <code>VecDeque</code> for a given element. This …","Binary searches this <code>VecDeque</code> with a comparator function. …","Binary searches this <code>VecDeque</code> with a key extraction …","","","","","","","","","","","Returns the number of elements the deque can hold without …","Clears the deque, removing all values.","","","","","","","","","Returns <code>true</code> if the deque contains an element equal to the …","Creates an empty deque.","Removes the specified range from the deque in bulk, …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Turn a <code>Vec&lt;T&gt;</code> into a <code>VecDeque&lt;T&gt;</code>.","Converts a <code>[T; N]</code> into a <code>VecDeque&lt;T&gt;</code>.","Returns the argument unchanged.","","Provides a reference to the front element, or <code>None</code> if the …","Provides a mutable reference to the front element, or <code>None</code> …","Provides a reference to the element at the given index.","Provides a mutable reference to the element at the given …","","","","Inserts an element at <code>index</code> within the deque, shifting all …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Consumes the deque into a front-to-back iterator yielding …","","","","","","Returns <code>true</code> if the deque is empty.","","Returns a front-to-back iterator.","Returns a front-to-back iterator that returns mutable …","","","Returns the number of elements in the deque.","Rearranges the internal storage of this deque so it is one …","Creates an empty deque.","Creates an empty deque.","","","","","","","","","","","","Returns the index of the partition point according to the …","Removes the last element from the deque and returns it, or …","Removes the first element and returns it, or <code>None</code> if the …","Appends an element to the back of the deque.","Prepends an element to the deque.","Creates an iterator that covers the specified range in the …","Creates an iterator that covers the specified mutable …","Fill <code>buf</code> with the contents of the “front” slice as …","","Removes and returns the element at <code>index</code> from the deque. …","Reserves capacity for at least <code>additional</code> more elements to …","Reserves the minimum capacity for at least <code>additional</code> more …","Modifies the deque in-place so that <code>len()</code> is equal to …","Modifies the deque in-place so that <code>len()</code> is equal to …","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","","","Rotates the double-ended queue <code>mid</code> places to the left.","Rotates the double-ended queue <code>k</code> places to the right.","Shrinks the capacity of the deque with a lower bound.","Shrinks the capacity of the deque as much as possible.","","","","","Splits the deque into two at the given index.","Swaps elements at indices <code>i</code> and <code>j</code>.","Removes an element from anywhere in the deque and returns …","Removes an element from anywhere in the deque and returns …","","","","Shortens the deque, keeping the first <code>len</code> elements and …","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve the minimum capacity for at least …","","","","","","","Creates an empty deque with space for at least <code>capacity</code> …","Creates an empty deque with space for at least <code>capacity</code> …","","","A draining iterator for <code>String</code>.","A possible error value when converting a <code>String</code> from a …","A possible error value when converting a <code>String</code> from a …","A type alias for <code>Infallible</code>.","A UTF-8–encoded, growable string.","A trait for converting a value to a <code>String</code>.","","","Returns a byte slice of this <code>String</code>’s contents.","Returns a slice of <code>u8</code>s bytes that were attempted to …","","Converts a <code>String</code> into a mutable string slice.","Returns a mutable reference to the contents of this <code>String</code>.","","","","","","","Returns the remaining (sub)string of this iterator as a …","Extracts a string slice containing the entire <code>String</code>.","","","","","","","","","","","Returns this <code>String</code>’s capacity, in bytes.","Truncates this <code>String</code>, removing all contents.","","","","","","","Creates an empty <code>String</code>.","","","","","Removes the specified range from the string in bulk, …","","","","","","","","","","","","","Copies elements from <code>src</code> range to the end of the string.","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts a <code>&amp;mut str</code> into a <code>String</code>.","Converts a <code>&amp;str</code> into a <code>String</code>.","Converts a <code>&amp;String</code> into a <code>String</code>.","Converts a clone-on-write string to an owned instance of …","Converts the given boxed <code>str</code> slice to a <code>String</code>. It is …","Returns the argument unchanged.","Allocates an owned <code>String</code> from a single character.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Creates a new <code>String</code> from a length, capacity, and pointer.","","Decode a UTF-16–encoded vector <code>v</code> into a <code>String</code>, …","Decode a UTF-16–encoded slice <code>v</code> into a <code>String</code>, replacing …","Converts a vector of bytes to a <code>String</code>.","Converts a slice of bytes to a string, including invalid …","Converts a vector of bytes to a <code>String</code> without checking …","","","","","","","","","","","","","","Inserts a character into this <code>String</code> at a byte position.","Inserts a string slice into this <code>String</code> at a byte position.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this <code>String</code> into a Box&lt;str&gt;.","Converts a <code>String</code> into a byte vector.","Returns the bytes that were attempted to convert to a …","","Decomposes a <code>String</code> into its raw components.","","","Returns <code>true</code> if this <code>String</code> has a length of zero, and <code>false</code>…","","","","Returns the length of this <code>String</code>, in bytes, not <code>char</code>s or …","","","","","Creates a new empty <code>String</code>.","","","","Removes the last character from the string buffer and …","Appends the given <code>char</code> to the end of this <code>String</code>.","Appends a given string slice onto the end of this <code>String</code>.","Removes a <code>char</code> from this <code>String</code> at a byte position and …","Remove all matches of pattern <code>pat</code> in the <code>String</code>.","Removes the specified range in the string, and replaces it …","Reserves capacity for at least <code>additional</code> bytes more than …","Reserves the minimum capacity for at least <code>additional</code> …","Retains only the characters specified by the predicate.","Shrinks the capacity of this <code>String</code> with a lower bound.","Shrinks the capacity of this <code>String</code> to match its length.","","Splits the string into two at the given byte index.","","","","","","Converts the given value to a <code>String</code>.","","","","","Shortens this <code>String</code> to the specified length.","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> bytes …","Tries to reserve the minimum capacity for at least …","","","","","Fetch a <code>Utf8Error</code> to get more details about the conversion …","Creates a new empty <code>String</code> with at least the specified …","","","A draining iterator for <code>Vec&lt;T&gt;</code>.","An iterator which uses a closure to determine if an …","An iterator that moves out of a vector.","A splicing iterator for <code>Vec</code>.","A contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …","","","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","","","Returns an unsafe mutable pointer to the vector’s …","Returns the remaining items of this iterator as a mutable …","Extracts a mutable slice of the entire vector.","Returns a raw pointer to the vector’s buffer, or a …","","","","","Returns the remaining items of this iterator as a slice.","Returns the remaining items of this iterator as a slice.","Extracts a slice containing the entire vector.","","","","","","","","","","","","","Returns the number of elements the vector can hold without …","Clears the vector, removing all values.","","","","","","","","Removes consecutive repeated elements in the vector …","Removes all but the first of consecutive elements in the …","Removes all but the first of consecutive elements in the …","Creates an empty <code>Vec&lt;T&gt;</code>.","","","Removes the specified range from the vector in bulk, …","Creates an iterator which uses a closure to determine if …","","","","","","","","","","","","","","Clones and appends all elements in a slice to the <code>Vec</code>.","Copies elements from <code>src</code> range to the end of the vector.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert a boxed slice into a vector by transferring …","Allocate a <code>Vec&lt;T&gt;</code> and move <code>s</code>’s items into it.","Allocate a <code>Vec&lt;u8&gt;</code> and fill it with a UTF-8 string.","Converts the given <code>String</code> to a vector <code>Vec</code> that holds …","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Turn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.","Converts a <code>CString</code> into a Vec&lt;u8&gt;.","Converts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.","Returns the argument unchanged.","Convert a clone-on-write slice into a vector.","Returns the argument unchanged.","Returns the argument unchanged.","","Creates a <code>Vec&lt;T&gt;</code> directly from the raw components of …","Creates a <code>Vec&lt;T, A&gt;</code> directly from the raw components of …","","","","Inserts an element at position <code>index</code> within the vector, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the vector into <code>Box&lt;[T]&gt;</code>.","Takes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.","","","","","Creates a consuming iterator, that is, one that moves each …","","","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","","","Returns <code>true</code> if the vector contains no elements.","","Consumes and leaks the <code>Vec</code>, returning a mutable reference …","Returns the number of elements in the vector, also …","","","","","","","Constructs a new, empty <code>Vec&lt;T&gt;</code>.","Constructs a new, empty <code>Vec&lt;T, A&gt;</code>.","","","","","","","","","","Removes the last element from a vector and returns it, or …","Appends an element to the back of a collection.","Removes and returns the element at position <code>index</code> within …","Reserves capacity for at least <code>additional</code> more elements to …","Reserves the minimum capacity for at least <code>additional</code> more …","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate, …","Forces the length of the vector to <code>new_len</code>.","Shrinks the capacity of the vector with a lower bound.","Shrinks the capacity of the vector as much as possible.","","","","","Returns the remaining spare capacity of the vector as a …","Creates a splicing iterator that replaces the specified …","Returns vector content as a slice of <code>T</code>, along with the …","Splits the collection into two at the given index.","Removes an element from the vector and returns it.","","","Shortens the vector, keeping the first <code>len</code> elements and …","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve the minimum capacity for at least …","","","","","","Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …","Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …","","",""],"i":[0,0,0,0,0,0,0,0,0,2,0,2,147,0,2,2,2,2,2,2,148,2,2,149,2,2,2,147,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,147,2,2,2,2,2,2,150,151,0,0,19,19,19,19,19,19,19,25,19,19,25,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,25,19,25,19,19,19,19,19,19,19,19,25,19,19,19,19,19,25,25,19,19,19,25,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,25,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,25,19,19,19,19,19,19,25,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,25,19,19,19,19,19,25,19,25,19,19,25,19,19,19,19,19,19,19,19,19,25,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,52,0,0,0,0,52,48,0,0,48,0,0,0,48,0,48,48,0,49,49,49,50,49,51,52,48,50,49,51,52,48,0,0,50,49,50,49,50,49,51,52,48,50,49,50,49,51,52,48,48,49,50,50,49,49,50,49,50,49,50,50,49,51,52,48,50,50,49,49,50,50,49,49,50,50,49,49,50,49,51,51,52,48,50,50,49,49,51,51,52,52,48,50,49,50,49,50,50,50,50,49,49,49,48,0,0,50,49,50,50,49,49,50,49,51,52,48,50,50,50,49,49,50,50,49,50,49,49,49,50,49,50,50,51,50,49,0,48,50,49,50,50,50,49,50,49,50,49,50,49,50,49,50,49,49,49,49,50,49,51,52,48,51,50,49,51,52,48,50,50,49,51,52,48,50,49,50,49,51,52,48,49,50,50,0,50,49,50,49,50,49,152,153,154,0,0,0,0,0,0,0,77,77,77,81,78,79,80,82,83,77,81,78,79,80,82,83,77,77,77,78,79,80,77,77,78,79,80,77,81,81,77,77,81,83,77,77,77,77,77,77,77,81,78,79,80,82,83,77,77,77,81,78,79,80,82,83,77,77,81,78,79,80,82,83,77,77,78,79,80,82,83,77,77,77,77,78,79,82,77,78,77,77,78,79,80,82,83,78,79,82,77,77,77,81,77,77,77,77,77,77,78,79,80,82,83,77,78,79,80,77,81,78,79,80,82,83,77,81,78,79,80,82,83,77,77,77,81,78,79,80,82,83,77,0,0,0,0,0,0,0,0,0,84,0,0,0,0,84,0,0,0,84,85,84,94,93,90,85,86,95,92,87,88,96,97,98,89,99,91,84,94,93,90,85,86,95,92,87,88,96,97,98,89,99,91,85,85,86,87,88,89,85,86,87,88,89,85,85,85,90,85,85,92,91,85,90,85,85,85,85,85,85,85,84,94,93,90,90,85,86,95,92,87,88,96,97,98,89,99,91,84,94,93,90,85,85,86,95,92,87,88,96,97,98,89,99,91,85,93,85,85,93,85,85,85,94,93,85,84,94,93,90,85,86,95,92,87,88,96,97,98,89,99,91,85,85,85,86,95,92,87,88,96,97,98,89,99,91,94,85,93,85,85,85,85,84,94,93,85,86,95,87,88,96,97,98,89,99,85,85,85,86,95,92,87,88,96,97,98,86,95,87,97,89,99,86,95,87,97,89,99,85,85,86,95,92,87,88,96,97,98,89,99,91,86,95,92,87,88,96,97,98,89,99,84,84,84,84,85,85,85,85,85,93,85,93,85,85,86,95,92,87,88,96,97,98,91,85,85,86,87,88,89,90,84,94,93,90,85,86,95,92,87,88,96,97,98,89,99,91,85,84,94,93,90,85,86,95,92,87,88,96,97,98,89,99,91,84,94,93,90,85,86,95,92,87,88,96,97,98,89,99,91,90,85,85,155,156,0,0,0,0,0,0,0,0,0,100,100,100,100,100,101,102,103,104,105,107,108,106,100,101,102,103,104,105,107,108,106,100,100,101,102,103,104,105,106,100,100,101,102,103,104,105,106,100,100,100,100,100,107,100,100,100,100,100,100,100,101,102,103,104,105,107,108,106,100,100,101,102,103,104,105,107,108,106,100,100,100,100,100,100,101,102,103,104,105,107,108,106,100,100,101,102,103,104,105,107,108,106,100,100,100,100,100,100,101,106,100,101,108,101,106,101,102,103,104,105,106,100,100,101,102,103,104,105,107,108,106,101,108,106,100,100,100,100,100,100,100,101,102,103,104,105,107,108,100,100,100,100,100,101,102,103,104,105,106,100,101,102,103,104,105,107,108,106,100,101,102,103,104,105,107,108,106,100,101,102,103,104,105,107,108,106,100,0,0,0,0,0,0,0,0,0,0,0,109,58,0,0,0,0,0,0,0,0,109,58,0,0,0,109,58,62,63,64,69,75,54,56,76,67,68,71,109,111,112,70,58,113,114,73,59,110,62,63,64,69,75,54,56,76,67,68,71,109,111,112,70,58,113,114,73,59,110,59,62,69,75,59,110,62,69,75,59,110,59,110,73,73,110,62,63,64,69,75,54,56,76,67,68,71,109,111,112,70,58,113,114,73,73,59,110,62,63,64,69,75,54,56,76,67,68,71,109,111,112,70,58,113,114,73,59,110,71,70,71,70,71,70,111,113,111,111,111,113,111,112,113,114,58,114,112,111,62,63,64,69,75,54,56,76,67,68,71,109,111,112,70,58,113,114,73,59,110,62,63,64,69,75,54,56,76,67,68,111,114,111,111,113,111,58,113,114,111,62,63,64,69,75,54,76,67,68,59,110,62,63,64,69,75,54,56,76,67,68,58,109,58,109,58,58,111,113,111,113,113,113,62,63,64,69,75,54,56,76,67,68,62,69,75,59,110,73,62,63,64,69,75,54,56,76,67,68,71,109,111,112,70,58,113,114,73,59,110,62,63,64,69,75,54,56,76,67,68,71,109,111,112,70,58,113,114,73,59,110,62,63,64,69,75,54,56,76,67,68,71,109,111,112,70,58,113,114,73,59,110,73,110,110,157,158,159,160,0,0,0,0,0,0,0,0,0,66,65,55,57,61,53,72,74,66,65,55,57,61,53,72,74,66,61,53,72,74,66,61,53,72,74,66,65,55,57,61,53,72,74,66,65,55,57,61,53,72,74,66,65,55,57,61,53,72,74,66,65,55,57,61,53,72,74,66,65,55,66,65,55,57,61,53,72,74,66,65,55,57,61,53,72,74,66,61,53,72,74,66,65,55,57,61,53,72,74,66,65,55,57,61,53,72,74,66,65,55,57,61,53,72,74,0,0,0,0,0,0,0,115,116,115,117,116,115,116,115,118,121,117,116,120,119,115,118,121,117,116,120,119,115,115,118,117,119,115,115,118,117,119,115,115,117,116,115,115,115,115,115,115,115,120,115,115,115,115,115,115,118,121,117,116,120,119,115,115,118,121,117,116,120,119,115,115,117,116,115,116,115,117,116,116,116,115,118,121,117,116,120,119,115,115,115,118,121,120,119,115,115,115,118,121,115,117,116,117,116,115,115,118,121,120,119,118,121,119,115,117,116,117,116,115,116,115,116,115,116,115,116,115,116,116,118,121,120,119,116,116,116,116,115,115,118,117,119,115,118,121,117,116,120,119,115,118,121,117,116,120,119,115,118,121,117,116,120,119,0,0,0,0,0,122,122,122,122,122,122,122,122,122,125,126,123,122,124,125,126,123,122,124,122,122,123,122,124,122,123,122,124,122,122,122,122,125,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,125,126,123,122,124,126,123,125,126,123,122,122,122,124,122,122,122,122,122,122,122,122,122,125,126,123,122,124,125,126,123,122,122,122,124,126,123,122,124,122,122,126,123,122,122,122,122,125,126,123,124,125,126,123,124,126,123,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,126,123,122,122,122,122,125,126,123,124,122,122,122,122,123,122,124,122,123,125,126,123,122,124,125,126,123,122,124,122,122,123,125,126,123,122,124,122,122,122,122,0,0,0,0,0,0,10,10,10,128,10,10,10,129,129,10,10,10,10,129,10,129,10,10,128,130,129,10,10,128,130,10,10,10,128,10,10,128,10,10,10,10,128,130,10,129,10,10,10,10,128,10,10,10,10,10,10,10,10,10,10,10,10,10,10,129,10,10,128,128,130,130,129,10,10,10,10,10,10,10,128,130,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,129,10,128,130,10,10,128,129,10,10,10,10,10,10,129,10,10,10,10,10,10,129,129,10,10,10,10,10,10,10,10,10,10,10,10,129,10,10,10,10,128,10,161,10,10,128,130,10,129,10,128,130,129,10,128,130,10,10,129,10,128,130,128,10,10,10,0,0,0,0,0,139,139,141,139,8,142,8,8,8,8,139,8,8,141,139,8,8,141,139,8,141,139,8,8,142,143,141,139,8,8,142,143,8,8,139,8,8,139,8,8,139,8,8,8,8,8,8,8,8,141,139,8,142,143,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,141,139,8,142,143,141,139,8,8,8,8,8,8,8,8,8,8,8,142,143,8,8,8,8,8,8,8,141,139,8,142,143,8,8,141,139,8,8,8,142,143,8,8,141,139,8,8,8,8,8,8,8,8,8,8,8,8,141,139,142,143,141,139,143,139,8,8,8,8,8,8,8,8,8,8,8,8,8,141,139,142,143,8,8,8,8,8,139,8,8,141,139,8,142,143,141,139,8,142,143,8,8,141,139,8,142,143,8,8,8,8,8],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],1]],[[[2,[1]],[2,[1]]]],[[[2,[1]],1]],[[[2,[1]],[2,[1]]]],[[[2,[3]]],4],[2],[[]],[2],[[]],[[]],[[]],[2,2],[[2,2]],[[]],[[]],[[2,2],5],[[],2],[2],[[2,2],6],[[[2,[3]],4],6],[2,6],[[[2,[4]],3],6],[[[2,[4]],4],6],[[[2,[1]],1],6],[[[2,[1]],1],6],[[[2,[4]],4],6],[[[2,[4]],7],6],[2,6],[[[2,[3]],3],6],[[2,8],6],[[[2,[4]],3],6],[[[2,[3]],7],6],[[[2,[3]],9],6],[[[2,[1]],10],6],[[[2,[3]],3],6],[[[2,[4]],9],6],[[[2,[3]],4],6],[[2,11],[[13,[12]]]],[[2,11],[[13,[12]]]],[10,[[2,[1]]]],[3,[[2,[3]]]],[14,[[2,[15]]]],[10,[[2,[1]]]],[7,[[2,[3]]]],[1,[[2,[1]]]],[9,[[2,[4]]]],[15,[[2,[15]]]],[[]],[[[8,[16]]],2],[14,[[2,[15]]]],[7,[[2,[3]]]],[[],2],[8,2],[9,[[2,[4]]]],[4,[[2,[4]]]],[[],2],[[],[[2,[1]]]],[[],[[2,[1]]]],[[],[[2,[1]]]],[2],[[]],[2],[2,6],[2,6],[2,6],[[[2,[1]],10],6],[[[2,[1]],1],6],[[[2,[1]],1],6],[2,6],[[2,8],6],[[[2,[4]],4],[[17,[5]]]],[[[2,[3]],3],[[17,[5]]]],[[2,2],[[17,[5]]]],[[[2,[3]],3],[[17,[5]]]],[[[2,[3]],4],[[17,[5]]]],[[[2,[3]],7],[[17,[5]]]],[[[2,[4]],4],[[17,[5]]]],[[[2,[3]],4],[[17,[5]]]],[[[2,[4]],3],[[17,[5]]]],[[[2,[4]],7],[[17,[5]]]],[[[2,[4]],3],[[17,[5]]]],[[[2,[3]],9],[[17,[5]]]],[[[2,[4]],9],[[17,[5]]]],[2],[[]],[[]],[[],10],[[[2,[1]]],10],[[],13],[[],13],[[],18],0,0,0,0,[19],[[[19,[16]]],20],[19],[[[19,[16]]],21],[19],[19,19],[[[19,[22]]],19],[[]],[19],[[]],[[]],[19],[[]],[19],[19],[19],[[[19,[16]]],[[17,[23]]]],[19,19],[19,19],[[[19,[3,16]]],[[19,[3,16]]]],[[[19,[15,16]]],[[19,[15,16]]]],[[[19,[1,16]]],[[19,[1,16]]]],[[[19,[4,16]]],[[19,[4,16]]]],[[19,19]],[[19,19]],[[]],[[19,19],5],[[[19,[16]],24]],[[],[[19,[3,16]]]],[[],[[19,[15,16]]]],[[],[[19,[16]]]],[[],[[19,[1,16]]]],[[],[[19,[16]]]],[25],[19],[25],[19],[[[19,[16]]],1],[[[19,[26]]],[[13,[19,[19,[26]]]]]],[[[19,[26]]],[[13,[19,[19,[26]]]]]],[[[19,[26]]],[[13,[19,[19,[26]]]]]],[[[19,[26]]],19],[[[19,[26]]],19],[[[19,[26]]],19],[25],[19],[[19,19],6],[[[19,[16]]],[[13,[27]]]],[19,28],[[[19,[16]]],[[13,[27]]]],[[25,11],[[13,[12]]]],[[25,11],[[13,[12]]]],[[19,11],[[13,[12]]]],[[19,11],[[13,[12]]]],[[19,11],[[13,[12]]]],[[]],[[[2,[15]]],[[19,[15,16]]]],[1,[[19,[1,16]]]],[10,[[19,[1,16]]]],[2,[[19,[16]]]],[[],[[19,[23,16]]]],[[[2,[1]]],[[19,[1,16]]]],[[],[[19,[16]]]],[[],[[19,[16]]]],[[[19,[1]]],19],[7,[[19,[3,16]]]],[15,[[19,[15,16]]]],[[]],[[],[[19,[16]]]],[4,[[19,[4,16]]]],[9,[[19,[4,16]]]],[14,[[19,[15,16]]]],[[[2,[1]]],[[19,[23,16]]]],[8,19],[29],[1,[[19,[23,16]]]],[[[2,[3]]],[[19,[3,16]]]],[10,[[19,[23,16]]]],[1,[[19,[23,16]]]],[[],[[19,[23,16]]]],[3,[[19,[3,16]]]],[[[2,[4]]],[[19,[4,16]]]],[[[2,[1]]],[[19,[23,16]]]],[10,[[19,[23,16]]]],[[],[[19,[16]]]],[[],[[19,[16]]]],[[],19],[[19,19],6],[[19,19],6],[19],[[]],[[]],[19,19],[[]],[19],[[]],[19,[[30,[19]]]],[19],[19],[1,31],[1,6],[19,6],[1,6],[[[19,[16]]],6],[1,6],[[[19,[16]]],6],[19,17],[[19,19],6],[19],[19,24],[[19,19],6],[[19,19],6],[[],25],[[],[[19,[16]]]],[[],19],[[],[[19,[22,16]]]],[[],[[19,[22]]]],[24,[[19,[16]]]],[24,19],[[],25],[[],[[19,[22,16]]]],[[],[[19,[22]]]],[24,[[19,[16]]]],[24,19],[19,17],[19,17],[[19,24],17],[[19,24],17],[[19,19],[[17,[5]]]],[[],[[30,[[19,[16]]]]]],[[],[[30,[19]]]],[[[30,[19]],32],33],[[[30,[19]],32],[[33,[17]]]],[[[19,[16]]],[[13,[24,27]]]],[[[19,[16]],34],[[13,[27]]]],[[[19,[16]]],[[13,[27]]]],[[[19,[16]],10],[[13,[24,27]]]],[[[19,[16]],8],[[13,[24,27]]]],[[[19,[16]],10],[[13,[24,27]]]],[[[19,[16]],35,8],[[13,[24,27]]]],[[[19,[16]]],[[13,[24,27]]]],[[[30,[19]]],36],[[[19,[16]],37],[[13,[28,27]]]],[[[19,[16]]]],[19],[25,[[17,[23]]]],[[[19,[16]]],[[17,[23]]]],[[[19,[16]]],[[13,[28,27]]]],[1,[[17,[1]]]],[1,[[17,[1]]]],[[]],[[],10],[[],10],[[],13],[[[19,[16]]],[[13,[[19,[16]]]]]],[[],13],[[],13],[[],13],[[],[[13,[[19,[16]],38]]]],[[],[[13,[19,38]]]],[[],[[13,[[19,[22,16]],38]]]],[[],[[13,[[19,[22]],38]]]],[24,[[13,[[19,[16]],38]]]],[[],[[13,[[19,[22,16]],38]]]],[[],[[13,[[19,[22]],38]]]],[24,[[13,[[19,[16]],38]]]],[[],18],[[],18],[[[19,[22]]],19],[[[19,[16]]],[[13,[24,27]]]],[19],[[[19,[16]]],[[13,[27]]]],[[[19,[16]],39],[[13,[27]]]],[[19,40]],[[19,41]],[[19,21]],[[19,42]],[[19,43]],[[19,44]],[[19,24]],[[19,1]],[[19,45]],[[19,46]],[[19,47]],[[19,28]],[[19,35]],[[19,24]],[[[19,[16]]],[[13,[24,27]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[48,48],[48,48],0,[[49,49],49],[[49,49],49],[[49,49],49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[50,24],[49,24],[50],[49],[50,50],[49,49],[51,51],[52,52],[48,48],[[50,50]],[[49,49]],[[]],[[]],[[]],[[]],[[]],[48,48],[49,6],[50,6],[[],50],[[],49],[[49,49],53],[50,54],[49,55],[50,56],[49,57],[50,58],[[50,50],6],[[49,49],6],[[51,51],6],[[52,52],6],[[48,48],6],[50],[50],[49],[49],[50],[50],[49],[49],[[50,24]],[[50,24]],[[49,24]],[[49,24]],[[50,11],[[13,[12]]]],[[49,11],[[13,[12]]]],[[51,11],[[13,[12]]]],[[51,11],[[13,[12]]]],[[52,11],[[13,[12]]]],[[48,11],[[13,[12]]]],[[]],[[],[[50,[59]]]],[[],[[49,[59]]]],[[]],[[]],[52,51],[60,52],[[]],[[]],[[],50],[[],49],[50,17],[49,17],[50,17],[50,17],[50,17],[50,17],[49],[49],[49],[48],0,0,[50],[49],[50],[50,17],[49,6],[[49,49],61],[[]],[[]],[[]],[[]],[[]],[50,62],[50,63],[50,64],[49,65],[49,66],[50,67],[50,68],[[49,49],6],[50,6],[49,6],[[49,49],6],[[49,49],6],[50,62],[49,66],[50,63],[50,69],[51,52],[50,24],[49,24],0,[48,48],[[],[[50,[59]]]],[[],[[49,[59]]]],[50,70],[50,71],[50,17],[49,6],[50,17],[49,17],[[50,24]],[[49,24]],[50],[49],[[50,24]],[[49,24]],[50],[49],[[49,49],49],[[49,49],72],[49,17],[[]],[[]],[[]],[[]],[[]],[[],10],[[],13],[[],13],[[],13],[[],13],[[],13],[50,[[13,[73]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[50,24],[[13,[51]]]],[[49,24],[[13,[51]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[49,49],74],[50,75],[50,76],0,[24,[[50,[59]]]],[24,[[49,[59]]]],[24,50],[24,49],[[],50],[[],49],0,0,0,0,0,0,0,0,0,0,[[77,77]],[77],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[77,24],[77],[77,77],[78,78],[79,79],[80,80],[[77,77]],[[]],[[]],[[]],[[]],[[],77],[81],[81],[77,82],[77,83],[81],[83],[77],[77],[77],[77],[[77,24]],[[77,24]],[[77,11],[[13,[12]]]],[[81,11],[[13,[12]]]],[[78,11],[[13,[12]]]],[[79,11],[[13,[12]]]],[[80,11],[[13,[12]]]],[[82,11],[[13,[12]]]],[[83,11],[[13,[12]]]],[[[8,[16]]],77],[[]],[[],77],[[]],[[]],[[]],[[]],[[]],[[]],[[],77],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[77,79],[77,78],[[]],[[]],[[]],[[]],[[]],[77,80],[77,[[8,[16]]]],[77,[[8,[16]]]],[77,6],[78,6],[79,6],[82,6],[77,78],[78,17],[77,24],[[],77],[78,17],[79,17],[80,17],[82,17],[83,17],[78,17],[79,17],[82,17],[77,17],[77,[[17,[81]]]],[77,17],[81],[77],[[77,24]],[[77,24]],[77],[[77,24]],[77],[78],[79],[80],[82],[83],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[77,24],[[13,[51]]]],[[77,24],[[13,[51]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[24,77],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[84,84],[[85,85]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[85],[85,85],[86,86],[87,87],[88,88],[89,89],[[]],[[]],[[]],[[]],[[]],[[85,85],5],[85,6],[[],[[85,[16]]]],[[[90,[16]]],1],[85,91],[85],[92],[91],[85,84],0,[[85,85],6],[85],[85],[85],[85],[85,[[17,[93]]]],[85,17],[[84,11],[[13,[12]]]],[[94,11],[[13,[12]]]],[[93,11],[[13,[12]]]],[[90,11],[[13,[12]]]],[[90,11],[[13,[12]]]],[[85,11],[[13,[12]]]],[[86,11],[[13,[12]]]],[[95,11],[[13,[12]]]],[[92,11],[[13,[12]]]],[[87,11],[[13,[12]]]],[[88,11],[[13,[12]]]],[[96,11],[[13,[12]]]],[[97,11],[[13,[12]]]],[[98,11],[[13,[12]]]],[[89,11],[[13,[12]]]],[[99,11],[[13,[12]]]],[[[91,[16]],11],[[13,[12]]]],[[]],[[]],[[]],[[]],[[]],[[],[[85,[16]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[85,[16]]]],[93],[85,17],[85,17],[93],[85,17],[85],[85],[94],[93],[85,17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[85,86],[85,92],[85,95],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[94],[85,97],[93],[85,98],[85,6],[85,86],[85,95],[84],[94],[93],[85,87],[86,17],[95,17],[87,17],[88,17],[96,17],[97,17],[98,17],[89,17],[99,17],[85,[[17,[93]]]],[85,17],[85,24],[86,24],[95,24],[92,24],[87,24],[88,24],[96,24],[97,24],[98,24],[86,17],[95,17],[87,17],[97,17],[89,17],[99,17],[86,17],[95,17],[87,17],[97,17],[89,17],[99,17],[[],[[85,[16]]]],[[],85],[86,17],[95,17],[92,17],[87,17],[88,17],[96,17],[97,17],[98,17],[89,17],[99,17],[91,17],[86,17],[95,17],[92,17],[87,17],[88,17],[96,17],[97,17],[98,17],[89,17],[99,17],[84],[84],[84],[84],[[85,85],[[17,[5]]]],[85,17],[85,17],[85,89],[85,99],[93],[85,17],[93],[85,17],[85],[86],[95],[92],[87],[88],[96],[97],[98],[91],[85,85],[[]],[[]],[[]],[[]],[[]],[[],10],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[85,[[13,[90]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],0,[85,88],[85,96],0,0,0,0,0,0,0,0,0,0,0,[[100,100]],[[100,100],100],[[100,100],100],[[100,100],100],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[100],[100,100],[101,101],[102,102],[103,103],[104,104],[105,105],[106,106],[[100,100]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[100,100],5],[100,6],[[],[[100,[16]]]],[[100,100],102],[100,107],[107],[[100,100],6],[100],[100],[100],[100],[100,17],[[100,11],[[13,[12]]]],[[101,11],[[13,[12]]]],[[102,11],[[13,[12]]]],[[103,11],[[13,[12]]]],[[104,11],[[13,[12]]]],[[105,11],[[13,[12]]]],[[107,11],[[13,[12]]]],[[108,11],[[13,[12]]]],[[106,11],[[13,[12]]]],[[]],[[],[[100,[16]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[100,[16]]]],[100,17],[100],[100,6],[[100,100],104],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[100,101],[100,108],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[100,100],6],[100,6],[[100,100],6],[[100,100],6],[100,101],[100,17],[101,17],[106,17],[100,24],[101,24],[108,24],[101,17],[106,17],[101,17],[102,17],[103,17],[104,17],[105,17],[106,17],[[],[[100,[16]]]],[[],100],[101,17],[102,17],[103,17],[104,17],[105,17],[107,17],[108,17],[106,17],[101,17],[108,17],[106,17],[[100,100],[[17,[5]]]],[100,17],[100,17],[100,106],[100,6],[100,17],[100],[101],[102],[103],[104],[105],[107],[108],[100,100],[[100,100],100],[[100,100],103],[100,17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[100,100],105],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[109,109],[58,58],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[59,110],[62,62],[69,69],[75,75],[59,59],[110,110],[[]],[[]],[[]],[[]],[[]],[[],59],[[],110],[73,1],0,[110,28],[[62,11],[[13,[12]]]],[[63,11],[[13,[12]]]],[[64,11],[[13,[12]]]],[[69,11],[[13,[12]]]],[[75,11],[[13,[12]]]],[[54,11],[[13,[12]]]],[[56,11],[[13,[12]]]],[[76,11],[[13,[12]]]],[[67,11],[[13,[12]]]],[[68,11],[[13,[12]]]],[[71,11],[[13,[12]]]],[[109,11],[[13,[12]]]],[[111,11],[[13,[12]]]],[[112,11],[[13,[12]]]],[[70,11],[[13,[12]]]],[[58,11],[[13,[12]]]],[[113,11],[[13,[12]]]],[[114,11],[[13,[12]]]],[[73,11],[[13,[12]]]],[[73,11],[[13,[12]]]],[[59,11],[[13,[12]]]],[[110,11],[[13,[12]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[71,28],109],[[70,28],17],[71,109],[70,17],[[71,28],109],[[70,28],17],[111],[113],[111],[111],[111],[113],[111],[112],[113],[114],[58,113],[114,113],[[112,28]],[111],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[111],[114],[111],[111],[113],[111],[58],[113],[114],[111],[62,24],[63,24],[64,24],[69,24],[75,24],[54,24],[76,24],[67,24],[68,24],[[],59],[[],110],[62,17],[63,17],[64,17],[69,17],[75,17],[54,17],[56,17],[76,17],[67,17],[68,17],[58],[109],[58],[109],[58],[58],[111],[113],[111],[113],[113],[113],[62],[63],[64],[69],[75],[54],[56],[76],[67],[68],[[]],[[]],[[]],[[]],[[]],[[],10],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],0,[110],[[110,1]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[66,66],[61,61],[53,53],[72,72],[74,74],[[]],[[]],[[]],[[]],[[]],[[66,11],[[13,[12]]]],[[65,11],[[13,[12]]]],[[55,11],[[13,[12]]]],[[57,11],[[13,[12]]]],[[61,11],[[13,[12]]]],[[53,11],[[13,[12]]]],[[72,11],[[13,[12]]]],[[74,11],[[13,[12]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[66,24],[65,24],[55,24],[66,17],[65,17],[55,17],[57,17],[61,17],[53,17],[72,17],[74,17],[66],[65],[55],[57],[61],[53],[72],[74],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],0,0,0,0,0,0,0,[[115,115]],[116,117],[115,17],[117,17],[116,17],[115,17],[116,17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[115],[115,115],[118,118],[117,117],[119,119],[[115,115]],[[]],[[]],[[]],[[]],[[115,115],5],[115,6],[117,17],[116,17],[115,117],[115,116],[115,117],[115,116],[[],115],[115,120],[115],[120],[[115,115],6],[115],[115],[115],[115],[[115,11],[[13,[12]]]],[[118,11],[[13,[12]]]],[[121,11],[[13,[12]]]],[[117,11],[[13,[12]]]],[[116,11],[[13,[12]]]],[[120,11],[[13,[12]]]],[[119,11],[[13,[12]]]],[[],115],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],115],[115,17],[117,17],[116,17],[115,17],[116,17],[115],[117,[[17,[24]]]],[116,[[17,[24]]]],[116],[116],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[115,119],[115,118],[115,121],[[]],[[]],[[]],[[]],[115,6],[115,118],[115,121],[118,17],[121,17],[115,24],[117],[116],[117],[116],[[115,115],6],[[],115],[118,17],[121,17],[120,17],[119,17],[118,17],[121,17],[119,17],[[115,115],[[17,[5]]]],[117,17],[116,17],[117,17],[116,17],[115,17],[116,17],[115,17],[116,17],[115],[116],[115],[116],[[115,24]],[116,17],[116,[[17,[115]]]],[118],[121],[120],[119],[[116,115]],[[116,115]],[116,115],[116,115],[[115,24],115],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],0,0,0,0,0,[122],[[122,122]],[122],[122],[122,17],[122,17],[122,[[13,[24,24]]]],[122,[[13,[24,24]]]],[122,[[13,[24,24]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[122,24],[122],[123,123],[122,122],[124,124],[[122,122]],[[]],[[]],[[]],[[122,122],5],[122,6],[[],[[122,[16]]]],[122,125],[125],[122],[122,6],[122,6],[122,6],[[122,8],6],[122,6],[122,6],[[122,122],6],[122],[122],[122],[122],[[122,24]],[[122,24]],[[[122,[35]]],[[13,[27]]]],[[125,11],[[13,[12]]]],[[126,11],[[13,[12]]]],[[123,11],[[13,[12]]]],[[122,11],[[13,[12]]]],[[124,11],[[13,[12]]]],[126],[123],[[]],[[]],[[]],[[]],[8,122],[[],[[122,[16]]]],[[]],[[],[[122,[16]]]],[122,17],[122,17],[[122,24],17],[[122,24],17],[122],[[122,24]],[[122,24]],[[122,24]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[122,124],[122,123],[122,126],[[]],[126,6],[123,6],[122,6],[124,6],[122,123],[122,126],[126,17],[123,17],[122,24],[122],[[],[[122,[16]]]],[[],122],[125,17],[126,17],[123,17],[124,17],[125,17],[126,17],[123,17],[124,17],[[126,24],17],[[123,24],17],[[122,122],[[17,[5]]]],[122,24],[122,17],[122,17],[122],[122],[122,123],[122,126],[[[122,[35]]],[[13,[24,27]]]],[[[122,[35]],34],[[13,[27]]]],[[122,24],17],[[122,24]],[[122,24]],[[122,24]],[[122,24,127]],[122],[122],[126],[123],[[122,24]],[[122,24]],[[122,24]],[122],[125],[126],[123],[124],[[122,24],122],[[122,24,24]],[[122,24],17],[[122,24],17],[[]],[[]],[[]],[[122,24]],[123],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[122,24],[[13,[51]]]],[[122,24],[[13,[51]]]],[123],[[],18],[[],18],[[],18],[[],18],[[],18],[24,[[122,[16]]]],[24,122],[[[122,[35]]],[[13,[24,27]]]],[[[122,[35]]],[[13,[27]]]],0,0,0,0,0,0,[[10,1],10],[[10,1]],[10],[128],[10,1],[10,1],[10,8],[129],[129,1],[10],[10,3],[10,1],[10,4],[129,1],[10,1],[[]],[[]],[10,1],[[]],[[]],[[]],[[]],[10,1],[[]],[[]],[10,24],[10],[10,10],[128,128],[[10,10]],[[]],[[]],[[10,10],5],[[],10],[10,1],[10,1],[128,1],[130,1],[10,129],[129],[[10,1],6],[[10,1],6],[[10,10],6],[[10,2],6],[[128,128],6],[10],[10],[10],[10],[10],[10],[10],[[10,10]],[[10,131]],[[10,[2,[1]]]],[[10,131]],[[10,1]],[[10,24]],[[10,24]],[[129,11],[[13,[12]]]],[[10,11],[[13,[12]]]],[[10,11],[[13,[12]]]],[[128,11],[[13,[12]]]],[[128,11],[[13,[12]]]],[[130,11],[[13,[12]]]],[[130,11],[[13,[12]]]],[[]],[1,10],[1,10],[10,10],[[[2,[1]]],10],[[[19,[1,16]]],10],[[]],[131,10],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[35,24,24],10],[1,[[13,[10]]]],[[],[[13,[10,130]]]],[[],10],[[[8,[35,16]]],[[13,[10,128]]]],[[],[[2,[1]]]],[[[8,[35,16]]],10],[10],[[10,[132,[24]]],1],[[10,[133,[24]]],1],[[10,[134,[24]]],1],[[10,[135,[24]]],1],[[10,[136,[24]]],1],[[10,137],1],[[10,[132,[24]]],1],[[10,[136,[24]]],1],[[10,[135,[24]]],1],[[10,137],1],[[10,[134,[24]]],1],[[10,[133,[24]]],1],[[10,24,131]],[[10,24,1]],[[]],[[]],[[]],[[]],[10,[[19,[1,16]]]],[10,[[8,[35,16]]]],[128,[[8,[35,16]]]],[[]],[10],[[10,1]],[[10,1],6],[10,6],[[10,1],6],[[10,1],6],[129,[[17,[131]]]],[10,24],[[10,10],6],[[10,1],6],[[10,2],6],[[10,1],6],[[],10],[129,[[17,[131]]]],[129,[[17,[131]]]],[[10,10],[[17,[5]]]],[10,[[17,[131]]]],[[10,131]],[[10,1]],[[10,24],131],[10],[[10,1]],[[10,24]],[[10,24]],[10],[[10,24]],[10],[129],[[10,24],10],[[10,1],[[17,[1]]]],[[10,1],[[17,[1]]]],[[]],[[]],[10,[[13,[[139,[138,16]],27]]]],[[],10],[10,10],[[],10],[[],10],[[],10],[[10,24]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[10,24],[[13,[51]]]],[[10,24],[[13,[51]]]],[[],18],[[],18],[[],18],[[],18],[128,140],[24,10],[[10,131],[[13,[12]]]],[[10,1],[[13,[12]]]],0,0,0,0,0,[[139,24],[[13,[24]]]],[[139,24],[[13,[24]]]],[141],[139],[8],[142],[[8,8]],[8,8],[8],[8],[139],[8],[8],[141],[139],[8],[8,8],[141],[139],[8],[[]],[[]],[8],[[]],[[]],[[]],[[]],[[]],[8],[[]],[[]],[[]],[8,24],[8],[139,139],[8,8],[[8,8]],[[]],[[]],[[8,8],5],[139,24],[8],[8],[8],[[],[[8,[16]]]],[8],[8],[8,141],[8,142],[141],[139],[8],[142],[143],[8,6],[8,6],[[8,8],6],[8,6],[8,6],[8,6],[8],[8],[8],[8],[8],[8],[[8,24]],[[8,24]],[[[8,[35]]],[[13,[27]]]],[[141,11],[[13,[12]]]],[[139,11],[[13,[12]]]],[[8,11],[[13,[12]]]],[[142,11],[[13,[12]]]],[[143,11],[[13,[12]]]],[[]],[[]],[19,8],[[],[[8,[16]]]],[1,[[8,[35,16]]]],[10,[[8,[35,16]]]],[[],[[8,[16]]]],[[],[[8,[16]]]],[122,8],[14,[[8,[35,16]]]],[77,[[8,[16]]]],[[]],[2,[[8,[16]]]],[[]],[[]],[[],[[8,[16]]]],[[24,24],[[8,[16]]]],[[24,24],8],[8],[8],[8],[[8,24]],[[]],[[]],[[]],[[]],[[]],[8,19],[8,8],[[]],[[]],[8,144],[8,145],[8,139],[[]],[[]],[8],[8],[141,6],[139,6],[8,6],[[[8,[35]]],6],[8],[8,24],[8,6],[8,6],[[8,8],6],[8,6],[8,6],[8,6],[[],[[8,[16]]]],[[],8],[141,17],[139,17],[142,17],[143,17],[141,17],[139,17],[143,17],[139,[[13,[146]]]],[[8,8],[[17,[5]]]],[8,17],[8],[[8,24]],[[8,24]],[[8,24]],[[8,24]],[[8,24]],[8],[8],[[8,24]],[[8,24]],[8],[141],[139],[142],[143],[8],[8,143],[8],[[8,24],8],[[8,24]],[[]],[[]],[[8,24]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[8,24],[[13,[51]]]],[[8,24],[[13,[51]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[24,[[8,[16]]]],[24,8],[[[8,[35]]],[[13,[24,27]]]],[[[8,[35]]],[[13,[27]]]],[[[8,[35]]],[[13,[24,27]]]]],"p":[[15,"str"],[4,"Cow"],[3,"OsStr"],[3,"Path"],[4,"Ordering"],[15,"bool"],[3,"OsString"],[3,"Vec"],[3,"PathBuf"],[3,"String"],[3,"Formatter"],[3,"Error"],[4,"Result"],[3,"CString"],[3,"CStr"],[3,"Global"],[4,"Option"],[3,"TypeId"],[3,"Box"],[3,"BorrowedFd"],[15,"i32"],[19,"MaybeUninit"],[8,"Error"],[15,"usize"],[3,"ThinBox"],[8,"Any"],[3,"Error"],[15,"u64"],[15,"never"],[3,"Pin"],[3,"CharPredicateSearcher"],[3,"Context"],[4,"Poll"],[3,"ReadBuf"],[15,"u8"],[4,"GeneratorState"],[4,"SeekFrom"],[3,"AllocError"],[3,"Arguments"],[15,"i128"],[15,"i16"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u32"],[4,"Bound"],[3,"HashSet"],[3,"HashMap"],[3,"TryReserveError"],[4,"TryReserveErrorKind"],[3,"Difference"],[3,"Drain"],[3,"Drain"],[3,"DrainFilter"],[3,"DrainFilter"],[4,"Entry"],[3,"RandomState"],[3,"LayoutError"],[3,"Intersection"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"IntoIter"],[3,"Iter"],[3,"IntoKeys"],[3,"IntoValues"],[3,"Keys"],[3,"RawEntryBuilder"],[3,"RawEntryBuilderMut"],[3,"SymmetricDifference"],[3,"OccupiedError"],[3,"Union"],[3,"Values"],[3,"ValuesMut"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"IntoIterSorted"],[3,"PeekMut"],[3,"Drain"],[3,"DrainSorted"],[4,"Entry"],[3,"BTreeMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"OccupiedError"],[3,"DrainFilter"],[3,"IntoIter"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"IterMut"],[3,"ValuesMut"],[3,"IntoKeys"],[3,"IntoValues"],[3,"RangeMut"],[3,"BTreeSet"],[3,"Iter"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"Range"],[3,"DrainFilter"],[3,"IntoIter"],[4,"RawEntryMut"],[3,"DefaultHasher"],[3,"RawOccupiedEntryMut"],[3,"RawVacantEntryMut"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"LinkedList"],[3,"CursorMut"],[3,"Cursor"],[3,"Iter"],[3,"IntoIter"],[3,"DrainFilter"],[3,"IterMut"],[3,"VecDeque"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"IterMut"],[8,"FnMut"],[3,"FromUtf8Error"],[3,"Drain"],[3,"FromUtf16Error"],[15,"char"],[3,"RangeInclusive"],[3,"RangeTo"],[3,"Range"],[3,"RangeFrom"],[3,"RangeToInclusive"],[3,"RangeFull"],[4,"SocketAddr"],[3,"IntoIter"],[3,"Utf8Error"],[3,"Drain"],[3,"DrainFilter"],[3,"Splice"],[3,"IterMut"],[3,"Iter"],[3,"IntoIter"],[8,"ToOwned"],[8,"Borrow"],[8,"BorrowMut"],[13,"Borrowed"],[13,"Owned"],[13,"Included"],[13,"Excluded"],[13,"AllocError"],[13,"Vacant"],[13,"Occupied"],[13,"Occupied"],[13,"Vacant"],[13,"Occupied"],[13,"Vacant"],[8,"ToString"]]},\
"ink_primitives":{"doc":"Utilities in use by ink!.","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Key","KeyPtr","add_assign","add_assign","add_assign_using","advance_by","as_mut","as_ref","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","decode","decode_all","decode_all_with_depth_limit","decode_with_depth_limit","default","encode_to","encoded_fixed_size","encoded_size","eq","eq","fmt","fmt","fmt","from","from","from","from","hash","into","into","key","new","partial_cmp","size_hint","to_keyed_vec","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","type_info","using_encoded"],"q":["ink_primitives","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A key into the smart contract storage.","A key pointer.","","","Adds the <code>u64</code> value to the key storing the result in <code>result</code>.","Advances the key pointer by the given amount and returns …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the underlying offset key.","Creates a new key instance from the given bytes.","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,3,1,1,1,3,1,3,1,3,1,3,1,1,1,1,1,1,1,1,1,1,3,1,1,3,1,1,3,3,1,1,3,3,1,1,1,1,1,3,1,1,3,1,3,1,3,1,1],"f":[0,0,[[1,2]],[[1,2]],[[1,1]],[[3,2],1],[1],[1],[[]],[[]],[[]],[[]],[1,1],[3,3],[[]],[[]],[[1,1],4],[[],[[6,[1,5]]]],[[],[[6,[5]]]],[7,[[6,[5]]]],[7,[[6,[5]]]],[[],1],[1],[[],[[9,[8]]]],[1,8],[[1,1],10],[[3,3],10],[[1,11],12],[[1,11],12],[[3,11],12],[[]],[[],1],[1,3],[[]],[1],[[]],[[]],[3,1],[[],1],[[1,1],[[9,[4]]]],[1,8],[[],[[15,[13,14]]]],[[]],[[]],[[],16],[[],6],[[],6],[[],6],[[],6],[[],17],[[],17],[[],18],[1]],"p":[[3,"Key"],[15,"u64"],[3,"KeyPtr"],[4,"Ordering"],[3,"Error"],[4,"Result"],[15,"u32"],[15,"usize"],[4,"Option"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u8"],[3,"Global"],[3,"Vec"],[3,"String"],[3,"TypeId"],[3,"Type"]]},\
"ink_storage":{"doc":"The <code>ink_storage</code> utilities used to manipulate and organize …","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,8,18,17,3,8,8,8,24,18,18,8,24,8,24,8,24,11,10,5,10,5,11,11,10,5,10,5,11,11,10,11,11,5,5,5,5,11,11,11,11,10,10,11,10,5,10,5,10,5,5,10,5,11,11,11,11,11],"n":["Mapping","allocate_spread","borrow","borrow_mut","clear_spread","contains","default","fmt","from","get","insert","insert_return_size","into","layout","pull_spread","push_spread","remove","size","traits","try_from","try_into","type_id","type_info","vzip","ExtKeyPtr","FOOTPRINT","FOOTPRINT_CLEANUP_THRESHOLD","KeyPtr","LayoutCryptoHasher","PackedAllocate","PackedLayout","PackedLayout","REQUIRES_DEEP_CLEAN_UP","REQUIRES_DEEP_CLEAN_UP","SpreadAllocate","SpreadAllocate","SpreadLayout","SpreadLayout","StorageLayout","StorageLayout","advance_by","allocate_packed","allocate_packed_root","allocate_spread","allocate_spread_root","borrow","borrow_mut","clear_packed","clear_packed_root","clear_spread","clear_spread_root","clone","clone_into","crypto_hasher","eq","fmt","forward_allocate_packed","forward_clear_packed","forward_pull_packed","forward_push_packed","from","from","into","key","layout","next_for","next_for","pull_packed","pull_packed_root","pull_spread","pull_spread_root","push_packed","push_packed_root","push_packed_root_return_size","push_spread","push_spread_root","to_owned","try_from","try_into","type_id","vzip"],"q":["ink_storage","","","","","","","","","","","","","","","","","","","","","","","","ink_storage::traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A mapping of key-value pairs directly into contract …","","","","","Checks if a value is stored at the given <code>key</code> in the …","","","Returns the argument unchanged.","Get the <code>value</code> at <code>key</code> from the contract storage.","Insert the given <code>value</code> to the contract storage.","Insert the given <code>value</code> to the contract storage.","Calls <code>U::from(self)</code>.","","","","Clears the value at <code>key</code> from storage.","Get the size of a value stored at <code>key</code> in the contract …","Traits and interfaces to operate with storage entities.","","","","","","Extension trait to make <code>KeyPtr</code> simpler to use for …","The footprint of the type.","This constant is used by some types to make sure that …","A key pointer.","Types implementing this trait are supported layouting …","Types that can be default initialized to a single storage …","Types that can be stored to and loaded from a single …","Derives <code>ink_storage</code>’s <code>PackedLayout</code> trait for the given …","Indicates whether a type requires deep clean-up of its …","Indicates whether a type requires deep clean-up of its …","Types that can be default initialized to some area of the …","Derives <code>ink_storage</code>’s <code>SpreadAllocate</code> trait for the given …","Types that can be stored to and loaded from the contract …","Derives <code>ink_storage</code>’s <code>SpreadLayout</code> trait for the given …","Implemented by types that have a storage layout.","Derives <code>ink_storage</code>’s <code>StorageLayout</code> trait for the given …","Advances the key pointer by the given amount and returns …","Indicates to <code>self</code> that is has just been allocated to the …","Allocates an instance of type <code>T</code> to the contract storage …","Default initializes the implementing type using spread …","Pulls an instance of type <code>T</code> from the contract storage …","","","Indicates to <code>self</code> that it is about to be cleared from …","Clears the entity from the contract storage using packed …","Clears an instance of <code>Self</code> from the contract storage.","Clears the entity from the contract storage using spread …","","","Returns the layout crypto hasher for <code>Self</code>.","","","Allocates an instance of type <code>T</code> in packed fashion to the …","Clears an instance of type <code>T</code> in packed fashion from the …","Pulls an instance of type <code>T</code> in packed fashion from the …","Pushes an instance of type <code>T</code> in packed fashion to the …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns the underlying offset key.","Returns the static storage layout of <code>Self</code>.","Advances the key pointer by the same amount of the …","","Indicates to <code>self</code> that is has just been pulled from the …","Pulls an instance of type <code>T</code> from the contract storage …","Pulls an instance of <code>Self</code> from the contract storage.","Pulls an instance of type <code>T</code> from the contract storage …","Indicates to <code>self</code> that it is about to be pushed to …","Pushes the entity to the contract storage using packed …","Pushes the entity to the contract storage using packed …","Pushes an instance of <code>Self</code> to the contract storage.","Pushes the entity to the contract storage using spread …","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,0,16,0,0,0,0,0,0,16,16,0,0,0,0,0,0,1,17,0,18,0,1,1,19,0,16,0,1,1,20,1,1,0,0,0,0,1,1,1,1,21,22,1,19,0,16,0,19,0,0,16,0,1,1,1,1,1],"f":[0,[1,2],[[]],[[]],[[2,1]],[2,3],[[],2],[[2,4],5],[[]],[2,6],[2],[2,[[6,[7]]]],[[]],[1,8],[1,2],[[2,1]],[2],[2,[[6,[7]]]],0,[[],9],[[],9],[[],10],[[],11],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,12],13],[13],[13],[1],[13],[[]],[[]],[13],[13],[1],[13],[1,1],[[]],[[],14],[[1,1],3],[[1,4],[[9,[15]]]],[1],[1],[1],[1],[[]],[13,1],[[]],[1,13],[1,8],[[],13],[1,13],[13],[13],[1],[13],[13],[13],[13,[[6,[7]]]],[1],[13],[[]],[[],9],[[],9],[[],10],[[]]],"p":[[3,"KeyPtr"],[3,"Mapping"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[15,"u32"],[4,"Layout"],[4,"Result"],[3,"TypeId"],[3,"Type"],[15,"u64"],[3,"Key"],[4,"CryptoHasher"],[3,"Error"],[8,"SpreadLayout"],[8,"PackedAllocate"],[8,"SpreadAllocate"],[8,"PackedLayout"],[8,"LayoutCryptoHasher"],[8,"StorageLayout"],[8,"ExtKeyPtr"]]},\
"ink_storage_derive":{"doc":"Custom derive for <code>ink_storage</code> traits.","t":[24,24,24,24],"n":["PackedLayout","SpreadAllocate","SpreadLayout","StorageLayout"],"q":["ink_storage_derive","","",""],"d":["Derives <code>ink_storage</code>’s <code>PackedLayout</code> trait for the given …","Derives <code>ink_storage</code>’s <code>SpreadAllocate</code> trait for the given …","Derives <code>ink_storage</code>’s <code>SpreadLayout</code> trait for the given …","Derives <code>ink_storage</code>’s <code>StorageLayout</code> trait for the given …"],"i":[0,0,0,0],"f":[0,0,0,0],"p":[]},\
"itertools":{"doc":"Extra iterator adaptors, functions and macros.","tn":["Both","Continue","Diff","Done","Either","EitherOrBoth","First","FirstMismatch","FoldWhile","Itertools","Last","Left","Left","Longer","Middle","MinMax","MinMaxResult","MultiUnzip","NoElements","OneElement","Only","PeekingNext","Position","Right","Right","Shorter","all","all","all_equal","all_unique","any","any","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","assert_equal","at_most_one","batching","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","both","cartesian_product","chain","chain","chunks","circular_tuple_windows","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cmp","coalesce","collect","collect_tuple","collect_vec","combinations","combinations_with_replacement","concat","concat","cons_tuples","contains","count","counts","counts_by","dedup","dedup_by","dedup_by_with_count","dedup_with_count","deref","deref_mut","diff_with","dropping","dropping_back","duplicates","duplicates_by","either","either_into","either_with","enumerate","eq","eq","eq","eq","eq","equal","exactly_one","expect_left","expect_right","extend","factor_err","factor_first","factor_none","factor_ok","factor_second","filter_map_ok","filter_ok","find","find_map","find_or_first","find_or_last","find_position","flatten_ok","flip","flip","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold1","fold_ok","fold_options","fold_results","fold_while","for_each","foreach","format","format_with","from","from","from","from","from","from","from","group_by","has_left","has_right","hash","hash","interleave","interleave","interleave_shortest","intersperse","intersperse","intersperse_with","intersperse_with","into","into","into","into","into","into","into","into","into_group_map","into_group_map_by","into_grouping_map","into_grouping_map_by","into_inner","into_inner","into_inner","into_iter","into_iter","into_option","iproduct","is_both","is_done","is_left","is_left","is_right","is_right","iterate","izip","join","join","k_smallest","kmerge","kmerge","kmerge_by","kmerge_by","last","left","left","left_and_then","left_and_then","left_or","left_or_default","left_or_else","len","map","map_any","map_into","map_left","map_left","map_ok","map_results","map_right","map_right","max","merge","merge","merge_by","merge_join_by","merge_join_by","min","minmax","minmax_by","minmax_by_key","multi_cartesian_product","multipeek","multipeek","multiunzip","multiunzip","multiunzip","multizip","next","next_back","next_tuple","nth","or_default","pad_using","partial_cmp","partition","partition","partition_map","partition_result","peek_nth","peeking_next","peeking_take_while","permutations","position","position_max","position_max_by","position_max_by_key","position_min","position_min_by","position_min_by_key","position_minmax","position_minmax_by","position_minmax_by_key","positions","powerset","process_results","product1","put_back","put_back_n","rciter","reduce","repeat_call","repeat_n","rev","rfind","rfold","right","right","right_and_then","right_and_then","right_or","right_or_default","right_or_else","set_from","size_hint","sorted","sorted","sorted_by","sorted_by_cached_key","sorted_by_key","sorted_unstable","sorted_unstable_by","sorted_unstable_by_key","step","structs","sum1","take_while_ref","tee","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","traits","tree_fold1","try_collect","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","tuple_combinations","tuple_windows","tuples","type_id","type_id","type_id","type_id","type_id","type_id","unfold","unique","unique_by","unwrap_left","unwrap_right","update","while_some","with_position","zip","zip_eq","zip_eq","zip_longest","0","0","0","1","1","1","2","0","0","0","0","0","1","0","0","0","0","1","0","0","0","0","Batching","Chunk","Chunks","CircularTupleWindows","Coalesce","Combinations","CombinationsWithReplacement","ConsTuples","Dedup","DedupBy","DedupByWithCount","DedupWithCount","Duplicates","DuplicatesBy","ExactlyOneError","FilterMapOk","FilterOk","FlattenOk","Format","FormatWith","Group","GroupBy","GroupingMap","GroupingMapBy","Groups","Interleave","InterleaveShortest","Intersperse","IntersperseWith","IntoChunks","Iterate","KMerge","KMergeBy","MapInto","MapOk","MapResults","Merge","MergeBy","MergeJoinBy","MultiPeek","MultiProduct","PadUsing","PeekNth","PeekingTakeWhile","Permutations","Positions","Powerset","ProcessResults","Product","PutBack","PutBackN","RcIter","RepeatCall","RepeatN","Step","TakeWhileRef","Tee","TupleBuffer","TupleCombinations","TupleWindows","Tuples","Unfold","Unique","UniqueBy","Update","WhileSome","WithPosition","Zip","ZipEq","ZipLongest","aggregate","all","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect","collect","collect","collect","count","count","count","count","count","count","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold_first","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_buffer","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_parts","k","last","last","last","max","max_by","max_by_key","min","min_by","min_by_key","minmax","minmax_by","minmax_by_key","n","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","peek","peek","peek_nth","peeking_next","peeking_next","peeking_next","peeking_next","product","put_back","put_back","rciter","reset_peek","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","state","sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_value","HomogeneousTuple"],"q":["itertoolsitertools::Diff","","","","","","","itertools::Either","","itertools::EitherOrBoth","","","","itertools::FoldWhile","","itertools::MinMaxResult","","","itertools::Position","","","","itertools::structsitertools::traits"],"d":["Both values are present.","Continue folding with this value","A type returned by the <code>diff_with</code> function.","Fold is complete and will return this value","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","Value that either holds a single A or B, or both.","This is the first element.","The index of the first non-matching element along with …","An enum used for controlling the execution of <code>fold_while</code>.","An <code>Iterator</code> blanket implementation that provides extra …","This is the last element.","A value of type <code>L</code>.","Only the left value of type <code>A</code> is present.","The total number of elements that were in <code>I</code> along with the …","This is neither the first nor the last element.","More than one element in the iterator, the first element …","<code>MinMaxResult</code> is an enum returned by <code>minmax</code>.","An iterator that can be unzipped into multiple collections.","Empty iterator","Iterator with one element, so the minimum and maximum are …","This is the only element.","An iterator that allows peeking at an element before …","A value yielded by <code>WithPosition</code>. Indicates the position of …","A value of type <code>R</code>.","Only the right value of type <code>B</code> is present.","The total number of elements that were in <code>J</code> along with the …","Test whether the predicate holds for all elements in the …","","Check whether all elements compare equal.","Check whether all elements are unique (non equal).","Test whether the predicate holds for any elements in the …","","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","","","","Converts from <code>&amp;mut EitherOrBoth&lt;A, B&gt;</code> to …","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","","","","Converts from <code>&amp;EitherOrBoth&lt;A, B&gt;</code> to <code>EitherOrBoth&lt;&amp;A, &amp;B&gt;</code>.","Assert that two iterables produce equal sequences, with …","If the iterator yields no elements, Ok(None) will be …","A “meta iterator adaptor”. Its closure receives a …","","","","","","","","","","","","","If Both, return <code>Some</code> tuple containing left and right.","Return an iterator adaptor that iterates over the …","Create an iterator that first iterates <code>i</code> and then <code>j</code>.","Chain zero or more iterators together into one sequence.","Return an <em>iterable</em> that can chunk the iterator.","Return an iterator over all windows, wrapping back to the …","","","","","","","","","","","","Create an iterator that clones each element from &amp;T to T","","Return an iterator adaptor that uses the passed-in closure …","","Collects all items from the iterator into a tuple of a …","<code>.collect_vec()</code> is simply a type specialization of …","Return an iterator adaptor that iterates over the <code>k</code>-length …","Return an iterator that iterates over the <code>k</code>-length …","Combine all an iterator’s elements into one element by …","Combine all an iterator’s elements into one element by …","Create an iterator that maps for example iterators of …","Returns <code>true</code> if the given item is present in this iterator.","","Collect the items in this iterator and return a <code>HashMap</code> …","Collect the items in this iterator and return a <code>HashMap</code> …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","","","Compares every element yielded by both <code>i</code> and <code>j</code> with the …","Consume the first <code>n</code> elements from the iterator eagerly, …","Consume the last <code>n</code> elements from the iterator eagerly, and …","Return an iterator adaptor that produces elements that …","Return an iterator adaptor that produces elements that …","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","Iterate <code>iterable</code> with a running index.","","","","","","Return <code>true</code> if both iterables produce equal sequences …","If the iterator yields exactly one element, that element …","Returns the left value","Returns the right value","","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Return an iterator adaptor that filters and transforms …","Return an iterator adaptor that filters every <code>Result::Ok</code> …","","","Find the value of the first element satisfying a predicate …","Find the value of the first element satisfying a predicate …","Find the position and value of the first element …","Return an iterator adaptor that flattens every <code>Result::Ok</code> …","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","Convert <code>EitherOrBoth&lt;A, B&gt;</code> to <code>EitherOrBoth&lt;B, A&gt;</code>.","","","","","","","Perform a fold operation over the iterable.","","Accumulator of the elements in the iterator.","Fold <code>Result</code> values from an iterator.","Fold <code>Option</code> values from an iterator.","See <code>.fold_ok()</code>.","An iterator method that applies a function, producing a …","","Run the closure <code>f</code> eagerly on each element of the iterator.","Format all iterator elements, separated by <code>sep</code>.","Format all iterator elements, separated by <code>sep</code>.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return an <em>iterable</em> that can group iterator elements. …","If <code>Left</code>, or <code>Both</code>, return true, otherwise, return false.","If <code>Right</code>, or <code>Both</code>, return true, otherwise, return false.","","","Create an iterator that interleaves elements in <code>i</code> and <code>j</code>.","Alternate elements from two iterators until both have run …","Alternate elements from two iterators until at least one …","Iterate <code>iterable</code> with a particular value inserted between …","An iterator adaptor to insert a particular value between …","Iterate <code>iterable</code> with a particular value created by a …","An iterator adaptor to insert a particular value created …","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return a <code>HashMap</code> of keys mapped to <code>Vec</code>s of values. Keys …","Return an <code>Iterator</code> on a <code>HashMap</code>. Keys mapped to <code>Vec</code>s of …","Constructs a <code>GroupingMap</code> to be used later with one of the …","Constructs a <code>GroupingMap</code> to be used later with one of the …","Extract the value of an either over two equivalent types.","Return the inner value.","Return the value in the continue or done.","Convert the inner value to an iterator.","","<code>into_option</code> creates an <code>Option</code> of type <code>(T, T)</code>. The returned …","Create an iterator over the “cartesian product” of …","If Right, return true otherwise, return false. Equivalent …","Return true if <code>self</code> is <code>Done</code>, false if it is <code>Continue</code>.","Return true if the value is the <code>Left</code> variant.","If Left, return true otherwise, return false. Exclusive …","Return true if the value is the <code>Right</code> variant.","If Right, return true otherwise, return false. Exclusive …","Creates a new iterator that infinitely applies function to …","Create an iterator running multiple iterators in lockstep.","Combine all iterator elements into one String, seperated …","Combine all iterator elements into one String, separated …","Sort the k smallest elements into a new iterator, in …","Create an iterator that merges elements of the contained …","Return an iterator adaptor that flattens an iterator of …","Create an iterator that merges elements of the contained …","Return an iterator adaptor that flattens an iterator of …","","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","If <code>Left</code>, or <code>Both</code>, return <code>Some</code> with the left value, …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","","Map <code>f</code> over the contained value and return the result in the","Apply the functions <code>f</code> and <code>g</code> on the value <code>a</code> and <code>b</code> …","Convert each item of the iterator using the <code>Into</code> trait.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …","Return an iterator adaptor that applies the provided …","See <code>.map_ok()</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Apply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …","Return the maximum value of the iterable.","Create an iterator that merges elements in <code>i</code> and <code>j</code>.","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merge-joins items from the …","Create an iterator that merges items from both this and …","Return the minimum value of the iterable.","Return the minimum and maximum elements in the iterator.","Return the minimum and maximum element of an iterator, as …","Return the minimum and maximum element of an iterator, as …","Return an iterator adaptor that iterates over the …","An iterator adaptor that allows the user to peek at …","An iterator adaptor that allows the user to peek at …","Converts an iterator of tuples into a tuple of containers.","Unzip this iterator into multiple collections.","Converts an iterator of tuples into a tuple of containers.","An iterator that generalizes <em>.zip()</em> and allows running …","","","Advances the iterator and returns the next items grouped …","","Returns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …","Return an iterator adaptor that pads the sequence to a …","","Partition a sequence using predicate <code>pred</code> so that elements …","","Collect all iterator elements into one of two partitions. …","Partition a sequence of <code>Result</code>s into one list of all the <code>Ok</code>…","A drop-in replacement for <code>std::iter::Peekable</code> which adds a …","Pass a reference to the next iterator element to the …","Return an iterator adaptor that borrows from this iterator …","Return an iterator adaptor that iterates over all …","","Return the position of the maximum element in the iterator.","Return the position of the maximum element in the …","Return the position of the maximum element in the …","Return the position of the minimum element in the iterator.","Return the position of the minimum element in the …","Return the position of the minimum element in the …","Return the positions of the minimum and maximum elements in","Return the postions of the minimum and maximum elements of …","Return the postions of the minimum and maximum elements of …","Return an iterator adaptor that yields the indices of all …","Return an iterator that iterates through the powerset of …","“Lift” a function of the values of an iterator so that …","Iterate over the entire iterator and multiply all the …","Create an iterator where you can put back a single item","Create an iterator where you can put back multiple values …","Return an iterator inside a <code>Rc&lt;RefCell&lt;_&gt;&gt;</code> wrapper.","Return either value of left, right, or the product of <code>f</code> …","An iterator source that produces elements indefinitely by …","Create an iterator that produces <code>n</code> repetitions of <code>element</code>.","Iterate <code>iterable</code> in reverse.","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","If <code>Right</code>, or <code>Both</code>, return <code>Some</code> with the right value, …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Apply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","Assign to each reference in <code>self</code> from the <code>from</code> iterator, …","","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Return an iterator adaptor that steps <code>n</code> elements in the …","The concrete iterator types.","Iterate over the entire iterator and add all the elements.","Return an iterator adaptor that borrows from a <code>Clone</code>-able …","Split into an iterator pair that both yield all elements …","","","","","","","Traits helpful for using certain <code>Itertools</code> methods in …","Accumulate the elements in the iterator in a tree-like …","<code>.try_collect()</code> is more convenient way of writing …","","","","","","","","","","","","","Return an iterator adaptor that iterates over the …","Return an iterator over all contiguous windows producing …","Return an iterator that groups the items in tuples of a …","","","","","","","Creates a new unfold source with the specified closure as …","Return an iterator adaptor that filters out elements that …","Return an iterator adaptor that filters out elements that …","Returns the left value","Returns the right value","Return an iterator adaptor that applies a mutating function","Return an iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …","Return an iterator adaptor that wraps each element in a …","Iterate <code>i</code> and <code>j</code> in lock step.","Iterate <code>i</code> and <code>j</code> in lock step.","Create an iterator which iterates over both this and the …","Create an iterator which iterates over both this and the …","","","","","","","","","","","","","","","","","","","","","","","A “meta iterator adaptor”. Its closure receives a …","An iterator for the elements in a single chunk.","An iterator that yields the Chunk iterators.","An iterator over all windows,wrapping back to the first …","An iterator adaptor that may join together adjacent …","An iterator to iterate through all the <code>k</code>-length …","An iterator to iterate through all the <code>n</code>-length …","An iterator that maps an iterator of tuples like …","An iterator adaptor that removes repeated duplicates.","An iterator adaptor that removes repeated duplicates, …","An iterator adaptor that removes repeated duplicates, …","An iterator adaptor that removes repeated duplicates, …","An iterator adapter to filter out duplicate elements.","An iterator adapter to filter for duplicate elements.","Iterator returned for the error case of …","An iterator adapter to filter and apply a transformation …","An iterator adapter to filter values within a nested …","An iterator adaptor that flattens <code>Result::Ok</code> values and …","Format all iterator elements lazily, separated by <code>sep</code>.","Format all iterator elements lazily, separated by <code>sep</code>.","An iterator for the elements in a single group.","<code>GroupBy</code> is the storage for the lazy grouping operation.","<code>GroupingMap</code> is an intermediate struct for efficient …","<code>GroupingMapBy</code> is an intermediate struct for efficient …","An iterator that yields the Group iterators.","An iterator adaptor that alternates elements from two …","An iterator adaptor that alternates elements from the two …","An iterator adaptor to insert a particular value between …","An iterator adaptor to insert a particular value created …","<code>ChunkLazy</code> is the storage for a lazy chunking operation.","An iterator that infinitely applies function to value and …","An iterator adaptor that merges an abitrary number of base …","An iterator adaptor that merges an abitrary number of base …","An iterator adapter to apply <code>Into</code> conversion to each …","An iterator adapter to apply a transformation within a …","See <code>MapOk</code>.","An iterator adaptor that merges the two base iterators in …","An iterator adaptor that merges the two base iterators in …","An iterator adaptor that merge-joins items from the two …","See <code>multipeek()</code> for more information.","An iterator adaptor that iterates over the cartesian …","An iterator adaptor that pads a sequence to a minimum …","See <code>peek_nth()</code> for more information.","An iterator adaptor that takes items while a closure …","An iterator adaptor that iterates through all the <code>k</code>…","An iterator adapter to get the positions of each element …","An iterator to iterate through the powerset of the …","An iterator that produces only the <code>T</code> values as long as the …","An iterator adaptor that iterates over the cartesian …","An iterator adaptor that allows putting back a single item …","An iterator adaptor that allows putting multiple items in …","A wrapper for <code>Rc&lt;RefCell&lt;I&gt;&gt;</code>, that implements the <code>Iterator</code> …","See <code>repeat_call</code> for more information.","An iterator that produces <em>n</em> repetitions of an element.","An iterator adaptor that steps a number elements in the …","An iterator adaptor that borrows from a <code>Clone</code>-able iterator","One half of an iterator pair where both return the same …","An iterator over a incomplete tuple.","An iterator to iterate through all combinations in a <code>Clone</code>…","An iterator over all contiguous windows that produces …","An iterator that groups the items in tuples of a specific …","See <code>unfold</code> for more information.","An iterator adapter to filter out duplicate elements.","An iterator adapter to filter out duplicate elements.","An iterator adapter to apply a mutating function to each …","An iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …","An iterator adaptor that wraps each element in an <code>Position</code>.","See <code>multizip</code> for more information.","An iterator which iterates two other iterators …","An iterator which iterates two other iterators …","This is the generic way to perform any operation on a …roups elements from the <code>GroupingMap</code> source by key and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Groups elements from the <code>GroupingMap</code> source by key and …","","","Groups elements from the <code>GroupingMap</code> source by key and …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return a buffer with the produced items that was not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Split the <code>PutBack</code> into its parts.","Returns the length of a combination produced by this …","","","","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Returns the (current) length of the pool from which …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Works exactly like <code>.next()</code> with the only difference that …","Works exactly like the <code>peek</code> method in <code>std::iter::Peekable</code>","Returns a reference to the <code>nth</code> value without advancing the …","","","","","Groups elements from the <code>GroupingMap</code> source by key and …","Put back a single value to the front of the iterator.","Puts x in front of the iterator. The values are yielded in …","The boxed iterator.","Reset the peeking “cursor”","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Internal state that will be passed to the closure on the …","Groups elements from the <code>GroupingMap</code> source by key and …put back value <code>value</code> (builder method)","Implemented for homogeneous tuples of size up to 12."],"i":[4,17,0,17,0,0,16,30,0,0,16,2,4,30,16,15,0,0,15,15,16,0,0,2,4,30,0,2,100,100,0,2,2,2,2,2,4,2,2,2,2,4,0,100,100,2,30,4,15,16,17,2,30,4,15,16,17,4,100,0,0,100,100,2,4,15,16,17,2,2,4,15,16,17,0,2,100,2,100,100,100,100,0,100,0,100,2,100,100,100,100,100,100,2,2,0,100,100,100,100,2,2,2,0,2,4,15,16,17,0,100,2,2,2,2,2,2,2,2,100,100,2,2,100,100,100,100,2,4,2,2,4,15,16,17,0,2,100,100,100,100,100,2,100,100,100,2,2,30,4,15,16,17,100,4,4,2,4,0,100,100,0,100,0,100,2,2,30,4,4,15,16,17,100,100,100,100,2,16,17,2,2,15,0,4,17,2,4,2,4,0,0,0,100,100,0,100,0,100,2,2,4,2,4,2,2,2,2,2,4,100,2,4,100,100,2,4,0,0,100,100,0,100,0,100,100,100,100,0,100,0,101,100,0,2,2,100,2,4,100,2,0,2,100,100,0,102,100,100,2,100,100,100,100,100,100,100,100,100,100,100,0,100,0,0,0,4,0,0,0,2,2,2,4,2,4,2,2,2,100,2,0,100,100,100,100,100,100,100,100,0,100,100,100,2,4,15,16,17,2,0,100,100,2,30,4,15,16,17,2,30,4,15,16,17,100,100,100,2,30,4,15,16,17,0,100,100,2,2,100,100,100,0,0,100,100,103,104,105,103,104,105,103,106,107,108,109,110,108,111,112,113,114,114,115,116,117,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,71,60,78,35,22,37,44,98,94,12,99,95,56,61,67,68,70,88,62,46,47,71,9,8,77,87,79,36,69,86,24,23,6,43,42,50,49,63,65,66,96,72,73,75,74,83,52,97,93,81,80,13,85,84,90,91,64,60,78,35,22,37,44,98,94,12,99,95,56,61,67,68,70,88,62,46,47,71,9,8,77,87,79,36,69,86,24,23,6,43,42,50,49,63,65,66,96,72,73,75,74,83,52,97,93,81,80,13,85,84,90,91,64,60,22,37,56,61,68,70,88,62,46,47,71,9,8,77,87,79,36,69,86,24,23,6,43,42,50,49,63,65,66,72,73,75,74,83,52,93,81,80,85,84,90,91,64,60,22,37,56,68,70,88,62,46,47,71,9,8,77,87,79,36,69,86,24,23,6,43,42,50,49,63,65,66,72,73,75,74,83,52,93,81,80,85,84,90,91,64,35,36,86,50,61,68,62,71,85,84,94,95,60,78,35,22,37,56,61,67,68,70,62,46,47,71,9,8,77,87,79,36,69,86,24,23,6,6,43,42,42,42,42,42,42,42,42,42,50,49,63,65,66,96,72,73,75,74,83,52,97,93,81,80,13,85,84,90,91,64,35,71,9,36,86,24,24,24,24,24,24,24,24,24,24,50,49,96,50,60,78,35,22,37,44,98,94,12,99,95,56,61,67,68,70,88,62,46,47,71,9,8,77,87,79,36,69,86,24,23,6,43,42,50,49,63,65,66,96,72,73,75,74,83,52,97,93,81,80,13,85,84,90,91,64,64,64,64,64,64,64,64,64,64,64,64,64,60,78,35,22,37,44,98,94,12,99,95,56,61,67,68,70,88,62,46,47,71,9,8,77,87,79,36,69,86,24,23,6,43,42,50,49,63,65,66,96,72,73,75,74,83,52,97,93,81,80,13,85,84,90,91,64,81,60,78,35,22,37,44,98,94,12,99,95,56,61,67,68,70,88,62,46,47,71,9,8,77,87,79,36,69,86,24,23,6,49,63,65,66,96,72,73,73,75,74,83,52,97,93,81,80,13,85,84,90,91,64,71,22,61,62,71,50,50,50,50,50,50,50,50,50,22,60,78,35,22,37,98,94,99,95,56,61,67,68,70,88,62,46,47,71,9,8,77,87,79,36,69,86,24,24,24,24,24,24,24,24,24,24,23,6,49,63,65,66,96,72,73,75,74,83,52,97,93,81,80,13,85,84,90,91,64,64,64,64,64,64,64,64,64,64,64,64,37,69,86,24,24,24,24,24,24,24,24,24,24,65,73,75,85,84,91,64,64,64,64,64,64,64,64,64,64,64,64,61,71,63,66,66,71,63,66,72,50,71,72,73,63,60,78,35,37,56,61,67,68,70,88,62,46,47,71,9,77,87,36,69,86,24,24,24,24,24,24,24,24,24,24,6,49,63,65,66,96,72,73,75,74,52,97,93,85,84,90,91,64,64,64,64,64,64,64,64,64,64,64,64,83,50,60,22,37,56,68,70,88,62,46,47,71,9,8,77,87,79,36,69,86,24,23,6,43,42,50,49,63,65,66,72,73,75,74,83,52,93,81,80,85,84,90,91,64,6,43,42,60,78,35,22,37,44,98,94,12,99,95,56,61,67,68,70,88,62,46,47,71,9,8,77,87,79,36,69,86,24,23,6,43,42,50,49,63,65,66,96,72,73,75,74,83,52,97,93,81,80,13,85,84,90,91,64,60,78,35,22,37,44,98,94,12,99,95,56,61,67,68,70,88,62,46,47,71,9,8,77,87,79,36,69,86,24,23,6,43,42,50,49,63,65,66,96,72,73,75,74,83,52,97,93,81,80,13,85,84,90,91,64,60,78,35,22,37,44,98,94,12,99,95,56,61,67,68,70,88,62,46,47,71,9,8,77,87,79,36,69,86,24,23,6,43,42,50,49,63,65,66,96,72,73,75,74,83,52,97,93,81,80,13,85,84,90,91,64,71,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[2,1],[[],1],[[],1],[[],1],[2,1],[2,2],[2],[2,3],[2],[4,4],[2,2],[2],[2,3],[2],[4,4],[[]],[[],[[7,[5,6]]]],[[],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,5],[[],9],[[],10],0,[11,12],[[],13],[2,2],[[[4,[14,14]]],[[4,[14,14]]]],[[[15,[14]]],[[15,[14]]]],[[[16,[14]]],[[16,[14]]]],[[[17,[14]]],[[17,[14]]]],[[2,2]],[[]],[[]],[[]],[[]],[[]],[[],18],[[2,2],19],[[],20],[2],[[],5],[[],21],[11,22],[11,23],[[]],[[]],[[],24],[[],1],[2,11],[[],[[25,[11]]]],[[],[[25,[11]]]],[[],26],[[],27],[[],28],[[],29],[2],[2],[[],[[5,[30]]]],[11],[11],[[],31],[[],32],[2],[2],[2],[[],33],[[2,2],1],[[[4,[34,34]],4],1],[[[15,[34]],15],1],[[[16,[34]],16],1],[[[17,[34]],17],1],[[],1],[[],[[7,[6]]]],[[2,3]],[[2,3]],[2],[[[2,[7,7]]],[[7,[2]]]],[2],[[[2,[5,5]]],[[5,[2]]]],[[[2,[7,7]]],[[7,[2]]]],[2],[[],35],[[],36],[2,5],[2,5],[[],5],[[],5],[[],5],[[],37],[2,2],[4,4],[[2,38],[[7,[39]]]],[[2,38],[[7,[39]]]],[[[4,[40,40]],38],41],[[[15,[40]],38],41],[[[16,[40]],38],41],[[[17,[40]],38],41],[[]],[2],[[],5],[[],7],[[],5],[[],7],[[],17],[2],[[]],[3,42],[3,43],[[]],[7,2],[[]],[[]],[[]],[[]],[[]],[[],44],[4,1],[4,1],[2],[[[4,[45,45]]]],[[],46],[[],46],[[],47],[[],48],[[],48],[[],49],[[],49],[[]],[2,7],[[]],[[]],[4,[[5,[2]]]],[[]],[[]],[[]],[[],[[25,[21]]]],[[],[[25,[21]]]],[[],50],[[],51],[2],[16],[17],[2,2],[[]],[[[15,[14]]],5],0,[4,1],[17,1],[2,1],[4,1],[2,1],[4,1],[[],52],0,[3,53],[3,53],[11,54],[[],55],[[],55],[[],56],[[],56],[2,5],[2,5],[4,5],[2,2],[4,4],[2],[2],[2],[2,11],[2,2],[4,4],[[],57],[2,2],[4,4],[[],58],[[],58],[2,2],[4,4],[[],5],[[],59],[[],59],[[],60],[[],61],[[],61],[[],5],[[],15],[[],15],[[],15],[[],62],[[],63],[[],63],[[]],[[]],[[]],[[],64],[2,5],[2,5],[[],5],[[2,11],5],[4],[11,65],[[2,2],[[5,[19]]]],[[],11],[2],[[]],[[]],[[],66],[[],5],[[],67],[11,68],[2,[[5,[11]]]],[[],[[5,[11]]]],[[],[[5,[11]]]],[[],[[5,[11]]]],[[],[[5,[11]]]],[[],[[5,[11]]]],[[],[[5,[11]]]],[[],[[15,[11]]]],[[],[[15,[11]]]],[[],[[15,[11]]]],[[],69],[[],70],[[],7],[[],5],[[],71],[[],72],[[],73],[4],[[],74],[11,75],[[],76],[2,5],[2],[2,5],[4,5],[2,2],[4,4],[2],[2],[2],[[],11],[2],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[11,77],0,[[],5],[[],78],[[]],[[]],[[]],[[]],[[]],[[]],[[],53],0,[[],5],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],79],[[],80],[[],81],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],83],[[],84],[[],85],[2],[2],[[],86],[[],87],[[],88],[[],89],[[],90],[[],90],[[],91],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[50,25],[71,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[60,60],[22,22],[37,37],[56,56],[61,61],[68,68],[70,70],[88,88],[[[62,[14]]],[[62,[14]]]],[[[46,[14,14]]],[[46,[14,14]]]],[[[47,[14,14]]],[[47,[14,14]]]],[[[71,[14]]],[[71,[14]]]],[[[9,[14,14]]],[[9,[14,14]]]],[[[8,[14,14]]],[[8,[14,14]]]],[[[77,[14]]],[[77,[14]]]],[[[87,[14]]],[[87,[14]]]],[[[79,[14,14]]],[[79,[14,14]]]],[[[36,[14,14]]],[[36,[14,14]]]],[[[69,[14,14]]],[[69,[14,14]]]],[[[86,[14,14]]],[[86,[14,14]]]],[24,24],[[[23,[14]]],[[23,[14]]]],[[[6,[14]]],[[6,[14]]]],[[[43,[14,14]]],[[43,[14,14]]]],[[[42,[14]]],[[42,[14]]]],[[[50,[14]]],[[50,[14]]]],[[[49,[14,14]]],[[49,[14,14]]]],[[[63,[14]]],[[63,[14]]]],[[[65,[14,14]]],[[65,[14,14]]]],[[[66,[14]]],[[66,[14]]]],[[[72,[[0,[14,92]]]]],[[72,[[0,[14,92]]]]]],[73,73],[[[75,[14]]],[[75,[14]]]],[[[74,[14]]],[[74,[14]]]],[[[83,[14,14]]],[[83,[14,14]]]],[[[52,[14,14]]],[[52,[14,14]]]],[[[93,[14]]],[[93,[14]]]],[[[81,[14,14]]],[[81,[14,14]]]],[[[80,[14,14]]],[[80,[14,14]]]],[[[85,[[0,[14,92]],14,14]]],[[85,[[0,[14,92]],14,14]]]],[[[84,[[0,[14,92]]]]],[[84,[[0,[14,92]]]]]],[[[90,[14,14]]],[[90,[14,14]]]],[[[91,[14,14]]],[[91,[14,14]]]],[[[64,[14]]],[[64,[14]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35],[36],[86],[50,25],[61,11],[68,11],[62,11],[71,11],[85,11],[84,11],[94],[95],[[60,38],41],[[78,38],41],[[35,38],41],[[22,38],41],[[37,38],41],[[56,38],41],[[61,38],41],[[67,38],41],[[68,38],41],[[70,38],41],[[62,38],41],[[[46,[40,40]],38],41],[[[47,[40,40]],38],41],[[[71,[40]],38],41],[[[9,[40,40]],38],41],[[8,38],41],[[[77,[40]],38],41],[[[87,[40]],38],41],[[[79,[40,40]],38],41],[[36,38],41],[[69,38],41],[[86,38],41],[[[24,[40,40]],38],41],[[23,38],41],[[6,38],41],[[6,38],41],[[43,38],41],[[42,38],41],[[42,38],41],[[42,38],41],[[42,38],41],[[42,38],41],[[42,38],41],[[42,38],41],[[42,38],41],[[42,38],41],[[[50,[40]],38],41],[[[49,[40,40]],38],41],[[[63,[40]],38],41],[[65,38],41],[[[66,[40]],38],41],[[[96,[40,40]],38],41],[[[72,[[0,[40,92]]]],38],41],[[[73,[40]],38],41],[[[75,[40]],38],41],[[74,38],41],[[83,38],41],[[52,38],41],[[[97,[40]],38],41],[[[93,[40]],38],41],[[[81,[40,40]],38],41],[[[80,[40,40]],38],41],[[[13,[40,[0,[40,14]]]],38],41],[[85,38],41],[[84,38],41],[[[90,[40,40]],38],41],[[[91,[40,40]],38],41],[[[64,[40]],38],41],[35],[71],[9],[36],[86],[24],[24],[24],[24],[24],[24],[24],[24],[24],[24],[50,25],[49],[96],[50,25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],64],[[],64],[[],64],[[]],[[],64],[[],64],[[],64],[[],64],[[],64],[[],64],[[],64],[[],64],[[],64],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[81,93],[[]],[[]],[[]],[[]],[[]],[44],[[]],[[]],[12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[73,73],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[71],[[[22,[92]]],11],[61,5],[62,5],[71,5],[50,25],[50,25],[50,25],[50,25],[50,25],[50,25],[50,[[25,[15]]]],[50,[[25,[15]]]],[50,[[25,[15]]]],[[[22,[92]]],11],[60,5],[78,5],[35,5],[22,5],[37,5],[98,5],[94,5],[99,5],[95,5],[56,5],[61,5],[67,5],[68,5],[70,5],[[[88,[92]]],5],[62,5],[46,5],[47,5],[71,5],[9,5],[8,5],[77,5],[87,5],[79,5],[36,5],[69,5],[86,5],[24,5],[24,5],[24,5],[24,5],[24,5],[24,5],[24,5],[24,5],[24,5],[24,5],[23,5],[6,5],[49,5],[63,5],[65,5],[66,5],[96,5],[[[72,[92]]],5],[73,5],[75,5],[74,5],[83,5],[52,5],[97,5],[93,5],[81,5],[80,5],[13,5],[85,5],[84,5],[90,5],[91,5],[64,5],[64,5],[64,5],[64,5],[64,5],[64,5],[64,5],[64,5],[64,5],[64,5],[64,5],[64,5],[37,5],[69,5],[86,5],[24,5],[24,5],[24,5],[24,5],[24,5],[24,5],[24,5],[24,5],[24,5],[24,5],[65,5],[73,5],[75,5],[85,5],[84,5],[91,5],[64,5],[64,5],[64,5],[64,5],[64,5],[64,5],[64,5],[64,5],[64,5],[64,5],[64,5],[64,5],[[61,11],5],[[71,11],5],[[[63,[92]]],5],[66,5],[[66,11],5],[71,5],[63,5],[66,5],[72,5],[50,25],[71],[[[72,[92]]]],0,[63],[60],[78],[35],[37],[56],[61],[67],[68],[70],[[[88,[92]]]],[62],[46],[47],[71],[9],[77],[87],[36],[69],[86],[24],[24],[24],[24],[24],[24],[24],[24],[24],[24],[6],[49],[63],[65],[66],[96],[[[72,[92]]]],[73],[75],[74],[52],[97],[93],[85],[84],[90],[91],[64],[64],[64],[64],[64],[64],[64],[64],[64],[64],[64],[64],0,[50,25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],53],[[],53],[[],53],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[[],82],[71,71],0],"p":[[15,"bool"],[4,"Either"],[15,"str"],[4,"EitherOrBoth"],[4,"Option"],[3,"ExactlyOneError"],[4,"Result"],[3,"Batching"],[3,"Product"],[3,"Chain"],[15,"usize"],[3,"IntoChunks"],[3,"CircularTupleWindows"],[8,"Clone"],[4,"MinMaxResult"],[4,"Position"],[4,"FoldWhile"],[3,"Cloned"],[4,"Ordering"],[6,"Coalesce"],[3,"Vec"],[3,"Combinations"],[3,"CombinationsWithReplacement"],[3,"ConsTuples"],[3,"HashMap"],[6,"Dedup"],[6,"DedupBy"],[6,"DedupByWithCount"],[6,"DedupWithCount"],[4,"Diff"],[6,"Duplicates"],[6,"DuplicatesBy"],[3,"Enumerate"],[8,"PartialEq"],[3,"FilterMapOk"],[3,"FilterOk"],[3,"FlattenOk"],[3,"Formatter"],[3,"Error"],[8,"Debug"],[6,"Result"],[3,"Format"],[3,"FormatWith"],[3,"GroupBy"],[8,"Hash"],[3,"Interleave"],[3,"InterleaveShortest"],[6,"Intersperse"],[3,"IntersperseWith"],[3,"GroupingMap"],[6,"GroupingMapBy"],[3,"Iterate"],[3,"String"],[3,"IntoIter"],[6,"KMerge"],[3,"KMergeBy"],[6,"MapInto"],[6,"MapOk"],[6,"Merge"],[3,"MergeBy"],[3,"MergeJoinBy"],[3,"MultiProduct"],[3,"MultiPeek"],[3,"Zip"],[3,"PadUsing"],[3,"PeekNth"],[3,"PeekingTakeWhile"],[3,"Permutations"],[3,"Positions"],[3,"Powerset"],[3,"PutBack"],[3,"PutBackN"],[3,"RcIter"],[3,"RepeatCall"],[3,"RepeatN"],[3,"Rev"],[3,"Step"],[3,"TakeWhileRef"],[3,"TupleCombinations"],[3,"TupleWindows"],[3,"Tuples"],[3,"TypeId"],[3,"Unfold"],[3,"Unique"],[3,"UniqueBy"],[3,"Update"],[3,"WhileSome"],[3,"WithPosition"],[3,"Zip"],[3,"ZipEq"],[3,"ZipLongest"],[8,"Iterator"],[3,"TupleBuffer"],[3,"Group"],[3,"Chunk"],[3,"ProcessResults"],[3,"Tee"],[3,"Groups"],[3,"Chunks"],[8,"Itertools"],[8,"MultiUnzip"],[8,"PeekingNext"],[13,"FirstMismatch"],[13,"Shorter"],[13,"Longer"],[13,"Left"],[13,"Right"],[13,"Both"],[13,"Left"],[13,"Right"],[13,"Continue"],[13,"Done"],[13,"OneElement"],[13,"MinMax"],[13,"First"],[13,"Middle"],[13,"Last"],[13,"Only"]]},\
"keccak":{"doc":"Keccak sponge function.","t":[18,8,5,5,5,5,5,10,10,14,14],"n":["KECCAK_F_ROUND_COUNT","LaneSize","f1600","f200","f400","f800","keccak_p","rotate_left","truncate_rc","unroll24","unroll5"],"q":["keccak","","","","","","","","","",""],"d":["","","Keccak-f sponge function","Keccak-f sponge function","Keccak-f sponge function","Keccak-f sponge function","Generic Keccak-p sponge function","","","",""],"i":[4,0,0,0,0,0,0,4,4,0,0],"f":[0,0,[[]],[[]],[[]],[[]],[1],[2],[3],0,0],"p":[[15,"usize"],[15,"u32"],[15,"u64"],[8,"LaneSize"]]},\
"libc":{"doc":"libc - Raw FFI bindings to platforms’ system libraries","tn":["ABDAY_1","ABDAY_2","ABDAY_3","ABDAY_4","ABDAY_5","ABDAY_6","ABDAY_7","ABMON_1","ABMON_10","ABMON_11","ABMON_12","ABMON_2","ABMON_3","ABMON_4","ABMON_5","ABMON_6","ABMON_7","ABMON_8","ABMON_9","ACCOUNTING","AF_APPLETALK","AF_CCITT","AF_CHAOS","AF_CNT","AF_COIP","AF_DATAKIT","AF_DECnet","AF_DLI","AF_E164","AF_ECMA","AF_HYLINK","AF_IMPLINK","AF_INET","AF_INET6","AF_IPX","AF_ISDN","AF_ISO","AF_LAT","AF_LINK","AF_LOCAL","AF_NATM","AF_NETBIOS","AF_NS","AF_OSI","AF_PPP","AF_PUP","AF_ROUTE","AF_SIP","AF_SNA","AF_SYSTEM","AF_SYS_CONTROL","AF_UNIX","AF_UNSPEC","AIO_ALLDONE","AIO_CANCELED","AIO_LISTIO_MAX","AIO_NOTCANCELED","AI_ADDRCONFIG","AI_ALL","AI_CANONNAME","AI_DEFAULT","AI_MASK","AI_NUMERICHOST","AI_NUMERICSERV","AI_PASSIVE","AI_UNUSABLE","AI_V4MAPPED","AI_V4MAPPED_CFG","ALTWERASE","ALT_DIGITS","AM_STR","ARPOP_REPLY","ARPOP_REQUEST","ATF_COM","ATF_PERM","ATF_PUBL","ATF_USETRAILERS","AT_EACCESS","AT_FDCWD","AT_REMOVEDIR","AT_SYMLINK_FOLLOW","AT_SYMLINK_NOFOLLOW","B0","B110","B115200","B1200","B134","B14400","B150","B1800","B19200","B200","B230400","B2400","B28800","B300","B38400","B4800","B50","B57600","B600","B7200","B75","B76800","B9600","BIOCFLUSH","BIOCGBLEN","BIOCGDLT","BIOCGDLTLIST","BIOCGETIF","BIOCGHDRCMPLT","BIOCGRSIG","BIOCGRTIMEOUT","BIOCGSEESENT","BIOCGSTATS","BIOCIMMEDIATE","BIOCPROMISC","BIOCSBLEN","BIOCSDLT","BIOCSETF","BIOCSETFNR","BIOCSETIF","BIOCSHDRCMPLT","BIOCSRSIG","BIOCSRTIMEOUT","BIOCSSEESENT","BIOCVERSION","BOOT_TIME","BPF_ALIGNMENT","BRKINT","BS0","BS1","BSDLY","BUFSIZ","CCCryptorStatus","CCRNGStatus","CCRandomGenerateBytes","CCStatus","CIGNORE","CLD_CONTINUED","CLD_DUMPED","CLD_EXITED","CLD_KILLED","CLD_STOPPED","CLD_TRAPPED","CLOCAL","CLOCK_MONOTONIC","CLOCK_PROCESS_CPUTIME_ID","CLOCK_REALTIME","CLOCK_THREAD_CPUTIME_ID","CLOCK_UPTIME_RAW","CMSG_DATA","CMSG_FIRSTHDR","CMSG_LEN","CMSG_NXTHDR","CMSG_SPACE","CODESET","CONNECT_DATA_AUTHENTICATED","CONNECT_DATA_IDEMPOTENT","CONNECT_RESUME_ON_READ_WRITE","COPYFILE_ACL","COPYFILE_CHECK","COPYFILE_CLONE","COPYFILE_CLONE_FORCE","COPYFILE_CONTINUE","COPYFILE_COPY_DATA","COPYFILE_COPY_XATTR","COPYFILE_DATA","COPYFILE_DATA_SPARSE","COPYFILE_ERR","COPYFILE_EXCL","COPYFILE_FINISH","COPYFILE_METADATA","COPYFILE_MOVE","COPYFILE_NOFOLLOW","COPYFILE_NOFOLLOW_DST","COPYFILE_NOFOLLOW_SRC","COPYFILE_PACK","COPYFILE_PRESERVE_DST_TRACKED","COPYFILE_PROGRESS","COPYFILE_QUIT","COPYFILE_RECURSE_DIR","COPYFILE_RECURSE_DIR_CLEANUP","COPYFILE_RECURSE_ERROR","COPYFILE_RECURSE_FILE","COPYFILE_RECURSIVE","COPYFILE_RUN_IN_PLACE","COPYFILE_SECURITY","COPYFILE_SKIP","COPYFILE_START","COPYFILE_STAT","COPYFILE_UNLINK","COPYFILE_UNPACK","COPYFILE_VERBOSE","COPYFILE_XATTR","CPU_STATE_IDLE","CPU_STATE_MAX","CPU_STATE_NICE","CPU_STATE_SYSTEM","CPU_STATE_USER","CR0","CR1","CR2","CR3","CRDLY","CREAD","CRNCYSTR","CRTSCTS","CS5","CS6","CS7","CS8","CSIZE","CSTOPB","CTLFLAG_ANYBODY","CTLFLAG_KERN","CTLFLAG_LOCKED","CTLFLAG_MASKED","CTLFLAG_NOAUTO","CTLFLAG_NOLOCK","CTLFLAG_OID2","CTLFLAG_RD","CTLFLAG_RW","CTLFLAG_SECURE","CTLFLAG_WR","CTLTYPE","CTLTYPE_INT","CTLTYPE_NODE","CTLTYPE_OPAQUE","CTLTYPE_QUAD","CTLTYPE_STRING","CTLTYPE_STRUCT","CTL_DEBUG","CTL_DEBUG_MAXID","CTL_DEBUG_NAME","CTL_DEBUG_VALUE","CTL_HW","CTL_KERN","CTL_MACHDEP","CTL_MAXID","CTL_NET","CTL_UNSPEC","CTL_USER","CTL_VFS","CTL_VM","DAY_1","DAY_2","DAY_3","DAY_4","DAY_5","DAY_6","DAY_7","DEAD_PROCESS","DIR","DLT_ARCNET","DLT_ATM_RFC1483","DLT_AX25","DLT_CHAOS","DLT_EN10MB","DLT_EN3MB","DLT_FDDI","DLT_IEEE802","DLT_LOOP","DLT_NULL","DLT_PPP","DLT_PRONET","DLT_RAW","DLT_SLIP","DT_BLK","DT_CHR","DT_DIR","DT_FIFO","DT_LNK","DT_REG","DT_SOCK","DT_UNKNOWN","D_FMT","D_MD_ORDER","D_T_FMT","Dl_info","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EAFNOSUPPORT","EAGAIN","EAI_AGAIN","EAI_BADFLAGS","EAI_FAIL","EAI_FAMILY","EAI_MEMORY","EAI_NODATA","EAI_NONAME","EAI_OVERFLOW","EAI_SERVICE","EAI_SOCKTYPE","EAI_SYSTEM","EALREADY","EAUTH","EBADARCH","EBADEXEC","EBADF","EBADMACHO","EBADMSG","EBADRPC","EBUSY","ECANCELED","ECHILD","ECHO","ECHOCTL","ECHOE","ECHOK","ECHOKE","ECHONL","ECHOPRT","ECONNABORTED","ECONNREFUSED","ECONNRESET","EDEADLK","EDESTADDRREQ","EDEVERR","EDOM","EDQUOT","EEXIST","EFAULT","EFBIG","EFTYPE","EHOSTDOWN","EHOSTUNREACH","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","ELAST","ELOOP","EMFILE","EMLINK","EMPTY","EMSGSIZE","EMULTIHOP","ENAMETOOLONG","ENEEDAUTH","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOATTR","ENOBUFS","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOLCK","ENOLINK","ENOMEM","ENOMSG","ENOPOLICY","ENOPROTOOPT","ENOSPC","ENOSR","ENOSTR","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTRECOVERABLE","ENOTSOCK","ENOTSUP","ENOTTY","ENXIO","EOF","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPFNOSUPPORT","EPIPE","EPROCLIM","EPROCUNAVAIL","EPROGMISMATCH","EPROGUNAVAIL","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","EPWROFF","EQFULL","ERA","ERANGE","ERA_D_FMT","ERA_D_T_FMT","ERA_T_FMT","EREMOTE","EROFS","ERPCMISMATCH","ESHLIBVERS","ESHUTDOWN","ESOCKTNOSUPPORT","ESPIPE","ESRCH","ESTALE","ETIME","ETIMEDOUT","ETOOMANYREFS","ETXTBSY","EUSERS","EVFILT_AIO","EVFILT_FS","EVFILT_MACHPORT","EVFILT_PROC","EVFILT_READ","EVFILT_SIGNAL","EVFILT_TIMER","EVFILT_USER","EVFILT_VM","EVFILT_VNODE","EVFILT_WRITE","EV_ADD","EV_CLEAR","EV_DELETE","EV_DISABLE","EV_DISPATCH","EV_ENABLE","EV_EOF","EV_ERROR","EV_FLAG0","EV_FLAG1","EV_ONESHOT","EV_OOBAND","EV_POLL","EV_RECEIPT","EV_SYSFLAGS","EWOULDBLOCK","EXDEV","EXIT_FAILURE","EXIT_SUCCESS","EXTA","EXTB","EXTPROC","FD_CLOEXEC","FD_CLR","FD_ISSET","FD_SET","FD_SETSIZE","FD_ZERO","FF0","FF1","FFDLY","FILE","FILENAME_MAX","FIOASYNC","FIOCLEX","FIODTYPE","FIOGETOWN","FIONBIO","FIONCLEX","FIONREAD","FIOSETOWN","FLUSHO","FOPEN_MAX","F_ALLOCATEALL","F_ALLOCATECONTIG","F_BARRIERFSYNC","F_DUPFD","F_DUPFD_CLOEXEC","F_FREEZE_FS","F_FULLFSYNC","F_GETFD","F_GETFL","F_GETLK","F_GETOWN","F_GETPATH","F_GETPATH_NOFIRMLINK","F_GLOBAL_NOCACHE","F_LOCK","F_LOG2PHYS","F_LOG2PHYS_EXT","F_NOCACHE","F_NODIRECT","F_OK","F_PEOFPOSMODE","F_PREALLOCATE","F_RDADVISE","F_RDAHEAD","F_RDLCK","F_SETFD","F_SETFL","F_SETLK","F_SETLKW","F_SETOWN","F_TEST","F_THAW_FS","F_TLOCK","F_ULOCK","F_UNLCK","F_VOLPOSMODE","F_WRLCK","GETALL","GETNCNT","GETPID","GETVAL","GETZCNT","GLOB_ABORTED","GLOB_APPEND","GLOB_DOOFFS","GLOB_ERR","GLOB_MARK","GLOB_NOCHECK","GLOB_NOESCAPE","GLOB_NOMATCH","GLOB_NOSORT","GLOB_NOSPACE","GRPQUOTA","HOST_CPU_LOAD_INFO","HOST_CPU_LOAD_INFO_COUNT","HOST_EXPIRED_TASK_INFO","HOST_EXTMOD_INFO64","HOST_LOAD_INFO","HOST_VM_INFO","HOST_VM_INFO64","HOST_VM_INFO64_COUNT","HUPCL","HW_AVAILCPU","HW_BUS_FREQ","HW_BYTEORDER","HW_CACHELINE","HW_CPU_FREQ","HW_DISKNAMES","HW_DISKSTATS","HW_EPOCH","HW_FLOATINGPT","HW_L1DCACHESIZE","HW_L1ICACHESIZE","HW_L2CACHESIZE","HW_L2SETTINGS","HW_L3CACHESIZE","HW_L3SETTINGS","HW_MACHINE","HW_MACHINE_ARCH","HW_MAXID","HW_MEMSIZE","HW_MODEL","HW_NCPU","HW_PAGESIZE","HW_PHYSMEM","HW_PRODUCT","HW_TARGET","HW_TB_FREQ","HW_USERMEM","HW_VECTORUNIT","ICANON","ICRNL","IEXTEN","IFF_ALLMULTI","IFF_ALTPHYS","IFF_BROADCAST","IFF_DEBUG","IFF_LINK0","IFF_LINK1","IFF_LINK2","IFF_LOOPBACK","IFF_MULTICAST","IFF_NOARP","IFF_NOTRAILERS","IFF_OACTIVE","IFF_POINTOPOINT","IFF_PROMISC","IFF_RUNNING","IFF_SIMPLEX","IFF_UP","IFNAMSIZ","IF_NAMESIZE","IGNBRK","IGNCR","IGNPAR","IMAXBEL","INADDR_ANY","INADDR_BROADCAST","INADDR_LOOPBACK","INADDR_NONE","INIT_PROCESS","INLCR","INPCK","INT_MAX","INT_MIN","IOV_MAX","IPC_CREAT","IPC_EXCL","IPC_M","IPC_NOWAIT","IPC_PRIVATE","IPC_R","IPC_RMID","IPC_SET","IPC_STAT","IPC_W","IPPROTO_3PC","IPPROTO_ADFS","IPPROTO_AH","IPPROTO_AHIP","IPPROTO_APES","IPPROTO_ARGUS","IPPROTO_AX25","IPPROTO_BHA","IPPROTO_BLT","IPPROTO_BRSATMON","IPPROTO_CFTP","IPPROTO_CHAOS","IPPROTO_CMTP","IPPROTO_CPHB","IPPROTO_CPNX","IPPROTO_DDP","IPPROTO_DGP","IPPROTO_DIVERT","IPPROTO_DONE","IPPROTO_DSTOPTS","IPPROTO_EGP","IPPROTO_EMCON","IPPROTO_ENCAP","IPPROTO_EON","IPPROTO_ESP","IPPROTO_ETHERIP","IPPROTO_FRAGMENT","IPPROTO_GGP","IPPROTO_GMTP","IPPROTO_GRE","IPPROTO_HELLO","IPPROTO_HMP","IPPROTO_HOPOPTS","IPPROTO_ICMP","IPPROTO_ICMPV6","IPPROTO_IDP","IPPROTO_IDPR","IPPROTO_IDRP","IPPROTO_IGMP","IPPROTO_IGP","IPPROTO_IGRP","IPPROTO_IL","IPPROTO_INLSP","IPPROTO_INP","IPPROTO_IP","IPPROTO_IPCOMP","IPPROTO_IPCV","IPPROTO_IPEIP","IPPROTO_IPIP","IPPROTO_IPPC","IPPROTO_IPV6","IPPROTO_IRTP","IPPROTO_KRYPTOLAN","IPPROTO_LARP","IPPROTO_LEAF1","IPPROTO_LEAF2","IPPROTO_MAX","IPPROTO_MEAS","IPPROTO_MHRP","IPPROTO_MICP","IPPROTO_MTP","IPPROTO_MUX","IPPROTO_ND","IPPROTO_NHRP","IPPROTO_NONE","IPPROTO_NSP","IPPROTO_NVPII","IPPROTO_OSPFIGP","IPPROTO_PGM","IPPROTO_PIGP","IPPROTO_PIM","IPPROTO_PRM","IPPROTO_PUP","IPPROTO_PVP","IPPROTO_RAW","IPPROTO_RCCMON","IPPROTO_RDP","IPPROTO_ROUTING","IPPROTO_RSVP","IPPROTO_RVD","IPPROTO_SATEXPAK","IPPROTO_SATMON","IPPROTO_SCCSP","IPPROTO_SCTP","IPPROTO_SDRP","IPPROTO_SEP","IPPROTO_SRPC","IPPROTO_ST","IPPROTO_SVMTP","IPPROTO_SWIPE","IPPROTO_TCF","IPPROTO_TCP","IPPROTO_TP","IPPROTO_TPXX","IPPROTO_TRUNK1","IPPROTO_TRUNK2","IPPROTO_TTP","IPPROTO_UDP","IPPROTO_VINES","IPPROTO_VISA","IPPROTO_VMTP","IPPROTO_WBEXPAK","IPPROTO_WBMON","IPPROTO_WSN","IPPROTO_XNET","IPPROTO_XTP","IPTOS_ECN_CE","IPTOS_ECN_ECT0","IPTOS_ECN_ECT1","IPTOS_ECN_MASK","IPTOS_ECN_NOTECT","IPV6_CHECKSUM","IPV6_DONTFRAG","IPV6_HOPLIMIT","IPV6_JOIN_GROUP","IPV6_LEAVE_GROUP","IPV6_MULTICAST_HOPS","IPV6_MULTICAST_IF","IPV6_MULTICAST_LOOP","IPV6_PKTINFO","IPV6_RECVPKTINFO","IPV6_RECVTCLASS","IPV6_TCLASS","IPV6_UNICAST_HOPS","IPV6_V6ONLY","IP_ADD_MEMBERSHIP","IP_ADD_SOURCE_MEMBERSHIP","IP_BLOCK_SOURCE","IP_BOUND_IF","IP_DONTFRAG","IP_DROP_MEMBERSHIP","IP_DROP_SOURCE_MEMBERSHIP","IP_HDRINCL","IP_MULTICAST_IF","IP_MULTICAST_LOOP","IP_MULTICAST_TTL","IP_PKTINFO","IP_RECVDSTADDR","IP_RECVIF","IP_RECVTOS","IP_TOS","IP_TTL","IP_UNBLOCK_SOURCE","ISIG","ISTRIP","ITIMER_PROF","ITIMER_REAL","ITIMER_VIRTUAL","IUTF8","IXANY","IXOFF","IXON","KERN_ABORTED","KERN_AFFINITY","KERN_AIOMAX","KERN_AIOPROCMAX","KERN_AIOTHREADS","KERN_ALREADY_IN_SET","KERN_ALREADY_WAITING","KERN_ARGMAX","KERN_BOOTFILE","KERN_BOOTTIME","KERN_CHECKOPENEVT","KERN_CLASSIC","KERN_CLASSICHANDLER","KERN_CLOCKRATE","KERN_CODESIGN_ERROR","KERN_COREDUMP","KERN_COREFILE","KERN_DEFAULT_SET","KERN_DOMAINNAME","KERN_DUMMY","KERN_DUMPDEV","KERN_EXCEPTION_PROTECTED","KERN_EXEC","KERN_FAILURE","KERN_FILE","KERN_HOSTID","KERN_HOSTNAME","KERN_INSUFFICIENT_BUFFER_SIZE","KERN_INVALID_ADDRESS","KERN_INVALID_ARGUMENT","KERN_INVALID_CAPABILITY","KERN_INVALID_HOST","KERN_INVALID_LEDGER","KERN_INVALID_MEMORY_CONTROL","KERN_INVALID_NAME","KERN_INVALID_OBJECT","KERN_INVALID_POLICY","KERN_INVALID_PROCESSOR_SET","KERN_INVALID_RIGHT","KERN_INVALID_SECURITY","KERN_INVALID_TASK","KERN_INVALID_VALUE","KERN_IPC","KERN_JOB_CONTROL","KERN_KDBUFWAIT","KERN_KDCPUMAP","KERN_KDDFLAGS","KERN_KDEBUG","KERN_KDEFLAGS","KERN_KDENABLE","KERN_KDGETBUF","KERN_KDGETENTROPY","KERN_KDGETREG","KERN_KDPIDEX","KERN_KDPIDTR","KERN_KDREADCURTHRMAP","KERN_KDREADTR","KERN_KDREMOVE","KERN_KDSETBUF","KERN_KDSETREG","KERN_KDSETRTCDEC","KERN_KDSETUP","KERN_KDSET_TYPEFILTER","KERN_KDTHRMAP","KERN_KDWRITEMAP","KERN_KDWRITETR","KERN_LOCK_OWNED","KERN_LOCK_OWNED_SELF","KERN_LOCK_SET_DESTROYED","KERN_LOCK_UNSTABLE","KERN_LOGSIGEXIT","KERN_LOW_PRI_DELAY","KERN_LOW_PRI_WINDOW","KERN_MAXFILES","KERN_MAXFILESPERPROC","KERN_MAXID","KERN_MAXPARTITIONS","KERN_MAXPROC","KERN_MAXPROCPERUID","KERN_MAXVNODES","KERN_MEMORY_DATA_MOVED","KERN_MEMORY_ERROR","KERN_MEMORY_FAILURE","KERN_MEMORY_PRESENT","KERN_MEMORY_RESTART_COPY","KERN_NAME_EXISTS","KERN_NETBOOT","KERN_NGROUPS","KERN_NISDOMAINNAME","KERN_NODE_DOWN","KERN_NOT_DEPRESSED","KERN_NOT_IN_SET","KERN_NOT_RECEIVER","KERN_NOT_SUPPORTED","KERN_NOT_WAITING","KERN_NO_ACCESS","KERN_NO_SPACE","KERN_NTP_PLL","KERN_NX_PROTECTION","KERN_OPENEVT_PROC","KERN_OPERATION_TIMED_OUT","KERN_OSRELDATE","KERN_OSRELEASE","KERN_OSREV","KERN_OSTYPE","KERN_OSVERSION","KERN_POLICY_LIMIT","KERN_POLICY_STATIC","KERN_POSIX","KERN_POSIX1","KERN_PROC","KERN_PROCARGS","KERN_PROCARGS2","KERN_PROCDELAYTERM","KERN_PROCNAME","KERN_PROC_ALL","KERN_PROC_LCID","KERN_PROC_PGRP","KERN_PROC_PID","KERN_PROC_RUID","KERN_PROC_SESSION","KERN_PROC_TTY","KERN_PROC_UID","KERN_PROF","KERN_PROTECTION_FAILURE","KERN_PS_STRINGS","KERN_RAGEVNODE","KERN_RAGE_PROC","KERN_RAGE_THREAD","KERN_RESOURCE_SHORTAGE","KERN_RIGHT_EXISTS","KERN_RPC_CONTINUE_ORPHAN","KERN_RPC_SERVER_TERMINATED","KERN_RPC_TERMINATE_ORPHAN","KERN_SAFEBOOT","KERN_SAVED_IDS","KERN_SECURELVL","KERN_SEMAPHORE_DESTROYED","KERN_SHREG_PRIVATIZABLE","KERN_SPECULATIVE_READS","KERN_SUCCESS","KERN_SUGID_COREDUMP","KERN_SYMFILE","KERN_SYSV","KERN_TERMINATED","KERN_TFP","KERN_TFP_POLICY","KERN_TFP_POLICY_DEFAULT","KERN_TFP_POLICY_DENY","KERN_THALTSTACK","KERN_THREADNAME","KERN_TRANSLATE","KERN_TTY","KERN_UNOPENEVT_PROC","KERN_UNRAGE_PROC","KERN_UNRAGE_THREAD","KERN_UPDATEINTERVAL","KERN_UREFS_OVERFLOW","KERN_USRSTACK32","KERN_USRSTACK64","KERN_VERSION","KERN_VNODE","KIPC_MAXSOCKBUF","KIPC_MAX_DATALEN","KIPC_MAX_HDR","KIPC_MAX_LINKHDR","KIPC_MAX_PROTOHDR","KIPC_MBSTAT","KIPC_NMBCLUSTERS","KIPC_SOCKBUF_WASTE","KIPC_SOMAXCONN","KIPC_SOQLIMITCOMPAT","LC_ALL","LC_ALL_MASK","LC_COLLATE","LC_COLLATE_MASK","LC_CTYPE","LC_CTYPE_MASK","LC_MESSAGES","LC_MESSAGES_MASK","LC_MONETARY","LC_MONETARY_MASK","LC_NUMERIC","LC_NUMERIC_MASK","LC_SEGMENT","LC_SEGMENT_64","LC_TIME","LC_TIME_MASK","LIO_NOP","LIO_NOWAIT","LIO_READ","LIO_WAIT","LIO_WRITE","LOCAL_PEERCRED","LOCAL_PEEREPID","LOCAL_PEEREUUID","LOCAL_PEERPID","LOCAL_PEERUUID","LOCK_EX","LOCK_NB","LOCK_SH","LOCK_UN","LOGIN_PROCESS","LOG_ALERT","LOG_AUTH","LOG_AUTHPRIV","LOG_CONS","LOG_CRIT","LOG_CRON","LOG_DAEMON","LOG_DEBUG","LOG_EMERG","LOG_ERR","LOG_FACMASK","LOG_FTP","LOG_INFO","LOG_INSTALL","LOG_KERN","LOG_LAUNCHD","LOG_LOCAL0","LOG_LOCAL1","LOG_LOCAL2","LOG_LOCAL3","LOG_LOCAL4","LOG_LOCAL5","LOG_LOCAL6","LOG_LOCAL7","LOG_LPR","LOG_MAIL","LOG_NDELAY","LOG_NETINFO","LOG_NEWS","LOG_NFACILITIES","LOG_NOTICE","LOG_NOWAIT","LOG_ODELAY","LOG_PERROR","LOG_PID","LOG_PRIMASK","LOG_RAS","LOG_REMOTEAUTH","LOG_SYSLOG","LOG_USER","LOG_UUCP","LOG_WARNING","L_tmpnam","MACH_PORT_NULL","MACH_TASK_BASIC_INFO","MACH_TASK_BASIC_INFO_COUNT","MADV_CAN_REUSE","MADV_DONTNEED","MADV_FREE","MADV_FREE_REUSABLE","MADV_FREE_REUSE","MADV_NORMAL","MADV_RANDOM","MADV_SEQUENTIAL","MADV_WILLNEED","MADV_ZERO_WIRED_PAGES","MAP_ANON","MAP_ANONYMOUS","MAP_COPY","MAP_FAILED","MAP_FILE","MAP_FIXED","MAP_HASSEMAPHORE","MAP_JIT","MAP_NOCACHE","MAP_NOEXTEND","MAP_NORESERVE","MAP_PRIVATE","MAP_RENAME","MAP_SHARED","MAXCOMLEN","MAXFREQ","MAXPATHLEN","MAXPHASE","MAXSEC","MAXTC","MAXTHREADNAMESIZE","MCL_CURRENT","MCL_FUTURE","MDMBUF","MEMORY_OBJECT_NULL","MH_MAGIC","MH_MAGIC_64","MINCORE_INCORE","MINCORE_MODIFIED","MINCORE_MODIFIED_OTHER","MINCORE_REFERENCED","MINCORE_REFERENCED_OTHER","MINSEC","MINSIGSTKSZ","MNT_ASYNC","MNT_AUTOMOUNTED","MNT_CPROTECT","MNT_DEFWRITE","MNT_DONTBROWSE","MNT_DOVOLFS","MNT_EXPORTED","MNT_FORCE","MNT_IGNORE_OWNERSHIP","MNT_JOURNALED","MNT_LOCAL","MNT_MULTILABEL","MNT_NOATIME","MNT_NOBLOCK","MNT_NODEV","MNT_NOEXEC","MNT_NOSUID","MNT_NOUSERXATTR","MNT_NOWAIT","MNT_QUARANTINE","MNT_QUOTA","MNT_RDONLY","MNT_RELOAD","MNT_ROOTFS","MNT_SNAPSHOT","MNT_SYNCHRONOUS","MNT_UNION","MNT_UPDATE","MNT_WAIT","MOD_CLKA","MOD_CLKB","MOD_ESTERROR","MOD_FREQUENCY","MOD_MAXERROR","MOD_MICRO","MOD_NANO","MOD_OFFSET","MOD_PPSMAX","MOD_STATUS","MOD_TAI","MOD_TIMECONST","MON_1","MON_10","MON_11","MON_12","MON_2","MON_3","MON_4","MON_5","MON_6","MON_7","MON_8","MON_9","MSG_CTRUNC","MSG_DONTROUTE","MSG_DONTWAIT","MSG_EOF","MSG_EOR","MSG_FLUSH","MSG_HAVEMORE","MSG_HOLD","MSG_OOB","MSG_PEEK","MSG_RCVMORE","MSG_SEND","MSG_TRUNC","MSG_WAITALL","MS_ASYNC","MS_DEACTIVATE","MS_INVALIDATE","MS_KILLPAGES","MS_SYNC","NANOSECOND","NCCS","NET_RT_DUMP","NET_RT_FLAGS","NET_RT_IFLIST","NET_RT_IFLIST2","NEW_TIME","NI_DGRAM","NI_MAXHOST","NI_MAXSERV","NI_NAMEREQD","NI_NOFQDN","NI_NUMERICHOST","NI_NUMERICSCOPE","NI_NUMERICSERV","NL0","NL1","NLDLY","NOEXPR","NOFLSH","NOKERNINFO","NOSTR","NOTE_ABSOLUTE","NOTE_ATTRIB","NOTE_BACKGROUND","NOTE_CHILD","NOTE_CRITICAL","NOTE_DELETE","NOTE_EXEC","NOTE_EXIT","NOTE_EXITSTATUS","NOTE_EXIT_CSERROR","NOTE_EXIT_DECRYPTFAIL","NOTE_EXIT_DETAIL","NOTE_EXIT_DETAIL_MASK","NOTE_EXIT_MEMORY","NOTE_EXTEND","NOTE_FFAND","NOTE_FFCOPY","NOTE_FFCTRLMASK","NOTE_FFLAGSMASK","NOTE_FFNOP","NOTE_FFOR","NOTE_FORK","NOTE_LEEWAY","NOTE_LINK","NOTE_LOWAT","NOTE_NONE","NOTE_NSECONDS","NOTE_PCTRLMASK","NOTE_PDATAMASK","NOTE_RENAME","NOTE_REVOKE","NOTE_SECONDS","NOTE_SIGNAL","NOTE_TRACK","NOTE_TRACKERR","NOTE_TRIGGER","NOTE_USECONDS","NOTE_VM_ERROR","NOTE_VM_PRESSURE","NOTE_VM_PRESSURE_SUDDEN_TERMINATE","NOTE_VM_PRESSURE_TERMINATE","NOTE_WRITE","NTP_API","OCRNL","OFDEL","OFILL","OLD_TIME","ONLCR","ONLRET","ONOCR","ONOEOT","OPOST","OXTABS","O_ACCMODE","O_APPEND","O_ASYNC","O_CLOEXEC","O_CREAT","O_DIRECTORY","O_DSYNC","O_EXCL","O_EXLOCK","O_FSYNC","O_NDELAY","O_NOCTTY","O_NOFOLLOW","O_NONBLOCK","O_RDONLY","O_RDWR","O_SHLOCK","O_SYMLINK","O_SYNC","O_TRUNC","O_WRONLY","PARENB","PARMRK","PARODD","PATH_MAX","PENDIN","PF_APPLETALK","PF_CCITT","PF_CHAOS","PF_CNT","PF_COIP","PF_DATAKIT","PF_DECnet","PF_DLI","PF_ECMA","PF_HYLINK","PF_IMPLINK","PF_INET","PF_INET6","PF_IPX","PF_ISDN","PF_ISO","PF_KEY","PF_LAT","PF_LINK","PF_LOCAL","PF_NATM","PF_NETBIOS","PF_NS","PF_OSI","PF_PIP","PF_PPP","PF_PUP","PF_ROUTE","PF_RTIP","PF_SIP","PF_SNA","PF_SYSTEM","PF_UNIX","PF_UNSPEC","PF_XTP","PIPE_BUF","PM_STR","POLLERR","POLLHUP","POLLIN","POLLNVAL","POLLOUT","POLLPRI","POLLRDBAND","POLLRDNORM","POLLWRBAND","POLLWRNORM","POSIX_MADV_DONTNEED","POSIX_MADV_NORMAL","POSIX_MADV_RANDOM","POSIX_MADV_SEQUENTIAL","POSIX_MADV_WILLNEED","POSIX_SPAWN_CLOEXEC_DEFAULT","POSIX_SPAWN_RESETIDS","POSIX_SPAWN_SETEXEC","POSIX_SPAWN_SETPGROUP","POSIX_SPAWN_SETSIGDEF","POSIX_SPAWN_SETSIGMASK","POSIX_SPAWN_START_SUSPENDED","PRIO_DARWIN_BG","PRIO_DARWIN_NONUI","PRIO_DARWIN_PROCESS","PRIO_DARWIN_THREAD","PRIO_MAX","PRIO_MIN","PRIO_PGRP","PRIO_PROCESS","PRIO_USER","PROCESSOR_BASIC_INFO","PROCESSOR_CPU_LOAD_INFO","PROCESSOR_PM_REGS_INFO","PROCESSOR_SET_BASIC_INFO","PROCESSOR_SET_LOAD_INFO","PROCESSOR_TEMPERATURE","PROC_CSM_ALL","PROC_CSM_NOSMT","PROC_CSM_TECS","PROC_PIDPATHINFO_MAXSIZE","PROC_PIDTASKALLINFO","PROC_PIDTASKINFO","PROC_PIDTBSDINFO","PROC_PIDTHREADINFO","PROC_PIDVNODEPATHINFO","PROT_EXEC","PROT_NONE","PROT_READ","PROT_WRITE","PTHREAD_COND_INITIALIZER","PTHREAD_CREATE_DETACHED","PTHREAD_CREATE_JOINABLE","PTHREAD_INTROSPECTION_THREAD_CREATE","PTHREAD_INTROSPECTION_THREAD_DESTROY","PTHREAD_INTROSPECTION_THREAD_START","PTHREAD_INTROSPECTION_THREAD_TERMINATE","PTHREAD_MUTEX_DEFAULT","PTHREAD_MUTEX_ERRORCHECK","PTHREAD_MUTEX_INITIALIZER","PTHREAD_MUTEX_NORMAL","PTHREAD_MUTEX_RECURSIVE","PTHREAD_PROCESS_PRIVATE","PTHREAD_PROCESS_SHARED","PTHREAD_RWLOCK_INITIALIZER","PTHREAD_STACK_MIN","PT_ATTACH","PT_ATTACHEXC","PT_CONTINUE","PT_DENY_ATTACH","PT_DETACH","PT_FIRSTMACH","PT_FORCEQUOTA","PT_KILL","PT_READ_D","PT_READ_I","PT_READ_U","PT_SIGEXC","PT_STEP","PT_THUPDATE","PT_TRACE_ME","PT_WRITE_D","PT_WRITE_I","PT_WRITE_U","P_ALL","P_PGID","P_PID","QCMD","QOS_CLASS_BACKGROUND","QOS_CLASS_DEFAULT","QOS_CLASS_UNSPECIFIED","QOS_CLASS_USER_INITIATED","QOS_CLASS_USER_INTERACTIVE","QOS_CLASS_UTILITY","Q_GETQUOTA","Q_QUOTAOFF","Q_QUOTAON","Q_SETQUOTA","Q_SYNC","RADIXCHAR","RAND_MAX","REG_ASSERT","REG_ATOI","REG_BACKR","REG_BADBR","REG_BADPAT","REG_BADRPT","REG_BASIC","REG_DUMP","REG_EBRACE","REG_EBRACK","REG_ECOLLATE","REG_ECTYPE","REG_EESCAPE","REG_EMPTY","REG_EPAREN","REG_ERANGE","REG_ESPACE","REG_ESUBREG","REG_EXTENDED","REG_ICASE","REG_INVARG","REG_ITOA","REG_LARGE","REG_NEWLINE","REG_NOMATCH","REG_NOSPEC","REG_NOSUB","REG_NOTBOL","REG_NOTEOL","REG_PEND","REG_STARTEND","REG_TRACE","RENAME_EXCL","RENAME_SWAP","RLIMIT_AS","RLIMIT_CORE","RLIMIT_CPU","RLIMIT_DATA","RLIMIT_FSIZE","RLIMIT_MEMLOCK","RLIMIT_NOFILE","RLIMIT_NPROC","RLIMIT_RSS","RLIMIT_STACK","RLIM_INFINITY","RLIM_NLIMITS","RTAX_AUTHOR","RTAX_BRD","RTAX_DST","RTAX_GATEWAY","RTAX_GENMASK","RTAX_IFA","RTAX_IFP","RTAX_MAX","RTAX_NETMASK","RTA_AUTHOR","RTA_BRD","RTA_DST","RTA_GATEWAY","RTA_GENMASK","RTA_IFA","RTA_IFP","RTA_NETMASK","RTF_BLACKHOLE","RTF_BROADCAST","RTF_CLONING","RTF_CONDEMNED","RTF_DEAD","RTF_DELCLONE","RTF_DONE","RTF_DYNAMIC","RTF_GATEWAY","RTF_GLOBAL","RTF_HOST","RTF_IFREF","RTF_IFSCOPE","RTF_LLINFO","RTF_LOCAL","RTF_MODIFIED","RTF_MULTICAST","RTF_NOIFREF","RTF_PINNED","RTF_PRCLONING","RTF_PROTO1","RTF_PROTO2","RTF_PROTO3","RTF_PROXY","RTF_REJECT","RTF_ROUTER","RTF_STATIC","RTF_UP","RTF_WASCLONED","RTF_XRESOLVE","RTLD_DEFAULT","RTLD_FIRST","RTLD_GLOBAL","RTLD_LAZY","RTLD_LOCAL","RTLD_NEXT","RTLD_NODELETE","RTLD_NOLOAD","RTLD_NOW","RTLD_SELF","RTM_ADD","RTM_CHANGE","RTM_DELADDR","RTM_DELETE","RTM_DELMADDR","RTM_GET","RTM_GET2","RTM_IFINFO","RTM_IFINFO2","RTM_LOCK","RTM_LOSING","RTM_MISS","RTM_NEWADDR","RTM_NEWMADDR","RTM_NEWMADDR2","RTM_OLDADD","RTM_OLDDEL","RTM_REDIRECT","RTM_RESOLVE","RTM_VERSION","RTV_EXPIRE","RTV_HOPCOUNT","RTV_MTU","RTV_RPIPE","RTV_RTT","RTV_RTTVAR","RTV_SPIPE","RTV_SSTHRESH","RUN_LVL","RUSAGE_CHILDREN","RUSAGE_INFO_V0","RUSAGE_INFO_V1","RUSAGE_INFO_V2","RUSAGE_INFO_V3","RUSAGE_INFO_V4","RUSAGE_SELF","R_OK","SAE_ASSOCID_ALL","SAE_ASSOCID_ANY","SAE_CONNID_ALL","SAE_CONNID_ANY","SA_NOCLDSTOP","SA_NOCLDWAIT","SA_NODEFER","SA_ONSTACK","SA_RESETHAND","SA_RESTART","SA_SIGINFO","SCALE_PPM","SCHED_FIFO","SCHED_OTHER","SCHED_RR","SCM_CREDS","SCM_RIGHTS","SCM_TIMESTAMP","SEEK_CUR","SEEK_END","SEEK_SET","SEM_FAILED","SEM_UNDO","SETALL","SETVAL","SF_APPEND","SF_ARCHIVED","SF_IMMUTABLE","SF_SETTABLE","SHMLBA","SHM_R","SHM_RDONLY","SHM_RND","SHM_W","SHUTDOWN_TIME","SHUT_RD","SHUT_RDWR","SHUT_WR","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGEMT","SIGEV_NONE","SIGEV_SIGNAL","SIGEV_THREAD","SIGFPE","SIGHUP","SIGILL","SIGINFO","SIGINT","SIGIO","SIGIOT","SIGKILL","SIGNATURE","SIGPIPE","SIGPROF","SIGQUIT","SIGSEGV","SIGSTKSZ","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SIG_BLOCK","SIG_DFL","SIG_ERR","SIG_IGN","SIG_SETMASK","SIG_UNBLOCK","SIOCGIFADDR","SOCK_DGRAM","SOCK_MAXADDRLEN","SOCK_RAW","SOCK_RDM","SOCK_SEQPACKET","SOCK_STREAM","SOL_LOCAL","SOL_SOCKET","SOMAXCONN","SO_ACCEPTCONN","SO_BROADCAST","SO_DEBUG","SO_DONTROUTE","SO_DONTTRUNC","SO_ERROR","SO_KEEPALIVE","SO_LABEL","SO_LINGER","SO_LINGER_SEC","SO_NKE","SO_NOADDRERR","SO_NOSIGPIPE","SO_NOTIFYCONFLICT","SO_NP_EXTENSIONS","SO_NREAD","SO_NWRITE","SO_OOBINLINE","SO_PEERLABEL","SO_RANDOMPORT","SO_RCVBUF","SO_RCVLOWAT","SO_RCVTIMEO","SO_REUSEADDR","SO_REUSEPORT","SO_REUSESHAREUID","SO_SNDBUF","SO_SNDLOWAT","SO_SNDTIMEO","SO_TIMESTAMP","SO_TIMESTAMP_MONOTONIC","SO_TYPE","SO_USELOOPBACK","SO_WANTMORE","SO_WANTOOBFLAG","SS_DISABLE","SS_ONSTACK","STA_CLK","STA_CLOCKERR","STA_DEL","STA_FLL","STA_FREQHOLD","STA_INS","STA_MODE","STA_NANO","STA_PLL","STA_PPSERROR","STA_PPSFREQ","STA_PPSJITTER","STA_PPSSIGNAL","STA_PPSTIME","STA_PPSWANDER","STA_RONLY","STA_UNSYNC","STDERR_FILENO","STDIN_FILENO","STDOUT_FILENO","ST_NOSUID","ST_RDONLY","SUPERPAGE_NONE","SUPERPAGE_SIZE_2MB","SUPERPAGE_SIZE_ANY","SYSDIR_DIRECTORY_ADMIN_APPLICATION","SYSDIR_DIRECTORY_ALL_APPLICATIONS","SYSDIR_DIRECTORY_ALL_LIBRARIES","SYSDIR_DIRECTORY_APPLICATION","SYSDIR_DIRECTORY_APPLICATION_SUPPORT","SYSDIR_DIRECTORY_AUTOSAVED_INFORMATION","SYSDIR_DIRECTORY_CACHES","SYSDIR_DIRECTORY_CORESERVICE","SYSDIR_DIRECTORY_DEMO_APPLICATION","SYSDIR_DIRECTORY_DESKTOP","SYSDIR_DIRECTORY_DEVELOPER","SYSDIR_DIRECTORY_DEVELOPER_APPLICATION","SYSDIR_DIRECTORY_DOCUMENT","SYSDIR_DIRECTORY_DOCUMENTATION","SYSDIR_DIRECTORY_DOWNLOADS","SYSDIR_DIRECTORY_INPUT_METHODS","SYSDIR_DIRECTORY_LIBRARY","SYSDIR_DIRECTORY_MOVIES","SYSDIR_DIRECTORY_MUSIC","SYSDIR_DIRECTORY_PICTURES","SYSDIR_DIRECTORY_PREFERENCE_PANES","SYSDIR_DIRECTORY_PRINTER_DESCRIPTION","SYSDIR_DIRECTORY_SHARED_PUBLIC","SYSDIR_DIRECTORY_USER","SYSDIR_DOMAIN_MASK_ALL","SYSDIR_DOMAIN_MASK_LOCAL","SYSDIR_DOMAIN_MASK_NETWORK","SYSDIR_DOMAIN_MASK_SYSTEM","SYSDIR_DOMAIN_MASK_USER","SYSPROTO_CONTROL","SYSPROTO_EVENT","S_IEXEC","S_IFBLK","S_IFCHR","S_IFDIR","S_IFIFO","S_IFLNK","S_IFMT","S_IFREG","S_IFSOCK","S_IREAD","S_IRGRP","S_IROTH","S_IRUSR","S_IRWXG","S_IRWXO","S_IRWXU","S_ISGID","S_ISUID","S_ISVTX","S_IWGRP","S_IWOTH","S_IWRITE","S_IWUSR","S_IXGRP","S_IXOTH","S_IXUSR","TAB0","TAB1","TAB2","TAB3","TABDLY","TASK_THREAD_TIMES_INFO","TASK_THREAD_TIMES_INFO_COUNT","TCIFLUSH","TCIOFF","TCIOFLUSH","TCION","TCOFLUSH","TCOOFF","TCOON","TCP_FASTOPEN","TCP_KEEPALIVE","TCP_KEEPCNT","TCP_KEEPINTVL","TCP_MAXSEG","TCP_NODELAY","TCP_NOOPT","TCP_NOPUSH","TCSADRAIN","TCSAFLUSH","TCSANOW","THOUSEP","THREAD_AFFINITY_POLICY","THREAD_AFFINITY_POLICY_COUNT","THREAD_AFFINITY_TAG_NULL","THREAD_BACKGROUND_POLICY","THREAD_BACKGROUND_POLICY_COUNT","THREAD_BACKGROUND_POLICY_DARWIN_BG","THREAD_BASIC_INFO","THREAD_BASIC_INFO_COUNT","THREAD_EXTENDED_INFO","THREAD_EXTENDED_INFO_COUNT","THREAD_EXTENDED_POLICY","THREAD_EXTENDED_POLICY_COUNT","THREAD_IDENTIFIER_INFO","THREAD_IDENTIFIER_INFO_COUNT","THREAD_LATENCY_QOS_POLICY","THREAD_LATENCY_QOS_POLICY_COUNT","THREAD_PRECEDENCE_POLICY","THREAD_PRECEDENCE_POLICY_COUNT","THREAD_STANDARD_POLICY","THREAD_STANDARD_POLICY_COUNT","THREAD_THROUGHPUT_QOS_POLICY","THREAD_THROUGHPUT_QOS_POLICY_COUNT","THREAD_TIME_CONSTRAINT_POLICY","THREAD_TIME_CONSTRAINT_POLICY_COUNT","TH_FLAGS_GLOBAL_FORCED_IDLE","TH_FLAGS_IDLE","TH_FLAGS_SWAPPED","TH_STATE_HALTED","TH_STATE_RUNNING","TH_STATE_STOPPED","TH_STATE_UNINTERRUPTIBLE","TH_STATE_WAITING","TIME_DEL","TIME_ERROR","TIME_INS","TIME_OK","TIME_OOP","TIME_WAIT","TIOCCBRK","TIOCCDTR","TIOCCONS","TIOCDCDTIMESTAMP","TIOCDRAIN","TIOCDSIMICROCODE","TIOCEXCL","TIOCEXT","TIOCFLUSH","TIOCGDRAINWAIT","TIOCGETD","TIOCGPGRP","TIOCGWINSZ","TIOCIXOFF","TIOCIXON","TIOCMBIC","TIOCMBIS","TIOCMGDTRWAIT","TIOCMGET","TIOCMODG","TIOCMODS","TIOCMSDTRWAIT","TIOCMSET","TIOCM_CAR","TIOCM_CD","TIOCM_CTS","TIOCM_DSR","TIOCM_DTR","TIOCM_LE","TIOCM_RI","TIOCM_RNG","TIOCM_RTS","TIOCM_SR","TIOCM_ST","TIOCNOTTY","TIOCNXCL","TIOCOUTQ","TIOCPKT","TIOCPKT_DATA","TIOCPKT_DOSTOP","TIOCPKT_FLUSHREAD","TIOCPKT_FLUSHWRITE","TIOCPKT_IOCTL","TIOCPKT_NOSTOP","TIOCPKT_START","TIOCPKT_STOP","TIOCPTYGNAME","TIOCPTYGRANT","TIOCPTYUNLK","TIOCREMOTE","TIOCSBRK","TIOCSCONS","TIOCSCTTY","TIOCSDRAINWAIT","TIOCSDTR","TIOCSETD","TIOCSIG","TIOCSPGRP","TIOCSTART","TIOCSTAT","TIOCSTI","TIOCSTOP","TIOCSWINSZ","TIOCTIMESTAMP","TIOCUCNTL","TMP_MAX","TOSTOP","T_FMT","T_FMT_AMPM","UF_APPEND","UF_COMPRESSED","UF_HIDDEN","UF_IMMUTABLE","UF_NODUMP","UF_OPAQUE","UF_SETTABLE","UF_TRACKED","USER_BC_BASE_MAX","USER_BC_DIM_MAX","USER_BC_SCALE_MAX","USER_BC_STRING_MAX","USER_COLL_WEIGHTS_MAX","USER_CS_PATH","USER_EXPR_NEST_MAX","USER_LINE_MAX","USER_MAXID","USER_POSIX2_CHAR_TERM","USER_POSIX2_C_BIND","USER_POSIX2_C_DEV","USER_POSIX2_FORT_DEV","USER_POSIX2_FORT_RUN","USER_POSIX2_LOCALEDEF","USER_POSIX2_SW_DEV","USER_POSIX2_UPE","USER_POSIX2_VERSION","USER_PROCESS","USER_RE_DUP_MAX","USER_STREAM_MAX","USER_TZNAME_MAX","USRQUOTA","UTIME_NOW","UTIME_OMIT","UTUN_OPT_FLAGS","UTUN_OPT_IFNAME","VDISCARD","VDSUSP","VEOF","VEOL","VEOL2","VERASE","VINTR","VKILL","VLNEXT","VMIN","VM_FLAGS_ALIAS_MASK","VM_FLAGS_ANYWHERE","VM_FLAGS_FIXED","VM_FLAGS_NO_CACHE","VM_FLAGS_OVERWRITE","VM_FLAGS_PURGABLE","VM_FLAGS_RANDOM_ADDR","VM_FLAGS_RESILIENT_CODESIGN","VM_FLAGS_RESILIENT_MEDIA","VM_FLAGS_RETURN_4K_DATA_ADDR","VM_FLAGS_RETURN_DATA_ADDR","VM_FLAGS_SUPERPAGE_MASK","VM_FLAGS_SUPERPAGE_NONE","VM_FLAGS_SUPERPAGE_SHIFT","VM_FLAGS_SUPERPAGE_SIZE_2MB","VM_FLAGS_SUPERPAGE_SIZE_ANY","VM_FLAGS_USER_ALLOCATE","VM_FLAGS_USER_MAP","VM_FLAGS_USER_REMAP","VM_LOADAVG","VM_MACHFACTOR","VM_MAKE_TAG","VM_MAXID","VM_MEMORY_ACCELERATE","VM_MEMORY_ANALYSIS_TOOL","VM_MEMORY_APPKIT","VM_MEMORY_APPLICATION_SPECIFIC_1","VM_MEMORY_APPLICATION_SPECIFIC_16","VM_MEMORY_ASL","VM_MEMORY_ASSETSD","VM_MEMORY_ATS","VM_MEMORY_CARBON","VM_MEMORY_CGIMAGE","VM_MEMORY_COREDATA","VM_MEMORY_COREDATA_OBJECTIDS","VM_MEMORY_COREGRAPHICS","VM_MEMORY_COREGRAPHICS_BACKINGSTORES","VM_MEMORY_COREGRAPHICS_DATA","VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS","VM_MEMORY_COREGRAPHICS_MISC","VM_MEMORY_COREGRAPHICS_SHARED","VM_MEMORY_COREGRAPHICS_XALLOC","VM_MEMORY_COREIMAGE","VM_MEMORY_COREPROFILE","VM_MEMORY_CORESERVICES","VM_MEMORY_COREUI","VM_MEMORY_COREUIFILE","VM_MEMORY_CORPSEINFO","VM_MEMORY_DHMM","VM_MEMORY_DYLD","VM_MEMORY_DYLD_MALLOC","VM_MEMORY_DYLIB","VM_MEMORY_FOUNDATION","VM_MEMORY_GENEALOGY","VM_MEMORY_GLSL","VM_MEMORY_GUARD","VM_MEMORY_IMAGEIO","VM_MEMORY_IOKIT","VM_MEMORY_JAVA","VM_MEMORY_JAVASCRIPT_CORE","VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR","VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE","VM_MEMORY_LAYERKIT","VM_MEMORY_LIBDISPATCH","VM_MEMORY_MACH_MSG","VM_MEMORY_MALLOC","VM_MEMORY_MALLOC_HUGE","VM_MEMORY_MALLOC_LARGE","VM_MEMORY_MALLOC_LARGE_REUSABLE","VM_MEMORY_MALLOC_LARGE_REUSED","VM_MEMORY_MALLOC_NANO","VM_MEMORY_MALLOC_SMALL","VM_MEMORY_MALLOC_TINY","VM_MEMORY_OBJC_DISPATCHERS","VM_MEMORY_OPENCL","VM_MEMORY_OS_ALLOC_ONCE","VM_MEMORY_RAWCAMERA","VM_MEMORY_REALLOC","VM_MEMORY_SBRK","VM_MEMORY_SCENEKIT","VM_MEMORY_SHARED_PMAP","VM_MEMORY_SKYWALK","VM_MEMORY_SQLITE","VM_MEMORY_STACK","VM_MEMORY_SWIFT_METADATA","VM_MEMORY_SWIFT_RUNTIME","VM_MEMORY_TCMALLOC","VM_MEMORY_UNSHARED_PMAP","VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS","VM_METER","VM_PAGE_QUERY_PAGE_COPIED","VM_PAGE_QUERY_PAGE_CS_NX","VM_PAGE_QUERY_PAGE_CS_TAINTED","VM_PAGE_QUERY_PAGE_CS_VALIDATED","VM_PAGE_QUERY_PAGE_DIRTY","VM_PAGE_QUERY_PAGE_EXTERNAL","VM_PAGE_QUERY_PAGE_FICTITIOUS","VM_PAGE_QUERY_PAGE_PAGED_OUT","VM_PAGE_QUERY_PAGE_PRESENT","VM_PAGE_QUERY_PAGE_REF","VM_PAGE_QUERY_PAGE_SPECULATIVE","VM_PROT_EXECUTE","VM_PROT_NONE","VM_PROT_READ","VM_PROT_WRITE","VM_SWAPUSAGE","VQUIT","VREPRINT","VSTART","VSTATUS","VSTOP","VSUSP","VT0","VT1","VTDLY","VTIME","VWERASE","WCONTINUED","WCOREDUMP","WEXITED","WEXITSTATUS","WIFCONTINUED","WIFEXITED","WIFSIGNALED","WIFSTOPPED","WNOHANG","WNOWAIT","WSTOPPED","WSTOPSIG","WTERMSIG","WUNTRACED","W_OK","XATTR_CREATE","XATTR_NODEFAULT","XATTR_NOFOLLOW","XATTR_NOSECURITY","XATTR_REPLACE","XATTR_SHOWCOMPRESSION","XUCRED_VERSION","X_OK","YESEXPR","YESSTR","_IOFBF","_IOLBF","_IONBF","_NSGetEnviron","_NSGetExecutablePath","_PC_CHOWN_RESTRICTED","_PC_LINK_MAX","_PC_MAX_CANON","_PC_MAX_INPUT","_PC_NAME_MAX","_PC_NO_TRUNC","_PC_PATH_MAX","_PC_PIPE_BUF","_PC_VDISABLE","_POSIX_VDISABLE","_PTHREAD_COND_SIG_init","_PTHREAD_MUTEX_SIG_init","_PTHREAD_RWLOCK_SIG_init","_RLIMIT_POSIX_FLAG","_SC_2_CHAR_TERM","_SC_2_C_BIND","_SC_2_C_DEV","_SC_2_FORT_DEV","_SC_2_FORT_RUN","_SC_2_LOCALEDEF","_SC_2_PBS","_SC_2_PBS_ACCOUNTING","_SC_2_PBS_CHECKPOINT","_SC_2_PBS_LOCATE","_SC_2_PBS_MESSAGE","_SC_2_PBS_TRACK","_SC_2_SW_DEV","_SC_2_UPE","_SC_2_VERSION","_SC_ADVISORY_INFO","_SC_AIO_LISTIO_MAX","_SC_AIO_MAX","_SC_AIO_PRIO_DELTA_MAX","_SC_ARG_MAX","_SC_ASYNCHRONOUS_IO","_SC_ATEXIT_MAX","_SC_BARRIERS","_SC_BC_BASE_MAX","_SC_BC_DIM_MAX","_SC_BC_SCALE_MAX","_SC_BC_STRING_MAX","_SC_CHILD_MAX","_SC_CLK_TCK","_SC_CLOCK_SELECTION","_SC_COLL_WEIGHTS_MAX","_SC_CPUTIME","_SC_DELAYTIMER_MAX","_SC_EXPR_NEST_MAX","_SC_FILE_LOCKING","_SC_FSYNC","_SC_GETGR_R_SIZE_MAX","_SC_GETPW_R_SIZE_MAX","_SC_HOST_NAME_MAX","_SC_IOV_MAX","_SC_IPV6","_SC_JOB_CONTROL","_SC_LINE_MAX","_SC_LOGIN_NAME_MAX","_SC_MAPPED_FILES","_SC_MEMLOCK","_SC_MEMLOCK_RANGE","_SC_MEMORY_PROTECTION","_SC_MESSAGE_PASSING","_SC_MONOTONIC_CLOCK","_SC_MQ_OPEN_MAX","_SC_MQ_PRIO_MAX","_SC_NGROUPS_MAX","_SC_NPROCESSORS_CONF","_SC_NPROCESSORS_ONLN","_SC_OPEN_MAX","_SC_PAGESIZE","_SC_PAGE_SIZE","_SC_PASS_MAX","_SC_PHYS_PAGES","_SC_PRIORITIZED_IO","_SC_PRIORITY_SCHEDULING","_SC_RAW_SOCKETS","_SC_READER_WRITER_LOCKS","_SC_REALTIME_SIGNALS","_SC_REGEXP","_SC_RE_DUP_MAX","_SC_RTSIG_MAX","_SC_SAVED_IDS","_SC_SEMAPHORES","_SC_SEM_NSEMS_MAX","_SC_SEM_VALUE_MAX","_SC_SHARED_MEMORY_OBJECTS","_SC_SHELL","_SC_SIGQUEUE_MAX","_SC_SPAWN","_SC_SPIN_LOCKS","_SC_SPORADIC_SERVER","_SC_SS_REPL_MAX","_SC_STREAM_MAX","_SC_SYMLOOP_MAX","_SC_SYNCHRONIZED_IO","_SC_THREADS","_SC_THREAD_ATTR_STACKADDR","_SC_THREAD_ATTR_STACKSIZE","_SC_THREAD_CPUTIME","_SC_THREAD_DESTRUCTOR_ITERATIONS","_SC_THREAD_KEYS_MAX","_SC_THREAD_PRIORITY_SCHEDULING","_SC_THREAD_PRIO_INHERIT","_SC_THREAD_PRIO_PROTECT","_SC_THREAD_PROCESS_SHARED","_SC_THREAD_SAFE_FUNCTIONS","_SC_THREAD_SPORADIC_SERVER","_SC_THREAD_STACK_MIN","_SC_THREAD_THREADS_MAX","_SC_TIMEOUTS","_SC_TIMERS","_SC_TIMER_MAX","_SC_TRACE","_SC_TRACE_EVENT_FILTER","_SC_TRACE_EVENT_NAME_MAX","_SC_TRACE_INHERIT","_SC_TRACE_LOG","_SC_TRACE_NAME_MAX","_SC_TRACE_SYS_MAX","_SC_TRACE_USER_EVENT_MAX","_SC_TTY_NAME_MAX","_SC_TYPED_MEMORY_OBJECTS","_SC_TZNAME_MAX","_SC_V6_ILP32_OFF32","_SC_V6_ILP32_OFFBIG","_SC_V6_LP64_OFF64","_SC_V6_LPBIG_OFFBIG","_SC_VERSION","_SC_XBS5_ILP32_OFF32","_SC_XBS5_ILP32_OFFBIG","_SC_XBS5_LP64_OFF64","_SC_XBS5_LPBIG_OFFBIG","_SC_XOPEN_CRYPT","_SC_XOPEN_ENH_I18N","_SC_XOPEN_LEGACY","_SC_XOPEN_REALTIME","_SC_XOPEN_REALTIME_THREADS","_SC_XOPEN_SHM","_SC_XOPEN_STREAMS","_SC_XOPEN_UNIX","_SC_XOPEN_VERSION","_SC_XOPEN_XCU_VERSION","_UTX_HOSTSIZE","_UTX_IDSIZE","_UTX_LINESIZE","_UTX_USERSIZE","_WSTATUS","_WSTOPPED","__PTHREAD_CONDATTR_SIZE__","__PTHREAD_COND_SIZE__","__PTHREAD_MUTEX_SIZE__","__PTHREAD_RWLOCKATTR_SIZE__","__PTHREAD_RWLOCK_SIZE__","__cpsr","__darwin_arm_exception_state64","__darwin_arm_neon_state64","__darwin_arm_thread_state64","__darwin_mcontext64","__error","__es","__esr","__exception","__far","__fp","__fpcr","__fpsr","__int128","__int128_t","__lr","__ns","__pad","__pc","__sp","__ss","__uint128","__uint128_t","__v","__x","_dyld_get_image_header","_dyld_get_image_name","_dyld_get_image_vmaddr_slide","_dyld_image_count","_exit","_key","_seq","abort","abs","accept","access","acct","actime","active_count","active_count","address","addrinfo","adjtime","affinity_tag","ai_addr","ai_addrlen","ai_canonname","ai_family","ai_flags","ai_next","ai_protocol","ai_socktype","aio_buf","aio_cancel","aio_error","aio_fildes","aio_fsync","aio_lio_opcode","aio_nbytes","aio_offset","aio_read","aio_reqprio","aio_return","aio_sigevent","aio_suspend","aio_write","aiocb","alarm","ar_hln","ar_hrd","ar_op","ar_pln","ar_pro","arc4random","arc4random_buf","arc4random_uniform","arphdr","array","atexit","atof","atoi","backtrace","backtrace_async","backtrace_from_fp","backtrace_image_offsets","backtrace_symbols","backtrace_symbols_fd","bh_caplen","bh_datalen","bh_hdrlen","bh_tstamp","bind","blkcnt_t","blksize_t","blocks_in_use","boolean_t","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bpf_hdr","brk","bsearch","buf","bytes_free","bytes_total","bytes_used","c_cc","c_cflag","c_char","c_double","c_float","c_iflag","c_int","c_ispeed","c_lflag","c_long","c_longlong","c_oflag","c_ospeed","c_schar","c_short","c_uchar","c_uint","c_ulong","c_ulonglong","c_ushort","c_void","calcnt","calloc","cc_t","cfgetispeed","cfgetospeed","cfmakeraw","cfsetispeed","cfsetospeed","cfsetspeed","cgid","chdir","chflags","chmod","chown","chroot","chunks_free","chunks_used","clearerr","clock_getres","clock_gettime","clock_settime","clock_t","clockid_t","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clonefile","clonefileat","close","closedir","closelog","cmd","cmd","cmd","cmdsize","cmdsize","cmdsize","cmsg_len","cmsg_level","cmsg_type","cmsghdr","compressions","compressor_page_count","computation","connect","connectx","constant","constraint","copyfile","copyfile_flags_t","copyfile_state_t","cow_faults","cow_faults","cpu_subtype","cpu_subtype_t","cpu_ticks","cpu_type","cpu_type_t","cpu_usage","cpusubtype","cpusubtype","cputype","cputype","cr_groups","cr_ngroups","cr_uid","cr_version","creat","cuid","currency_symbol","d_ino","d_name","d_namlen","d_reclen","d_seekoff","d_type","data","data","decimal_point","decompressions","default_policy","denom","dev_t","difftime","dirent","dirfd","disconnectx","dispatch_qaddr","dladdr","dlclose","dlerror","dli_fbase","dli_fname","dli_saddr","dli_sname","dlopen","dlsym","dqb_bhardlimit","dqb_bsoftlimit","dqb_btime","dqb_curbytes","dqb_curinodes","dqb_id","dqb_ihardlimit","dqb_isoftlimit","dqb_itime","dqb_spare","dqblk","drand48","dup","dup2","duplocale","e_tdev","e_tpgid","endgrent","endpwent","endservent","endutxent","erand48","errcnt","esterror","esterror","events","exchangedata","execl","execle","execlp","execv","execve","execvp","exit","ext","external_page_count","f_bavail","f_bavail","f_bfree","f_bfree","f_blocks","f_blocks","f_bsize","f_bsize","f_favail","f_ffree","f_ffree","f_files","f_files","f_flag","f_flags","f_frsize","f_fsid","f_fsid","f_fssubtype","f_fstypename","f_iosize","f_mntfromname","f_mntonname","f_namemax","f_owner","f_reserved","f_type","faccessat","faults","faults","fchdir","fchflags","fchmod","fchmodat","fchown","fchownat","fclonefileat","fclose","fcntl","fcopyfile","fd","fd_set","fdopen","fdopendir","feof","ferror","fflags","fflags","fflush","fgetc","fgetpos","fgets","fgetxattr","fileno","fileoff","fileoff","filesize","filesize","filetype","filetype","filter","filter","flags","flags","flags","flags","flags","flags","flags","flistxattr","flock","flock","fmemopen","fmount","fmt","fopen","fork","forkpty","fpathconf","fpos_t","fprintf","fputc","fputs","frac_digits","fread","free","free_count","free_count","freeaddrinfo","freeifaddrs","freelocale","fremovexattr","freopen","freq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fsblkcnt_t","fscanf","fseek","fseeko","fsetpos","fsetxattr","fsfilcnt_t","fsid_t","fst_bytesalloc","fst_flags","fst_length","fst_offset","fst_posmode","fstat","fstatat","fstatfs","fstatvfs","fstore_t","fsync","ftell","ftello","ftok","ftruncate","futimens","futimes","fwrite","gai_strerror","getaddrinfo","getchar","getchar_unlocked","getcwd","getdomainname","getdtablesize","getegid","getenv","geteuid","getfsstat","getgid","getgrent","getgrgid","getgrgid_r","getgrnam","getgrnam_r","getgrouplist","getgroups","gethostid","gethostname","gethostuuid","getifaddrs","getitimer","getline","getloadavg","getlogin","getmntinfo","getnameinfo","getopt","getpeereid","getpeername","getpgid","getpgrp","getpid","getppid","getpriority","getprogname","getprotobyname","getprotobynumber","getpwent","getpwnam","getpwnam_r","getpwuid","getpwuid_r","getrlimit","getrusage","getservbyname","getservbyport","getservent","getsid","getsockname","getsockopt","gettimeofday","getuid","getutxent","getutxid","getutxline","getxattr","gid","gid_t","gl_offs","gl_pathc","gl_pathv","glob","glob_t","globfree","gmtime","gmtime_r","gr_gid","gr_mem","gr_name","gr_passwd","grantpt","group","grouping","h_addr_list","h_addrtype","h_aliases","h_length","h_name","hdr_cnt","headers","hits","hits","host_flavor_t","host_info64_t","host_info_t","host_processor_info","host_statistics","host_statistics64","host_t","hostent","hstrerror","iconv","iconv_close","iconv_open","iconv_t","id_t","ident","ident","idtype_t","if_data","if_data64","if_freenameindex","if_index","if_indextoname","if_msghdr","if_msghdr2","if_name","if_nameindex","if_nameindex","if_nametoindex","ifa_addr","ifa_data","ifa_dstaddr","ifa_flags","ifa_name","ifa_netmask","ifa_next","ifaddrs","ifi_addrlen","ifi_addrlen","ifi_baudrate","ifi_baudrate","ifi_collisions","ifi_collisions","ifi_hdrlen","ifi_hdrlen","ifi_hwassist","ifi_ibytes","ifi_ibytes","ifi_ierrors","ifi_ierrors","ifi_imcasts","ifi_imcasts","ifi_ipackets","ifi_ipackets","ifi_iqdrops","ifi_iqdrops","ifi_lastchange","ifi_lastchange","ifi_metric","ifi_metric","ifi_mtu","ifi_mtu","ifi_noproto","ifi_noproto","ifi_obytes","ifi_obytes","ifi_oerrors","ifi_oerrors","ifi_omcasts","ifi_omcasts","ifi_opackets","ifi_opackets","ifi_physical","ifi_physical","ifi_recvquota","ifi_recvquota","ifi_recvtiming","ifi_recvtiming","ifi_reserved1","ifi_reserved2","ifi_type","ifi_type","ifi_typelen","ifi_typelen","ifi_unused1","ifi_unused1","ifi_unused2","ifi_xmitquota","ifi_xmitquota","ifi_xmittiming","ifi_xmittiming","ifm_addrs","ifm_addrs","ifm_data","ifm_data","ifm_flags","ifm_flags","ifm_index","ifm_index","ifm_msglen","ifm_msglen","ifm_snd_drops","ifm_snd_len","ifm_snd_maxlen","ifm_timer","ifm_type","ifm_type","ifm_version","ifm_version","image_offset","importance","imr_address","imr_ifindex","imr_interface","imr_interface","imr_multiaddr","imr_multiaddr","imr_multiaddr","imr_sourceaddr","in6_addr","in6_pktinfo","in_addr","in_addr_t","in_pktinfo","in_port_t","inactive_count","inactive_count","initgroups","initprot","initprot","ino_t","int16_t","int32_t","int64_t","int8_t","int_curr_symbol","int_frac_digits","int_n_cs_precedes","int_n_sep_by_space","int_n_sign_posn","int_p_cs_precedes","int_p_sep_by_space","int_p_sign_posn","integer_t","internal_page_count","intmax_t","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","intptr_t","ioctl","iov_base","iov_len","iovec","ip_mreq","ip_mreq_source","ip_mreqn","ipc_perm","ipi6_addr","ipi6_ifindex","ipi_addr","ipi_ifindex","ipi_spec_dst","ipv6_mreq","ipv6mr_interface","ipv6mr_multiaddr","is_master","isalnum","isalpha","isatty","isblank","iscntrl","isdigit","isgraph","islower","isprint","ispunct","isspace","isupper","isxdigit","it_interval","it_value","itimerval","jitcnt","jitter","jrand48","kCCAlignmentError","kCCBufferTooSmall","kCCCallSequenceError","kCCDecodeError","kCCInvalidKey","kCCKeySizeError","kCCMemoryFailure","kCCOverflow","kCCParamError","kCCRNGFailure","kCCSuccess","kCCUnimplemented","kCCUnspecifiedError","kern_return_t","kevent","kevent","kevent64","kevent64_s","key_t","kill","killpg","kqueue","l2p_contigbytes","l2p_devoffset","l2p_flags","l_len","l_linger","l_onoff","l_pid","l_start","l_type","l_whence","labs","lchown","lcong48","lconv","linger","link","linkat","lio_listio","listen","listxattr","load_average","load_command","locale_t","localeconv","localeconv_l","localtime","localtime_r","lockf","log2phys","login_tty","lookups","lookups","lrand48","lseek","lstat","lutimes","mach_absolute_time","mach_factor","mach_header","mach_header_64","mach_host_self","mach_msg_type_number_t","mach_port_t","mach_task_basic_info","mach_task_basic_info_data_t","mach_task_basic_info_t","mach_task_self","mach_task_self_","mach_thread_self","mach_timebase_info","mach_timebase_info","mach_timebase_info_data_t","mach_vm_address_t","mach_vm_map","mach_vm_offset_t","mach_vm_size_t","machine","madvise","magic","magic","malloc","malloc_default_zone","malloc_printf","malloc_statistics_t","malloc_zone_calloc","malloc_zone_check","malloc_zone_free","malloc_zone_from_ptr","malloc_zone_log","malloc_zone_malloc","malloc_zone_print","malloc_zone_print_ptr_info","malloc_zone_realloc","malloc_zone_statistics","malloc_zone_t","malloc_zone_valloc","max_align_t","max_size_in_use","maxerror","maxerror","maxprot","maxprot","mcontext_t","mem_entry_name_port_t","memchr","memcmp","memcpy","memmem","memmove","memory_object_offset_t","memory_object_t","memset","memset_pattern16","memset_pattern4","memset_pattern8","memset_s","microseconds","mincore","mkdir","mkdirat","mkdtemp","mkfifo","mknod","mkstemp","mkstemps","mktime","mlock","mlockall","mmap","mode","mode_t","modes","modtime","mon_decimal_point","mon_grouping","mon_thousands_sep","mount","mprotect","mrand48","msg_control","msg_controllen","msg_flags","msg_iov","msg_iovlen","msg_name","msg_namelen","msghdr","mstats","mstats","msync","munlock","munlockall","munmap","n_cs_precedes","n_sep_by_space","n_sign_posn","nanosleep","natural_t","ncmds","ncmds","negative_sign","newlocale","nfds_t","nice","nl_item","nl_langinfo","nlink_t","no_data","nodename","nrand48","nsects","nsects","ntp_adjtime","ntp_gettime","ntptimeval","numer","off_t","offset","offset","open","open_memstream","open_wmemstream","openat","opendir","openlog","openpty","p_aliases","p_cs_precedes","p_name","p_proto","p_sep_by_space","p_sign_posn","pageins","pageins","pageouts","pageouts","passwd","pathconf","pause","pbi_comm","pbi_flags","pbi_gid","pbi_name","pbi_nfiles","pbi_nice","pbi_pgid","pbi_pid","pbi_pjobc","pbi_ppid","pbi_rgid","pbi_ruid","pbi_start_tvsec","pbi_start_tvusec","pbi_status","pbi_svgid","pbi_svuid","pbi_uid","pbi_xstatus","pbsd","pclose","period","perror","pid_t","pipe","policy","policy","policy_t","poll","pollfd","popen","positive_sign","posix_madvise","posix_memalign","posix_openpt","posix_spawn","posix_spawn_file_actions_addclose","posix_spawn_file_actions_adddup2","posix_spawn_file_actions_addopen","posix_spawn_file_actions_destroy","posix_spawn_file_actions_init","posix_spawn_file_actions_t","posix_spawnattr_destroy","posix_spawnattr_getarchpref_np","posix_spawnattr_getflags","posix_spawnattr_getpgroup","posix_spawnattr_getsigdefault","posix_spawnattr_getsigmask","posix_spawnattr_init","posix_spawnattr_setarchpref_np","posix_spawnattr_setflags","posix_spawnattr_setpgroup","posix_spawnattr_setsigdefault","posix_spawnattr_setsigmask","posix_spawnattr_t","posix_spawnp","ppsfreq","pread","preadv","precision","preemptible","printf","priority","proc_bsdinfo","proc_kmsgbuf","proc_libversion","proc_listallpids","proc_listchildpids","proc_listpgrppids","proc_listpids","proc_name","proc_pid_rusage","proc_pidfdinfo","proc_pidfileportinfo","proc_pidinfo","proc_pidpath","proc_regionfilename","proc_set_csm","proc_set_no_smt","proc_setthread_csm","proc_setthread_no_smt","proc_taskallinfo","proc_taskinfo","proc_threadinfo","proc_vnodepathinfo","processor_basic_info","processor_basic_info_data_t","processor_basic_info_t","processor_count","processor_cpu_load_info","processor_cpu_load_info_data_t","processor_cpu_load_info_t","processor_flavor_t","processor_info_array_t","processor_info_t","processor_set_basic_info","processor_set_basic_info_data_t","processor_set_basic_info_t","processor_set_load_info","processor_set_load_info_data_t","processor_set_load_info_t","protoent","pselect","pseudo_AF_HDRCMPLT","pseudo_AF_KEY","pseudo_AF_PIP","pseudo_AF_RTIP","pseudo_AF_XTP","pth_cpu_usage","pth_cpu_usage","pth_curpri","pth_curpri","pth_flags","pth_flags","pth_maxpriority","pth_maxpriority","pth_name","pth_name","pth_policy","pth_policy","pth_priority","pth_priority","pth_run_state","pth_run_state","pth_sleep_time","pth_sleep_time","pth_system_time","pth_system_time","pth_user_time","pth_user_time","pthread_atfork","pthread_attr_destroy","pthread_attr_get_qos_class_np","pthread_attr_getschedparam","pthread_attr_init","pthread_attr_set_qos_class_np","pthread_attr_setdetachstate","pthread_attr_setschedparam","pthread_attr_setstacksize","pthread_attr_t","pthread_cancel","pthread_cond_broadcast","pthread_cond_destroy","pthread_cond_init","pthread_cond_signal","pthread_cond_t","pthread_cond_timedwait","pthread_cond_wait","pthread_condattr_destroy","pthread_condattr_getpshared","pthread_condattr_init","pthread_condattr_setpshared","pthread_condattr_t","pthread_cpu_number_np","pthread_create","pthread_create_from_mach_thread","pthread_detach","pthread_exit","pthread_from_mach_thread_np","pthread_get_qos_class_np","pthread_get_stackaddr_np","pthread_get_stacksize_np","pthread_getname_np","pthread_getschedparam","pthread_getspecific","pthread_introspection_getspecific_np","pthread_introspection_hook_install","pthread_introspection_hook_t","pthread_introspection_setspecific_np","pthread_jit_write_protect_np","pthread_jit_write_protect_supported_np","pthread_join","pthread_key_create","pthread_key_delete","pthread_key_t","pthread_kill","pthread_mach_thread_np","pthread_mutex_destroy","pthread_mutex_init","pthread_mutex_lock","pthread_mutex_t","pthread_mutex_trylock","pthread_mutex_unlock","pthread_mutexattr_destroy","pthread_mutexattr_getpshared","pthread_mutexattr_init","pthread_mutexattr_setpshared","pthread_mutexattr_settype","pthread_mutexattr_t","pthread_rwlock_destroy","pthread_rwlock_init","pthread_rwlock_rdlock","pthread_rwlock_t","pthread_rwlock_tryrdlock","pthread_rwlock_trywrlock","pthread_rwlock_unlock","pthread_rwlock_wrlock","pthread_rwlockattr_destroy","pthread_rwlockattr_getpshared","pthread_rwlockattr_init","pthread_rwlockattr_setpshared","pthread_rwlockattr_t","pthread_self","pthread_set_qos_class_self_np","pthread_setname_np","pthread_setschedparam","pthread_setspecific","pthread_sigmask","pthread_t","pthread_threadid_np","pti_cow_faults","pti_csw","pti_faults","pti_messages_received","pti_messages_sent","pti_numrunning","pti_pageins","pti_policy","pti_priority","pti_resident_size","pti_syscalls_mach","pti_syscalls_unix","pti_threadnum","pti_threads_system","pti_threads_user","pti_total_system","pti_total_user","pti_virtual_size","ptinfo","ptrace","ptrdiff_t","ptsname","purgeable_count","purgeable_count","purges","purges","putchar","putchar_unlocked","putenv","puts","pututxline","pvi_cdir","pvi_rdir","pw_change","pw_class","pw_dir","pw_expire","pw_gecos","pw_gid","pw_name","pw_passwd","pw_shell","pw_uid","pwrite","pwritev","qos_class_t","qsort","querylocale","quotactl","ra_count","ra_offset","radvisory","raise","rand","reactivations","reactivations","read","readdir","readdir_r","readlink","readlinkat","readv","realloc","realpath","recv","recvfrom","recvmsg","regcomp","regerror","regex_t","regexec","regfree","regmatch_t","regoff_t","release","remove","removexattr","rename","renameat","renameatx_np","renamex_np","res_init","reserved","resident_size","resident_size_max","revents","rewind","rewinddir","rfu_1","ri_billed_energy","ri_billed_system_time","ri_billed_system_time","ri_child_elapsed_abstime","ri_child_elapsed_abstime","ri_child_elapsed_abstime","ri_child_elapsed_abstime","ri_child_interrupt_wkups","ri_child_interrupt_wkups","ri_child_interrupt_wkups","ri_child_interrupt_wkups","ri_child_pageins","ri_child_pageins","ri_child_pageins","ri_child_pageins","ri_child_pkg_idle_wkups","ri_child_pkg_idle_wkups","ri_child_pkg_idle_wkups","ri_child_pkg_idle_wkups","ri_child_system_time","ri_child_system_time","ri_child_system_time","ri_child_system_time","ri_child_user_time","ri_child_user_time","ri_child_user_time","ri_child_user_time","ri_cpu_time_qos_background","ri_cpu_time_qos_background","ri_cpu_time_qos_default","ri_cpu_time_qos_default","ri_cpu_time_qos_legacy","ri_cpu_time_qos_legacy","ri_cpu_time_qos_maintenance","ri_cpu_time_qos_maintenance","ri_cpu_time_qos_user_initiated","ri_cpu_time_qos_user_initiated","ri_cpu_time_qos_user_interactive","ri_cpu_time_qos_user_interactive","ri_cpu_time_qos_utility","ri_cpu_time_qos_utility","ri_cycles","ri_diskio_bytesread","ri_diskio_bytesread","ri_diskio_bytesread","ri_diskio_byteswritten","ri_diskio_byteswritten","ri_diskio_byteswritten","ri_instructions","ri_interrupt_wkups","ri_interrupt_wkups","ri_interrupt_wkups","ri_interrupt_wkups","ri_interrupt_wkups","ri_interval_max_phys_footprint","ri_lifetime_max_phys_footprint","ri_logical_writes","ri_pageins","ri_pageins","ri_pageins","ri_pageins","ri_pageins","ri_phys_footprint","ri_phys_footprint","ri_phys_footprint","ri_phys_footprint","ri_phys_footprint","ri_pkg_idle_wkups","ri_pkg_idle_wkups","ri_pkg_idle_wkups","ri_pkg_idle_wkups","ri_pkg_idle_wkups","ri_proc_exit_abstime","ri_proc_exit_abstime","ri_proc_exit_abstime","ri_proc_exit_abstime","ri_proc_exit_abstime","ri_proc_start_abstime","ri_proc_start_abstime","ri_proc_start_abstime","ri_proc_start_abstime","ri_proc_start_abstime","ri_resident_size","ri_resident_size","ri_resident_size","ri_resident_size","ri_resident_size","ri_runnable_time","ri_serviced_energy","ri_serviced_system_time","ri_serviced_system_time","ri_system_time","ri_system_time","ri_system_time","ri_system_time","ri_system_time","ri_user_time","ri_user_time","ri_user_time","ri_user_time","ri_user_time","ri_uuid","ri_uuid","ri_uuid","ri_uuid","ri_uuid","ri_wired_size","ri_wired_size","ri_wired_size","ri_wired_size","ri_wired_size","rlim_cur","rlim_max","rlim_t","rlimit","rm_eo","rm_so","rmdir","ru_idrss","ru_inblock","ru_isrss","ru_ixrss","ru_majflt","ru_maxrss","ru_minflt","ru_msgrcv","ru_msgsnd","ru_nivcsw","ru_nsignals","ru_nswap","ru_nvcsw","ru_oublock","ru_stime","ru_utime","run_state","running","rusage","rusage_info_t","rusage_info_v0","rusage_info_v1","rusage_info_v2","rusage_info_v3","rusage_info_v4","s6_addr","s_addr","s_aliases","s_name","s_port","s_proto","sa_data","sa_endpoints_t","sa_family","sa_family_t","sa_flags","sa_len","sa_mask","sa_sigaction","sae_associd_t","sae_connid_t","sae_dstaddr","sae_dstaddrlen","sae_srcaddr","sae_srcaddrlen","sae_srcif","sbrk","sc_family","sc_id","sc_len","sc_reserved","sc_unit","scanf","sched_get_priority_max","sched_get_priority_min","sched_param","sched_priority","sched_yield","sdl_alen","sdl_data","sdl_family","sdl_index","sdl_len","sdl_nlen","sdl_slen","sdl_type","seconds","seed48","seekdir","segment_command","segment_command_64","segname","segname","select","sem_base","sem_close","sem_ctime","sem_flg","sem_nsems","sem_num","sem_op","sem_open","sem_otime","sem_pad1","sem_pad2","sem_pad3","sem_perm","sem_post","sem_t","sem_trywait","sem_unlink","sem_wait","sembuf","semctl","semget","semid_ds","semop","semun","send","sendfile","sendmsg","sendto","servent","setbuf","setdomainname","setegid","setenv","seteuid","setgid","setgrent","setgroups","sethostid","sethostname","setitimer","setlocale","setlogmask","setpgid","setpriority","setprogname","setpwent","setrlimit","setservent","setsid","setsockopt","settimeofday","setuid","setutxent","setvbuf","setxattr","sf_hdtr","shift","shm_atime","shm_cpid","shm_ctime","shm_dtime","shm_internal","shm_lpid","shm_nattch","shm_open","shm_perm","shm_segsz","shm_unlink","shmat","shmatt_t","shmctl","shmdt","shmget","shmid_ds","shutdown","si_addr","si_addr","si_code","si_errno","si_pid","si_pid","si_signo","si_status","si_status","si_uid","si_uid","si_value","sigaction","sigaction","sigaddset","sigaltstack","sigdelset","sigemptyset","sigev_notify","sigev_notify_attributes","sigev_signo","sigev_value","sigevent","sigfillset","sighandler_t","siginfo_t","sigismember","signal","sigpending","sigprocmask","sigset_t","sigval","sigwait","sin6_addr","sin6_family","sin6_flowinfo","sin6_len","sin6_port","sin6_scope_id","sin_addr","sin_addr","sin_family","sin_family","sin_len","sin_len","sin_other","sin_port","sin_port","sin_srcaddr","sin_tos","sin_zero","sival_ptr","size","size_allocated","size_in_use","size_t","sizeofcmds","sizeofcmds","sleep","sleep_time","slot_num","snprintf","sockaddr","sockaddr_ctl","sockaddr_dl","sockaddr_in","sockaddr_in6","sockaddr_inarp","sockaddr_storage","sockaddr_un","socket","socketpair","socklen_t","speculative_count","speculative_count","speed_t","sprintf","srand","srand48","ss_family","ss_flags","ss_len","ss_size","ss_sp","ss_sysaddr","sscanf","ssize_t","st_atime","st_atime_nsec","st_birthtime","st_birthtime_nsec","st_blksize","st_blocks","st_ctime","st_ctime_nsec","st_dev","st_flags","st_gen","st_gid","st_ino","st_lspare","st_mode","st_mtime","st_mtime_nsec","st_nlink","st_qspare","st_rdev","st_size","st_uid","stabil","stack_t","stat","stat","statfs","statfs","status","statvfs","statvfs","stbcnt","stpcpy","stpncpy","strcasecmp","strcasestr","strcat","strchr","strcmp","strcoll","strcpy","strcspn","strdup","strerror","strerror_r","strlen","strncasecmp","strncat","strncmp","strncpy","strndup","strnlen","strpbrk","strrchr","strsignal","strspn","strstr","strtod","strtof","strtok","strtok_r","strtol","strtonum","strtoul","strxfrm","sun_family","sun_len","sun_path","suseconds_t","suspend_count","suspend_count","swapins","swapouts","symlink","symlinkat","sync","syscall","sysconf","sysctl","sysctlbyname","sysctlnametomib","sysdir_get_next_search_path_enumeration","sysdir_search_path_directory_t","sysdir_search_path_domain_mask_t","sysdir_search_path_enumeration_state","sysdir_start_search_path_enumeration","syslog","sysname","system","system_time","system_time","system_time","tai","task_count","task_flavor_t","task_for_pid","task_info","task_info_t","task_t","task_thread_times_info","task_thread_times_info_data_t","task_thread_times_info_t","tcdrain","tcflag_t","tcflow","tcflush","tcgetattr","tcgetpgrp","tcgetsid","tcsendbreak","tcsetattr","tcsetpgrp","telldir","termios","thousands_sep","thread_affinity_policy","thread_affinity_policy_data_t","thread_affinity_policy_t","thread_background_policy","thread_background_policy_data_t","thread_background_policy_t","thread_basic_info","thread_basic_info_data_t","thread_basic_info_t","thread_count","thread_extended_info","thread_extended_info_data_t","thread_extended_info_t","thread_extended_policy","thread_extended_policy_data_t","thread_extended_policy_t","thread_flavor_t","thread_handle","thread_id","thread_identifier_info","thread_identifier_info_data_t","thread_identifier_info_t","thread_info","thread_info_t","thread_inspect_t","thread_latency_qos_policy","thread_latency_qos_policy_data_t","thread_latency_qos_policy_t","thread_latency_qos_t","thread_latency_qos_tier","thread_policy_flavor_t","thread_policy_get","thread_policy_set","thread_policy_t","thread_precedence_policy","thread_precedence_policy_data_t","thread_precedence_policy_t","thread_standard_policy","thread_standard_policy_data_t","thread_standard_policy_t","thread_t","thread_throughput_qos_policy","thread_throughput_qos_policy_data_t","thread_throughput_qos_policy_t","thread_throughput_qos_t","thread_throughput_qos_tier","thread_time_constraint_policy","thread_time_constraint_policy_data_t","thread_time_constraint_policy_t","throttled_count","time","time","time_state","time_t","time_value_t","timegm","times","timeshare","timespec","timeval","timeval32","timex","timezone","tm","tm_gmtoff","tm_hour","tm_isdst","tm_mday","tm_min","tm_mon","tm_sec","tm_wday","tm_yday","tm_year","tm_zone","tmpfile","tmpnam","tms","tms_cstime","tms_cutime","tms_stime","tms_utime","tolerance","tolower","total_uncompressed_pages_in_compressor","toupper","trailers","trl_cnt","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ttyname","ttyname_r","tv_nsec","tv_sec","tv_sec","tv_sec","tv_usec","tv_usec","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uc_link","uc_mcontext","uc_mcsize","uc_onstack","uc_sigmask","uc_stack","ucontext_t","udata","udata","uid","uid_t","uint16_t","uint32_t","uint64_t","uint8_t","uintmax_t","uintptr_t","umask","uname","ungetc","unlink","unlinkat","unlockpt","unmount","unsetenv","useconds_t","uselocale","user_time","user_time","user_time","usleep","ut_host","ut_id","ut_line","ut_pid","ut_tv","ut_type","ut_user","utimbuf","utime","utimensat","utimes","utmpx","utmpxname","utsname","uuid","uuid_t","val","version","vi_fsid","vi_pad","vi_stat","vi_type","vinfo_stat","vip_path","vip_vi","virtual_size","vm_address_t","vm_deallocate","vm_inherit_t","vm_map_t","vm_offset_t","vm_page_size","vm_prot_t","vm_range_t","vm_size_t","vm_statistics","vm_statistics64","vm_statistics64_data_t","vm_statistics64_t","vm_statistics_data_t","vm_statistics_t","vmaddr","vmaddr","vmsize","vmsize","vnode_info","vnode_info_path","vst_atime","vst_atimensec","vst_birthtime","vst_birthtimensec","vst_blksize","vst_blocks","vst_ctime","vst_ctimensec","vst_dev","vst_flags","vst_gen","vst_gid","vst_ino","vst_mode","vst_mtime","vst_mtimensec","vst_nlink","vst_qspare","vst_rdev","vst_size","vst_uid","wait","wait4","waitid","waitpid","wchar_t","wcslen","wcstombs","winsize","wire_count","wire_count","wmemchr","write","writev","ws_col","ws_row","ws_xpixel","ws_ypixel","xsu_avail","xsu_encrypted","xsu_pagesize","xsu_total","xsu_used","xsw_usage","xucred","zero_fill_count","zero_fill_count"],"q":["libcd":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","data includes security that replaces the TFO-cookie","data is idempotent","resume connect() on read/writehird Party Connect","Any distributed FS","IP6 Auth Header","any host internal protocol","any private encr. scheme","Argus","AX.25 Frames","BHA","Bulk Data Transfer","BackRoom SATNET Monitoring","CFTP","Chaos","Control Message Transport","Comp. Prot. HeartBeat","Comp. Prot. Net. Executive","Datagram Delivery","dissimilar gateway prot.","divert pseudo-protocol","last return value of *_input(), meaning “all job for …","IP6 destination option","exterior gateway protocol","EMCON","encapsulation header","ISO cnlp","IP6 Encap Sec. Payload","Ethernet IP encapsulation","IP6 fragmentation header","gateway2 (deprecated)","GMTP","General Routing Encap.","“hello” routing protocol","Host Monitoring","IP6 hop-by-hop options","","","xns idp","InterDomain Policy Routing","InterDomain Routing","group mgmt protocol","NSFNET-IGP","Cisco/GXS IGRP","IL transport protocol","Integ. Net Layer Security","Merit Internodal","","payload compression (IPComp)","Packet Core Utility","IP encapsulated in IP","for compatibility","Pluribus Packet Core","","Reliable Transaction","Kryptolan","Locus Address Resoloution","Leaf-1","Leaf-2","","DCN Measurement Subsystems","Mobile Host Routing","Mobile Int.ing control","Multicast Transport","Multiplexing","Sun net disk proto (temp.)","Next Hop Resolution","IP6 no next header","Network Services","network voice protocol","OSPFIGP","PGM","private interior gateway","Protocol Independent Mcast","Packet Radio Measurement","pup","Packet Video Protocol","raw IP packet","BBN RCC Monitoring","Reliable Data","IP6 routing header","resource reservation","Remote Virtual Disk","SATNET/Backroom EXPAK","Satnet Monitoring","Semaphore Comm. security","SCTP","Source Demand Routing","Sequential Exchange","Strite RPC protocol","Stream protocol II.","Secure VMTP","IP with encryption","TCF","","tp-4 w/ class negotiation","TP++ Transport","Trunk-1","Trunk-2","TTP","","Banyon VINES","VISA Protocol","VMTP","WIDEBAND EXPAK","WIDEBAND Monitoring","Wang Span Network","Cross Net Debuggersae_associd_t)(-1ULL))","","((sae_connid_tnable/Disable TCP Fastopen on this socketcode>__int128</code> (a GCC extension that’s part of many ABIs)","C __int128_t (alternate name for __int128)","","","","","","","C <code>unsigned __int128</code> (a GCC extension that’s part of many …","C __uint128_t (alternate name for __uintquivalent to C’s <code>void</code> type when used as a pointer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Notesalls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codehe 64-bit libc on Solaris and illumos only has readdir_r. …if":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,1],[4,4],[[3,1],1],[4,4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[5,6]],[[5,6],7],[[5,6]],0,[6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[5,5],5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[8,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,7],0,[5,5],[5,7],[5,7],[5,7],[5,7],0,0,0,[5,5],[5,5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[6,6],[34,34],[3,3],[1,1],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99],[100,100],[101,101],[102,102],[103,103],[104,104],[105,105],[106,106],[107,107],[108,108],[109,109],[110,110],[111,111],[112,112],[113,113],[114,114],[115,115],[116,116],[117,117],[118,118],[119,119],[120,120],[121,121],[122,122],[123,123],[124,124],[125,125],[126,126],[127,127],[128,128],[129,129],[130,130],[131,131],[132,132],[133,133],[134,134],[135,135],[136,136],[137,137],[138,138],[139,139],[140,140],[141,141],[142,142],[143,143],[144,144],[145,145],[146,146],[147,147],[148,148],[149,149],[150,150],[151,151],[152,152],[153,153],[154,154],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[155,156],[[158,[157]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],159],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[56,155],0,0,0,[56,160],0,0,[56,5],0,[56,161],0,[56,25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],[[],158],0,0,0,0,0,0,0,0,[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[[3,"cmsghdr"],[6,"c_uchar"],[3,"msghdr"],[6,"c_uint"],[6,"c_int"],[3,"fd_set"],[15,"bool"],[15,"u8"],[15,"u32"],[4,"DIR"],[4,"FILE"],[4,"fpos_t"],[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"fsid_t"],[3,"if_nameindex"],[3,"regex_t"],[3,"regmatch_t"],[3,"sockaddr_un"],[3,"utsname"],[4,"timezone"],[4,"qos_class_t"],[4,"sysdir_search_path_directory_t"],[4,"sysdir_search_path_domain_mask_t"],[3,"ip_mreq"],[3,"ip_mreqn"],[3,"ip_mreq_source"],[3,"aiocb"],[3,"glob_t"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"pthread_mutexattr_t"],[3,"pthread_condattr_t"],[3,"pthread_rwlockattr_t"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"kevent64_s"],[3,"dqblk"],[3,"if_msghdr"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"proc_taskinfo"],[3,"proc_bsdinfo"],[3,"proc_taskallinfo"],[3,"xsw_usage"],[3,"xucred"],[3,"mach_header"],[3,"mach_header_64"],[3,"segment_command"],[3,"segment_command_64"],[3,"load_command"],[3,"sockaddr_dl"],[3,"sockaddr_inarp"],[3,"sockaddr_ctl"],[3,"in_pktinfo"],[3,"in6_pktinfo"],[3,"ipc_perm"],[3,"sembuf"],[3,"arphdr"],[3,"in_addr"],[3,"sa_endpoints_t"],[3,"timex"],[3,"ntptimeval"],[3,"thread_standard_policy"],[3,"thread_extended_policy"],[3,"thread_time_constraint_policy"],[3,"thread_precedence_policy"],[3,"thread_affinity_policy"],[3,"thread_background_policy"],[3,"thread_latency_qos_policy"],[3,"thread_throughput_qos_policy"],[3,"malloc_statistics_t"],[3,"mstats"],[3,"vm_range_t"],[3,"sched_param"],[3,"vinfo_stat"],[3,"vnode_info"],[3,"vnode_info_path"],[3,"proc_vnodepathinfo"],[3,"vm_statistics"],[3,"task_thread_times_info"],[3,"rusage_info_v0"],[3,"rusage_info_v1"],[3,"rusage_info_v2"],[3,"rusage_info_v3"],[3,"rusage_info_v4"],[3,"image_offset"],[3,"kevent"],[3,"semid_ds"],[3,"shmid_ds"],[3,"proc_threadinfo"],[3,"statfs"],[3,"dirent"],[3,"pthread_rwlock_t"],[3,"pthread_mutex_t"],[3,"pthread_cond_t"],[3,"sockaddr_storage"],[3,"utmpx"],[3,"sigevent"],[3,"processor_cpu_load_info"],[3,"processor_basic_info"],[3,"processor_set_basic_info"],[3,"processor_set_load_info"],[3,"time_value_t"],[3,"thread_basic_info"],[3,"thread_identifier_info"],[3,"thread_extended_info"],[3,"if_data64"],[3,"if_msghdr2"],[3,"vm_statistics64"],[3,"mach_task_basic_info"],[3,"log2phys"],[19,"semun"],[3,"timeval32"],[3,"if_data"],[3,"bpf_hdr"],[3,"pthread_attr_t"],[3,"malloc_zone_t"],[3,"max_align_t"],[3,"ucontext_t"],[3,"__darwin_mcontext64"],[3,"__darwin_arm_exception_state64"],[3,"__darwin_arm_thread_state64"],[3,"__darwin_arm_neon_state64"],[3,"in6_addr"],[4,"c_void"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"mach_port_t"],[6,"pid_t"],[6,"uid_t"],[3,"TypeId"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":[2,2,2,2,2,2,2,2,2,2,2,13,2,2,2,4,2,16,2,13,2,2,8,8,8,8,2,8,8,2,3,2,2,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,11,11,11,11,0,0,2,2,5,5,5,0,11,11,11,11,11,10,0,0,11,11,12,2,0,0,2,0,0,2,11,11,11,11,11,11,11,2,8,8,8,10,10,10,10,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,10,10,10,10,10,10,10,10,10,8,8,8,10,10,11,10,11,10,10,10,11,10,11,10,10,10,10,10,10,10,10,10,10,11,10,10,11,10,10,10,11,10,10,10,10,11,10,11,10,10,10,10,10,10,11,10,11,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,10,10,11,10,11,10,11,8,8,11,10,5,10,11,11,5,10,8,10,10,10,10,11,10,10,11,10,10,10,10,10,10,10,11,10,10,10,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,8,8,10,10,10,10,8,16,10,8,8,16,10,10,8,8,8,10,10,10,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,10,16,8,5,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,5,10,5,10,10,10,5,10],"n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","Empty","Euclid","Float","FloatConst","FloatErrorKind","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","real","sign","signum","to_string","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_rem_euclid","div_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":["num_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::bounds","","","","","","","num_traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::identities","","","","","","","","","","num_traits::int","","","","","","","","","","","","","","","","","","","","num_traits::ops","","","","","","","num_traits::ops::checked","","","","","","","","","","","","","","","","num_traits::ops::euclid","","","","","","num_traits::ops::inv","","","num_traits::ops::mul_add","","","","","num_traits::ops::overflowing","","","","","","num_traits::ops::saturating","","","","","","","","","num_traits::ops::wrapping","","","","","","","","","","","","num_traits::pow","","","","","num_traits::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::sign","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","","","","","The trait for <code>Num</code> references which implement numeric …","","","","","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix (typically <code>2..=36</code>).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,35,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,5,0,0,0,0,0,0,0,0,2,5,5,2,5,35,0,0,2,5,5,0,0,0,0,0,0,0,5,2,5,2,5,2,5,0,0,0,0,36,37,36,38,0,0,0,0,39,0,11,40,40,40,40,40,40,40,40,40,40,40,40,40,40,13,13,13,13,13,13,13,13,13,13,13,13,13,13,41,41,41,41,41,41,41,41,41,41,0,0,0,41,41,41,41,41,41,41,41,41,42,43,42,42,42,42,42,42,42,42,42,42,43,43,42,42,42,42,43,42,42,42,42,42,43,42,43,42,43,42,43,42,42,43,42,43,42,43,42,43,42,43,42,43,42,42,42,42,42,42,43,43,42,42,43,43,42,43,42,42,43,42,43,42,43,42,42,42,43,42,43,42,43,42,43,42,42,42,42,42,42,43,42,43,42,42,43,0,0,29,30,0,29,29,30,0,30,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,46,32,47,48,49,50,51,0,0,52,52,53,53,0,54,54,0,0,55,55,56,0,0,0,57,58,59,0,0,0,0,60,61,62,60,63,0,0,0,0,0,0,64,65,66,67,68,69,70,0,0,0,70,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,0,0,34,0,34,34,34,0,34],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[1,1,1],1],[[1,1],1],[[1,1],1],0,[[2,3],4],[[5,3],4],[[5,3],4],[[]],[[]],[[6,7],8],0,0,[[]],[[]],0,0,0,0,0,0,0,0,[[],9],[[],8],[[],8],[[],8],[[],8],[[],10],[[],10],0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[]],[11,[[12,[11]]]],[13,12],[14,12],[15,12],[16,12],[17,12],[18,12],[19,12],[20,12],[21,12],[22,12],[23,12],[7,12],[24,12],[25,12],[26,12],[[],[[12,[14]]]],[[],[[12,[15]]]],[[],[[12,[16]]]],[[],[[12,[17]]]],[[],[[12,[18]]]],[[],[[12,[19]]]],[[],[[12,[20]]]],[[],[[12,[21]]]],[[],[[12,[22]]]],[[],[[12,[23]]]],[[],[[12,[7]]]],[[],[[12,[24]]]],[[],[[12,[25]]]],[[],[[12,[26]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],27],[[],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],28],[[],28],[[],29],[[]],[[]],[[]],[[],30],[[]],0,[[],7],[[],7],[[]],[[]],[[],7],[[],7],[7],[[]],[7],[7],[7],[7],[[]],[[]],[[]],[[],7],[[],7],[7],[7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],12],[[],12],[[],12],[[],12],[[],12],[7,12],[7,12],[[],12],0,0,[[],12],[[],12],[[]],[[]],0,0,[[]],0,0,0,[[]],[[]],0,0,0,[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[7],[7],[[]],0,0,[[[0,[31,29,32]],26],[[12,[[0,[31,29,32]]]]]],[[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,33]]]]]]]]]]]]]]]]]],26],[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,33]]]]]]]]]]]]]]]]]]]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],28],[[],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[34,34],[[]],[[34,34],34],[[]],[[],28],[[],28],[34,34],[[]]],"p":[[8,"PartialOrd"],[4,"FloatErrorKind"],[3,"Formatter"],[6,"Result"],[3,"ParseFloatError"],[15,"str"],[15,"u32"],[4,"Result"],[3,"String"],[3,"TypeId"],[8,"NumCast"],[4,"Option"],[8,"ToPrimitive"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[4,"FpCategory"],[15,"bool"],[8,"One"],[8,"Zero"],[8,"Clone"],[8,"CheckedMul"],[8,"Mul"],[8,"Signed"],[8,"Num"],[8,"Bounded"],[8,"UpperBounded"],[8,"LowerBounded"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"FloatConst"],[8,"Float"],[8,"FloatCore"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"CheckedEuclid"],[8,"Euclid"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Pow"],[8,"Real"]]},\
"parity_scale_codec":{"doc":"Parity SCALE Codec","t":[12,12,12,12,16,8,3,8,24,8,3,8,24,8,8,8,8,24,8,8,8,3,8,8,8,8,3,16,8,8,3,8,3,16,16,16,8,8,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10],"n":["0","0","0","0","As","Codec","Compact","CompactAs","CompactAs","CompactLen","CompactRef","Decode","Decode","DecodeAll","DecodeLength","DecodeLimit","Encode","Encode","EncodeAppend","EncodeAsRef","EncodeLike","Error","FullCodec","FullEncode","HasCompact","Input","IoReader","Item","Joiner","KeyedVec","OptionBool","Output","Ref","RefType","Type","Wrapped","WrapperTypeDecode","WrapperTypeEncode","and","append_or_new","ascend_ref","ascend_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","compact_len","compact_len","compact_len","compact_len","compact_len","compact_len","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode_all","decode_all_with_depth_limit","decode_from","decode_with_depth_limit","deref","descend_ref","descend_ref","deserialize","encode","encode","encode","encode","encode","encode_as","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encoded_fixed_size","encoded_fixed_size","encoded_size","encoded_size","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","len","partial_cmp","push_byte","push_byte","read","read","read_byte","read_byte","remaining_len","remaining_len","serialize","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","skip","skip","source","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","using_encoded","using_encoded","using_encoded","using_encoded","using_encoded","using_encoded","using_encoded","using_encoded","using_encoded","using_encoded","using_encoded","write"],"q":["parity_scale_codecd":["","","","","A compact-encodable type that should be used as the …","Trait that allows zero-copy read/write of value-references …","Compact-encoded variant of T. This is more space-efficient …","Allow foreign structs to be wrap in Compact","Derive <code>parity_scale_codec::Compact</code> and …","Something that can return the compact encoded length for a …","Compact-encoded variant of &amp;’a T. This is more …","Trait that allows zero-copy read of value-references from …","Derive <code>parity_scale_codec::Decode</code> and for struct and enum.","Extension trait to <code>Decode</code> that ensures that the given …","Trait that allows the length of a collection to be read, …","Extension trait to <code>Decode</code> for decoding with a maximum …","Trait that allows zero-copy write of value-references to …","Derive <code>parity_scale_codec::Encode</code> and …","Trait that allows to append items to an encoded …","Something that can be encoded as a reference.","A marker trait that tells the compiler that a type encode …","Error type.","Trait that bound <code>EncodeLike</code> along with <code>Codec</code>. Usefull for …","Trait that bound <code>EncodeLike</code> along with <code>Encode</code>. Usefull for …","Trait that tells you if a given type can be …","Trait that allows reading of data into a slice.","Wrapper that implements Input for any <code>Read</code> type.","The item that will be appended.","Trait to allow itself to be serialised into a value which …","Trait to allow itself to be serialised and prepended by a …","Shim type because we can’t do a specialised …","Trait that allows writing of data.","Reference wrapper that implement encode like any type that …","The reference type that is used for encoding.","The compact type; this can be","A wrapped type.","A marker trait for types that can be created solely from …","A marker trait for types that wrap other encodable type.","Append encoding of value to <code>Self</code>.","Append all items in <code>iter</code> to the given <code>self_encoded</code> …","Ascend to previous structure level when decoding. This is …","Ascend to previous structure level when decoding. This is …","","","","","","","","","","","","","Chain error message with description.","","","","","","","","","","Returns the compact encoded length for the given value.","","","","","","Attempt to deserialise the value from input.","","","","","","","","","Decode <code>Self</code> and consume all of the given input data.","Decode <code>Self</code> and consume all of the given input data.","Decode <code>Self</code> from the compact-decoded type.","Decode <code>Self</code> with the given maximum recursion depth and …","","Descend into nested reference when decoding. This is …","Descend into nested reference when decoding. This is …","","Convert self to an owned vector.","Convert self to an owned vector.","","","","Returns the compact-encodable type.","Convert self to a slice and append it to the destination.","Convert self to a slice and append it to the destination.","","","","","","","","","Returns the fixed encoded size of the type.","Returns the fixed encoded size of the type.","Calculates the encoded size.","Calculates the encoded size.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the number of elements in <code>self_encoded</code>.","","Write a single byte to the output.","Write a single byte to the output.","Read the exact number of bytes required to fill the given …","","Read a single byte from the input.","Read a single byte from the input.","Should return the remaining length of the input data. If …","","","If possible give a hint of expected size of the encoding.","If possible give a hint of expected size of the encoding.","","","","","","","","","Attempt to skip the encoded value from input.","Attempt to skip the encoded value from input.","","Return an encoding of <code>Self</code> prepended by given slice.","","","","","","","","","","","","","","","","","","","","","","","","Convert self to a slice and then invoke the given closure …","Convert self to a slice and then invoke the given closure …","","","","","","","","","","Write to the output."],"i":[32,8,10,11,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,0,0,0,0,0,39,40,41,0,0,42,38,43,43,32,21,8,10,11,3,32,21,8,10,11,3,3,8,10,11,3,8,10,11,3,10,44,10,10,10,10,10,45,8,10,10,10,10,10,10,10,46,47,37,47,21,43,43,10,19,19,10,11,11,37,19,19,10,11,11,11,11,11,11,11,45,45,19,19,8,10,11,3,8,10,3,3,32,21,21,8,10,10,10,10,11,11,3,3,3,32,21,8,10,11,3,48,10,49,49,43,32,43,43,43,32,10,19,19,8,10,11,11,11,11,11,11,45,45,3,50,8,10,11,3,3,32,21,8,10,11,3,32,21,8,10,11,3,32,21,8,10,11,3,19,19,8,10,11,11,11,11,11,11,11,49],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[[2,[1]]],[[4,[[2,[1]],3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[3,[7,[[6,[5]]]]],3],[8,8],[[[10,[9]]],[[10,[9]]]],[[[11,[9]]],[[11,[9]]]],[3,3],[[]],[[]],[[]],[[]],[[[10,[12]],10],13],[[],14],[15,14],[16,14],[17,14],[18,14],[1,14],[[],[[4,[3]]]],[[],[[4,[8,3]]]],[[],[[4,[10,3]]]],[[],[[4,[10,3]]]],[[],[[4,[[10,[17]],3]]]],[[],[[4,[[10,[1]],3]]]],[[],[[4,[[10,[16]],3]]]],[[],[[4,[[10,[18]],3]]]],[[],[[4,[[10,[15]],3]]]],[[],[[4,[3]]]],[18,[[4,[3]]]],[[],[[4,[3]]]],[18,[[4,[3]]]],[[[21,[[20,[19]],19]]]],[[],[[4,[3]]]],[[],[[4,[3]]]],[[],[[4,[10]]]],[[],[[2,[1]]]],[[],[[2,[1]]]],[10,[[2,[1]]]],[11,[[2,[1]]]],[11,[[2,[1]]]],[[]],[[]],[[]],[10],[11],[[[11,[18]]]],[[[11,[15]]]],[[[11,[1]]]],[[[11,[17]]]],[11],[[[11,[16]]]],[[],[[22,[14]]]],[[],[[22,[14]]]],[[],14],[[],14],[[8,8],23],[[[10,[24]],10],23],[[[11,[24]],11],23],[[3,3],23],[[8,25],26],[[10,25],26],[[3,25],26],[[3,25],26],[[]],[[]],[[],[[21,[[20,[19]],19]]]],[[]],[[],[[10,[27]]]],[28],[[]],[[],10],[[],11],[[]],[[]],[29,3],[5,3],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[4,[14,3]]]],[[[10,[30]],10],[[22,[13]]]],[1],[1],[[],[[4,[3]]]],[[[32,[31]]],[[4,[3]]]],[[],[[4,[1,3]]]],[[],[[4,[1,3]]]],[[],[[4,[[22,[14]],3]]]],[[[32,[31]]],[[4,[[22,[14]],3]]]],[10,4],[[],14],[[],14],[8,14],[10,14],[11,14],[[[11,[15]]],14],[[[11,[1]]],14],[[[11,[17]]],14],[[[11,[18]]],14],[[[11,[16]]],14],[[],[[4,[3]]]],[[],[[4,[3]]]],[3,[[22,[33]]]],[[],[[2,[1]]]],[[]],[[]],[[]],[[]],[[],34],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[36],[36],[[8,36]],[[10,36]],[[11,36]],[[[11,[18]],36]],[[[11,[15]],36]],[[[11,[17]],36]],[[11,36]],[[[11,[1]],36]],[[[11,[16]],36]],[[]]],"p":[[15,"u8"],[3,"Vec"],[3,"Error"],[4,"Result"],[15,"str"],[4,"Cow"],[8,"Into"],[3,"OptionBool"],[8,"Clone"],[3,"Compact"],[3,"CompactRef"],[8,"Ord"],[4,"Ordering"],[15,"usize"],[15,"u16"],[15,"u64"],[15,"u128"],[15,"u32"],[8,"Encode"],[8,"EncodeLike"],[3,"Ref"],[4,"Option"],[15,"bool"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Copy"],[15,"never"],[3,"Error"],[8,"PartialOrd"],[8,"Read"],[3,"IoReader"],[8,"Error"],[3,"String"],[3,"TypeId"],[8,"FnOnce"],[8,"CompactAs"],[8,"EncodeAppend"],[8,"EncodeAsRef"],[8,"HasCompact"],[8,"WrapperTypeDecode"],[8,"Joiner"],[8,"Input"],[8,"CompactLen"],[8,"Decode"],[8,"DecodeAll"],[8,"DecodeLimit"],[8,"DecodeLength"],[8,"Output"],[8,"KeyedVec"]]},\
"parity_scale_codec_derive":{"doc":"Derives serialization and deserialization codec for …","t":[24,24,24],"n":["CompactAs","Decode","Encode"],"q":["parity_scale_codec_derive","",""],"d":["Derive <code>parity_scale_codec::Compact</code> and …","Derive <code>parity_scale_codec::Decode</code> and for struct and enum.","Derive <code>parity_scale_codec::Encode</code> and …"],"i":[0,0,0],"f":[0,0,0],"p":[]},\
"paste":{"doc":"github crates-io docs-rs","t":[14],"n":["paste"],"q":["paste"],"d":[""],"i":[0],"f":[0],"p":[]},\
"ppv_lite86":{"doc":"","t":[8,8,8,8,8,8,8,8,8,8,16,8,8,8,8,8,8,8,8,8,8,8,8,8,10,10,14,14,14,14,10,10,10,0,10,10,10,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,16,10,11,11,10,10,10,11,11,2,2,2,10,10,10,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,6,3,6,6,3,6,6,6,11,11,11,11,11,11,11,19,3,3,11,11,11,11],"n":["AndNot","ArithOps","BSwap","BitOps0","BitOps128","BitOps32","BitOps64","LaneWords4","Machine","MultiLane","Output","RotateEachWord128","RotateEachWord32","RotateEachWord64","Store","StoreBytes","Swap64","UnsafeFrom","VZip","Vec2","Vec4","Vec4Ext","Vector","Words4","andnot","bswap","dispatch","dispatch_light128","dispatch_light256","dispatch_light512","extract","extract","from_lanes","generic","insert","insert","instance","read_be","read_be","read_le","read_le","rotate_each_word_right11","rotate_each_word_right12","rotate_each_word_right16","rotate_each_word_right20","rotate_each_word_right24","rotate_each_word_right25","rotate_each_word_right32","rotate_each_word_right7","rotate_each_word_right8","shuffle1230","shuffle2301","shuffle3012","shuffle_lane_words1230","shuffle_lane_words2301","shuffle_lane_words3012","swap1","swap16","swap2","swap32","swap4","swap64","swap8","to_lanes","to_scalars","transpose4","u128x1","u128x1","u128x2","u128x2","u128x4","u128x4","u32x4","u32x4","u32x4x2","u32x4x2","u32x4x4","u32x4x4","u64x2","u64x2","u64x2x2","u64x2x2","u64x2x4","u64x2x4","u64x4","u64x4","unpack","unpack","unpack","unsafe_from","unsafe_read_be","unsafe_read_le","vec","vec","vec128_storage","vec256_storage","vec512_storage","vzip","write_be","write_le","G0","G1","GenericMachine","add","add","add","add_assign","add_assign","add_assign","andnot","andnot","andnot","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bswap","bswap","bswap","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","eq","eq","eq","eq","eq","eq","extract","extract","extract","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_lanes","from_lanes","from_lanes","from_lanes","insert","insert","insert","instance","into","into","into","into","into","into","into","into","into","new128","new128","not","not","not","rotate_each_word_right11","rotate_each_word_right11","rotate_each_word_right11","rotate_each_word_right12","rotate_each_word_right12","rotate_each_word_right12","rotate_each_word_right16","rotate_each_word_right16","rotate_each_word_right16","rotate_each_word_right20","rotate_each_word_right20","rotate_each_word_right20","rotate_each_word_right24","rotate_each_word_right24","rotate_each_word_right24","rotate_each_word_right25","rotate_each_word_right25","rotate_each_word_right25","rotate_each_word_right32","rotate_each_word_right32","rotate_each_word_right7","rotate_each_word_right7","rotate_each_word_right7","rotate_each_word_right8","rotate_each_word_right8","rotate_each_word_right8","shuffle1230","shuffle1230","shuffle2301","shuffle2301","shuffle3012","shuffle3012","shuffle_lane_words1230","shuffle_lane_words2301","shuffle_lane_words3012","split128","split128","swap1","swap1","swap1","swap16","swap16","swap16","swap2","swap2","swap2","swap32","swap32","swap32","swap4","swap4","swap4","swap64","swap64","swap64","swap8","swap8","swap8","to_lanes","to_lanes","to_lanes","to_lanes","to_scalars","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128x1_generic","u128x2_generic","u128x4_generic","u32x4_generic","u32x4x2_generic","u32x4x4_generic","u64x2_generic","u64x2x2_generic","u64x2x4_generic","u64x4_generic","unpack","unpack","unpack","unsafe_read_be","unsafe_read_be","unsafe_read_le","unsafe_read_le","vec128_storage","vec256_storage","vec512_storage","write_be","write_be","write_le","write_le"],"q":["ppv_lite86","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ppv_lite86::genericd":["","Ops that depend on word size","","Ops that are independent of word size and endian","","","","A vector composed one or more lanes each composed of four …","","A vector composed of multiple 128-bit lanes.","","","","","","","Exchange neigboring ranges of bits of the specified size","","Combine single vectors into a multi-lane vector.","A vector composed of two elements, which may be words or …","A vector composed of four elements, which may be words or …","Vec4 functions which may not be implemented yet for all …","","A vector composed of four words; depending on their size, …","","","","","","","","","Build a multi-lane vector from individual lanes.","","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","Split a multi-lane vector into single-lane vectors.","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","Safety","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,0,0,0,0,22,23,24,0,22,23,25,25,25,25,25,26,26,26,26,26,26,27,26,26,28,28,28,29,29,29,30,30,30,30,30,30,30,24,31,32,0,25,0,25,0,25,0,25,0,25,0,25,0,25,0,25,0,25,0,25,2,25,25,33,34,34,25,25,0,0,0,35,34,34,0,0,0,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,6,7,8,9,3,4,5,10,11,6,7,8,9,3,4,5,10,11,3,4,5,6,7,8,9,3,4,5,10,11,6,7,8,6,7,8,3,4,5,13,3,4,3,4,5,6,6,6,6,6,6,7,7,8,9,3,4,5,10,11,13,3,4,5,13,3,4,9,6,7,8,9,3,4,5,10,11,7,8,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,4,5,3,4,5,3,4,5,13,3,13,3,13,3,3,3,3,7,8,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,13,3,4,5,17,6,7,8,9,3,4,5,10,11,6,7,8,9,3,4,5,10,11,6,7,8,9,3,4,5,10,11,0,0,0,0,0,0,0,0,0,0,3,4,5,3,4,3,4,0,0,0,3,4,3,4],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,0,0,0,[1],[1],[[]],0,[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],0,0,0,[[3,3]],[[4,4]],[[5,5]],[[3,3]],[[4,4]],[[5,5]],[[3,3]],[[4,4]],[[5,5]],[[3,3]],[[4,4]],[[5,5]],[[3,3]],[[4,4]],[[5,5]],[[3,3]],[[4,4]],[[5,5]],[[3,3]],[[4,4]],[[5,5]],[[3,3]],[[4,4]],[[5,5]],[[3,3]],[[4,4]],[[5,5]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[3,3],[4,4],[5,5],[10,10],[11,11],[[],6],[[],7],[[],8],[[6,6],12],[[7,7],12],[[8,8],12],[[3,3],12],[[4,4],12],[[5,5],12],[[13,1],14],[[3,1],1],[[4,1],14],[[3,15],16],[[4,15],16],[[5,15],16],[3,6],[[],6],[[],6],[[]],[4,6],[5,6],[[],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],3],[[],4],[[],5],[[13,14,1],13],[[3,1,1],3],[[4,14,1],4],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],8],[3],[4],[5],[3,3],[4,4],[5,5],[3,3],[4,4],[5,5],[3,3],[4,4],[5,5],[3,3],[4,4],[5,5],[3,3],[4,4],[5,5],[3,3],[4,4],[5,5],[4,4],[5,5],[3,3],[4,4],[5,5],[3,3],[4,4],[5,5],[13,13],[3,3],[13,13],[3,3],[13,13],[3,3],[3,3],[3,3],[3,3],[7],[8],[3,3],[4,4],[5,5],[3,3],[4,4],[5,5],[3,3],[4,4],[5,5],[3,3],[4,4],[5,5],[3,3],[4,4],[5,5],[3,3],[4,4],[5,5],[3,3],[4,4],[5,5],[13],[3],[4],[5],[17],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,0,0,0,0,0,0,0,0,0,[6,3],[6,4],[6,5],[[],3],[[],4],[[],3],[[],4],0,0,0,[3],[4],[3],[4]],"p":[[15,"u32"],[8,"Store"],[3,"u32x4_generic"],[3,"u64x2_generic"],[3,"u128x1_generic"],[19,"vec128_storage"],[3,"vec256_storage"],[3,"vec512_storage"],[3,"GenericMachine"],[3,"G0"],[3,"G1"],[15,"bool"],[6,"u64x4_generic"],[15,"u64"],[3,"Formatter"],[6,"Result"],[6,"u32x4x4_generic"],[4,"Result"],[3,"TypeId"],[8,"AndNot"],[8,"BSwap"],[8,"Vec2"],[8,"Vec4"],[8,"MultiLane"],[8,"Machine"],[8,"RotateEachWord32"],[8,"RotateEachWord64"],[8,"Words4"],[8,"LaneWords4"],[8,"Swap64"],[8,"Vector"],[8,"Vec4Ext"],[8,"UnsafeFrom"],[8,"StoreBytes"],[8,"VZip"]]},\
"proc_macro2":{"doc":"github crates-io docs-rs","t":[13,13,13,4,3,13,3,13,13,3,3,13,13,13,3,13,4,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,2,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delimiter","eq","eq","eq","eq","extend","extend","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","resolved_at","set_span","set_span","set_span","set_span","set_span","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","0","0","0","0","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","to_owned","try_from","try_into","type_id"],"q":["proc_macroproc_macro2::TokenTree","","","","proc_macro2::token_stream","","","","","","","","","","","","","",""],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns the delimiter of this <code>Group</code>","","","","","","","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[9,8,8,0,0,6,0,6,9,0,0,6,8,8,0,6,0,0,0,0,1,16,5,4,6,7,8,1,9,10,3,16,5,4,6,7,8,1,9,10,3,3,4,3,5,4,6,7,8,1,9,10,3,5,4,6,7,8,1,9,10,3,10,5,7,8,9,10,10,5,5,3,3,3,3,16,16,5,5,4,6,6,7,7,8,1,1,9,10,10,3,3,16,5,5,5,4,4,6,6,6,6,6,7,8,1,9,10,3,5,5,5,3,10,3,3,3,3,3,3,3,3,3,3,16,5,4,6,7,8,1,9,10,3,5,5,3,3,4,4,4,5,7,1,10,10,10,4,6,7,1,10,3,1,16,6,7,1,10,3,7,7,7,3,3,5,4,6,7,8,1,9,10,3,16,5,6,7,1,10,3,0,16,5,4,6,7,8,1,9,10,3,16,5,4,6,7,8,1,9,10,3,16,5,4,6,7,8,1,9,10,3,3,3,3,3,3,3,3,3,3,3,4,3,3,40,41,42,43,0,0,28,28,28,28,28,28,28,28,28,28,28,28,28],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],4],[2,3],[5,5],[4,4],[6,6],[7,7],[8,8],[1,1],[9,9],[10,10],[3,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[10,10],11],[[],5],[7,8],[[8,8],12],[[9,9],12],[10,12],[[10,10],12],[[5,13]],[[5,13]],[14,3],[14,3],[15,3],[15,3],[[16,17],18],[[16,17],18],[[5,17],18],[[5,17],18],[[4,17],18],[[6,17],18],[[6,17],18],[[7,17],18],[[7,17],18],[[8,17],18],[[1,17],18],[[1,17],18],[[9,17],18],[[10,17],18],[[10,17],18],[[3,17],18],[[3,17],18],[[]],[6,5],[[]],[19,5],[[]],[20,4],[10,6],[1,6],[3,6],[7,6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,5],[13,5],[21,[[22,[5,16]]]],[21,[[22,[3,16]]]],[10],[23,3],[23,3],[24,3],[24,3],[25,3],[25,3],[26,3],[26,3],[27,3],[27,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,28],[5,12],[29,3],[29,3],[[4,4],[[30,[4]]]],[[4,4],4],[[],4],[[],5],[[8,5],7],[[2,9],1],[[21,4],10],[[21,4],10],[[10,10],[[30,[11]]]],[[4,4],4],[[6,4]],[[7,4]],[[1,4]],[[10,4]],[[3,4]],[1,9],[16,4],[6,4],[7,4],[1,4],[10,4],[3,4],[7,4],[7,4],[7,5],[21,3],[[3,[32,[31]]],[[30,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],0,[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[35,3],[35,3],[36,3],[36,3],[37,3],[37,3],[38,3],[38,3],[39,3],[39,3],[4,20],[31,3],[31,3],0,0,0,0,0,0,[[]],[[]],[28,28],[[]],[[28,17],18],[[]],[[]],[[]],[28,[[30,[6]]]],[[]],[[],22],[[],22],[[],34]],"p":[[3,"Punct"],[15,"char"],[3,"Literal"],[3,"Span"],[3,"TokenStream"],[4,"TokenTree"],[3,"Group"],[4,"Delimiter"],[4,"Spacing"],[3,"Ident"],[4,"Ordering"],[15,"bool"],[8,"IntoIterator"],[15,"f32"],[15,"f64"],[3,"LexError"],[3,"Formatter"],[6,"Result"],[3,"TokenStream"],[3,"Span"],[15,"str"],[4,"Result"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"IntoIter"],[15,"isize"],[4,"Option"],[15,"usize"],[8,"RangeBounds"],[3,"String"],[3,"TypeId"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"u8"],[13,"Group"],[13,"Ident"],[13,"Punct"],[13,"Literal"]]},\
"proc_macro_crate":{"doc":"   Build Status","t":[13,13,13,4,4,13,13,13,13,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12],"n":["CargoManifestDirNotSet","CouldNotRead","CrateNotFound","Error","FoundCrate","InvalidToml","Itself","Name","NotFound","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","crate_name","eq","fmt","fmt","fmt","from","from","into","into","source","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","crate_name","path","path","source","source","0"],"q":["proc_macro_crate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","proc_macro_crate::Error","","","","","","proc_macro_crate::FoundCrate"],"d":["","","","Error type used by this crate.","The crate as found by <code>crate_name</code>.","","The searched crate is this crate itself.","The searched crate was found with this name.","","","","","","","","Find the crate name for the given <code>orig_name</code> in the current …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[3,3,3,0,0,3,1,1,3,3,1,3,1,1,1,0,1,3,3,1,3,1,3,1,3,1,3,3,1,3,1,3,1,12,13,14,13,14,15,16],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[[]],[2,[[4,[1,3]]]],[[1,1],5],[[3,6],7],[[3,6],7],[[1,6],7],[[]],[[]],[[]],[[]],[3,[[9,[8]]]],[[]],[[],10],[[],4],[[],4],[[],4],[[],4],[[],11],[[],11],0,0,0,0,0,0,0],"p":[[4,"FoundCrate"],[15,"str"],[4,"Error"],[4,"Result"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Error"],[4,"Option"],[3,"String"],[3,"TypeId"],[13,"NotFound"],[13,"CrateNotFound"],[13,"CouldNotRead"],[13,"InvalidToml"],[13,"Name"]]},\
"quote":{"doc":"github crates-io docs-rs","t":[8,8,8,10,10,10,10,10,14,11,11,14,14,11,11,11,11,10],"n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":["quote","","","","","","","","","","","","","","","","",""],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,6,6,6,6,7,0,8,8,0,0,7,7,8,8,8],"f":[0,0,0,[[]],[[]],[[]],[[]],[1,2],0,[[],3],[[],3],0,0,[[],[[5,[4]]]],[[],[[5,[4]]]],[[],3],[[],3],[3]],"p":[[3,"Formatter"],[6,"Result"],[3,"TokenStream"],[3,"Span"],[4,"Option"],[8,"TokenStreamExt"],[8,"IdentFragment"],[8,"ToTokens"]]},\
"radium":{"doc":"<code>radium</code> provides a series of helpers for a uniform API over …","t":[16,8,10,10,10,10,10,10,10,10,10,10,10,10,14,10,10,0,10,10,10,0,8,8,6,6,6,6,6,6,6,6,6,6,6,6],"n":["Item","Radium","compare_and_swap","compare_exchange","compare_exchange_weak","fence","fetch_add","fetch_and","fetch_nand","fetch_or","fetch_sub","fetch_update","fetch_xor","get_mut","if_atomic","into_inner","load","marker","new","store","swap","types","BitOps","NumericOps","RadiumBool","RadiumI16","RadiumI32","RadiumI64","RadiumI8","RadiumIsize","RadiumPtr","RadiumU16","RadiumU32","RadiumU64","RadiumU8","RadiumUsize"],"q":["radium","","","","","","","","","","","","","","","","","","","","","","radium::marker","","radium::types","","","","","","","","","","",""],"d":["","A maybe-atomic shared mutable fundamental type <code>T</code>.","Stores a value into this object if the currently-stored …","Stores a value into this object if the currently-stored …","Stores a value into this object if the currently-stored …","If the underlying value is atomic, calls <code>fence</code> with the …","Adds <code>value</code> to the currently-stored value, wrapping on …","Performs a bitwise “and” on the currently-stored value …","Performs a bitwise “nand” on the currently-stored …","Performs a bitwise “or” on the currently-stored value …","Subtracts <code>value</code> from the currently-stored value, wrapping …","Fetches the value, and applies a function to it that …","Performs a bitwise “xor” on the currently-stored value …","Returns a mutable reference to the underlying value.","Conditional compilation based on the presence of atomic …","Consumes the wrapper and returns the contained value.","Load a value from this object.","Marker traits used by <code>Radium</code>.","Creates a new value of this type.","Store a value in this object.","Swap with the value stored in this object.","Best-effort atomic types","Types supporting maybe-atomic bitwise operations.","Types supporting maybe-atomic arithmetic operations.","Best-effort atomic <code>bool</code> type.","Best-effort atomic <code>i16</code> type.","Best-effort atomic <code>i32</code> type.","Best-effort atomic <code>i64</code> type.","Best-effort atomic <code>i8</code> type.","Best-effort atomic <code>isize</code> type.","Best-effort atomic pointer type.","Best-effort atomic <code>u16</code> type.","Best-effort atomic <code>u32</code> type.","Best-effort atomic <code>u64</code> type.","Best-effort atomic <code>u8</code> type.","Best-effort atomic <code>usize</code> type."],"i":[3,0,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,[1],[[1,1],2],[[1,1],2],[1],[1],[1],[1],[1],[1],[[1,1],2],[1],[[]],0,[[]],[1],0,[[]],[1],[1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[[4,"Ordering"],[4,"Result"],[8,"Radium"]]},\
"rand":{"doc":"Utilities for random number generation","t":[18,8,3,8,18,8,8,16,8,11,11,11,0,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,10,0,5,11,11,0,11,11,11,11,11,0,11,11,5,11,10,11,11,10,11,11,11,11,13,3,3,4,3,3,8,8,13,13,13,3,3,3,3,13,3,4,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,0,8,8,8,16,3,3,3,3,3,8,16,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,4,3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,11,11,11,11,11,11,11,11,11,11,2,2,2,2,2,2,2,2,2,2,2,3,3,3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,3,8,11,11,10,11,10,11,11,10,10,11,10,10,11,11,0,11,11,11,11,10,10,11,11,11,11,11,4,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CUSTOM_START","CryptoRng","Error","Fill","INTERNAL_START","Rng","RngCore","Seed","SeedableRng","borrow","borrow_mut","code","distributions","fill","fill","fill_bytes","fmt","fmt","from","from","from","from_entropy","from_rng","from_seed","gen","gen","gen_bool","gen_bool","gen_range","gen_range","gen_ratio","gen_ratio","inner","into","new","next_u32","next_u64","prelude","random","raw_os_error","read","rngs","sample","sample","sample_iter","sample_iter","seed_from_u64","seq","source","take_inner","thread_rng","to_string","try_fill","try_fill","try_fill","try_fill_bytes","try_from","try_into","type_id","vzip","AllWeightsZero","Alphanumeric","Bernoulli","BernoulliError","DistIter","DistMap","DistString","Distribution","InvalidProbability","InvalidWeight","NoItem","Open01","OpenClosed01","Slice","Standard","TooMany","Uniform","WeightedError","WeightedIndex","append_string","append_string","append_string","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_ratio","into","into","into","into","into","into","into","into","into","into","into_iter","map","map","new","new","next","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_iter","sample_iter","sample_string","sample_string","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uniform","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weighted","SampleBorrow","SampleRange","SampleUniform","Sampler","Uniform","UniformChar","UniformDuration","UniformFloat","UniformInt","UniformSampler","X","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","is_empty","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","AllWeightsZero","InvalidWeight","NoItem","TooMany","WeightedError","WeightedIndex","alias_method","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","from","from","into","into","new","sample","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","update_weights","vzip","vzip","Weight","WeightedIndex","borrow","borrow_mut","fmt","from","into","new","try_from","try_into","type_id","vzip","CryptoRng","Distribution","IteratorRandom","Rng","RngCore","SeedableRng","SliceRandom","StdRng","ThreadRng","random","thread_rng","OsRng","StdRng","ThreadRng","adapter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","eq","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from_rng","from_seed","into","into","into","mock","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ReadError","ReadRng","ReseedingRng","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","from","from","from","into","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reseed","source","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","StepRng","borrow","borrow_mut","clone","clone_into","eq","fill_bytes","fmt","from","into","new","next_u32","next_u64","to_owned","try_fill_bytes","try_from","try_into","type_id","vzip","Item","IteratorRandom","SliceChooseIter","SliceRandom","borrow","borrow_mut","choose","choose","choose_multiple","choose_multiple","choose_multiple_fill","choose_multiple_weighted","choose_mut","choose_stable","choose_weighted","choose_weighted_mut","fmt","from","index","into","into_iter","len","next","partial_shuffle","shuffle","size_hint","try_from","try_into","type_id","vzip","IndexVec","IndexVecIntoIter","IndexVecIter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","fmt","from","from","from","from","from","index","into","into","into","into_iter","into_iter","into_iter","into_vec","is_empty","iter","len","next","next","sample","sample_weighted","size_hint","size_hint","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["rand","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributionsrand::distributions::uniform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributions::weighted","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributions::weighted::alias_method","","","","","","","","","","","","rand::prelude","","","","","","","","","","","rand::rngs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::rngs::adapter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::rngs::mock","","","","","","","","","","","","","","","","","","","rand::seq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::seq::index","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an <code>RngCore</code> or …","Error type of random number generators","Types which may be filled with random data","Codes below this point represent OS Errors (i.e. positive …","An automatically-implemented extension trait on <code>RngCore</code> …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","","","Retrieve the error code, if any.","Generating random samples from probability distributions","Fill any type implementing <code>Fill</code> with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> with random data.","","","","","Returns the argument unchanged.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Return a random value supporting the <code>Standard</code> distribution.","Return a random value supporting the <code>Standard</code> distribution.","Return a bool with a probability <code>p</code> of being true.","Return a bool with a probability <code>p</code> of being true.","Generate a random value in the given range.","Generate a random value in the given range.","Return a bool with a probability of <code>numerator/denominator</code> …","Return a bool with a probability of <code>numerator/denominator</code> …","Reference the inner error (<code>std</code> only)","Calls <code>U::from(self)</code>.","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Convenience re-export of common members","Generates a random value using the thread-local random …","Extract the raw OS error code (if this error came from the …","","Random number generators and adapters","Sample a new value, using the given distribution.","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","Sequence-related functionality","","Unwrap the inner error (<code>std</code> only)","Retrieve the lazily-initialized thread-local random number …","","Fill self with random data","Fill any type implementing <code>Fill</code> with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> entirely with random data.","","","","","All items in the provided weight collection are zero.","Sample a <code>u8</code>, uniformly distributed over ASCII letters and …","The Bernoulli distribution.","Error type returned from <code>Bernoulli::new</code>.","An iterator that generates random values of <code>T</code> with …","A distribution of values of type <code>S</code> derived from the …","<code>String</code> sampler","Types (distributions) that can be used to create a random …","<code>p &lt; 0</code> or <code>p &gt; 1</code>.","A weight is either less than zero, greater than the …","The provided weight collection contains no items.","A distribution to sample floating point numbers uniformly …","A distribution to sample floating point numbers uniformly …","A distribution to sample items uniformly from a slice.","A generic random value distribution, implemented for many …","Too many weights are provided (length greater than <code>u32::MAX</code>…","Sample values uniformly between two bounds.","Error type returned from <code>WeightedIndex::new</code>.","A distribution using weighted sampling of discrete items","Append <code>len</code> random chars to <code>string</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Construct a new <code>Bernoulli</code> with the probability of success …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a distribution of values of ‘S’ by mapping the …","Create a distribution of values of ‘S’ by mapping the …","Construct a new <code>Bernoulli</code> with the given probability of …","Create a new <code>Slice</code> instance which samples uniformly from …","","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an iterator that generates random values of <code>T</code>, …","Create an iterator that generates random values of <code>T</code>, …","Generate a <code>String</code> of <code>len</code> random chars","Generate a <code>String</code> of <code>len</code> random chars","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A distribution uniformly sampling numbers within a given …","","","","","","","","","","","Weighted index sampling","Helper trait similar to <code>Borrow</code> but implemented only for …","Range that supports generating a single sample efficiently.","Helper trait for creating objects using the correct …","The <code>UniformSampler</code> implementation supporting type <code>X</code>.","Sample values uniformly between two bounds.","The back-end implementing <code>UniformSampler</code> for <code>char</code>.","The back-end implementing <code>UniformSampler</code> for <code>Duration</code>.","The back-end implementing <code>UniformSampler</code> for …","The back-end implementing <code>UniformSampler</code> for integer types.","Helper trait handling actual uniform sampling.","The type sampled by this implementation.","Immutably borrows from an owned value. See <code>Borrow::borrow</code>","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check whether the range is empty.","Construct self, with inclusive lower bound and exclusive …","Create a new <code>Uniform</code> instance which samples uniformly from …","","","","","","","","","","","","","","","","","Construct self, with inclusive bounds <code>[low, high]</code>.","Create a new <code>Uniform</code> instance which samples uniformly from …","","","","","","","","","","","","","","","","","Sample a value.","","","","","","","","","","","","","","","","","Generate a sample from the given range.","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All items in the provided weight collection are zero.","A weight is either less than zero, greater than the …","The provided weight collection contains no items.","Too many weights are provided (length greater than <code>u32::MAX</code>…","Error type returned from <code>WeightedIndex::new</code>.","A distribution using weighted sampling of discrete items","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new a <code>WeightedIndex</code> <code>Distribution</code> using the values","","","","","","","","","","","Update a subset of weights, without changing the number of …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","A random number generator that retrieves randomness from …","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","A reference to the thread-local generator","Wrappers / adapters forming RNGs","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Mock random number generator","","","","","","","","","","","","","","","","","","","","","","","","","<code>ReadRng</code> error type","An RNG that reads random bytes straight from any type …","A wrapper around any PRNG that implements <code>BlockRngCore</code>, …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>ReadRng</code> from a <code>Read</code>.","Create a new <code>ReseedingRng</code> from an existing PRNG, combined …","","","","","Reseed the internal PRNG.","","","","","","","","","","","","","","","","","","A simple implementation of <code>RngCore</code> for testing purposes.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a <code>StepRng</code>, yielding an arithmetic sequence starting …","","","","","","","","","The element type.","Extension trait on iterators, providing random sampling …","An iterator over multiple slice elements.","Extension trait on slices, providing random mutation and …","","","Returns a reference to one random element of the slice, or …","Choose one element at random from the iterator.","Chooses <code>amount</code> elements from the slice at random, without …","Collects <code>amount</code> values at random from the iterator into a …","Collects values at random from the iterator into a …","Similar to <code>choose_multiple</code>, but where the likelihood of …","Returns a mutable reference to one random element of the …","Choose one element at random from the iterator.","Similar to <code>choose</code>, but where the likelihood of each …","Similar to <code>choose_mut</code>, but where the likelihood of each …","","Returns the argument unchanged.","Low-level API for sampling indices","Calls <code>U::from(self)</code>.","","","","Shuffle a slice in place, but exit early.","Shuffle a mutable slice in place.","","","","","","A vector of indices.","Return type of <code>IndexVec::into_iter</code>.","Return type of <code>IndexVec::iter</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return the value at the given <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert into an iterator over the indices as a sequence of …","","","Return result as a <code>Vec&lt;usize&gt;</code>. Conversion may or may not …","Returns <code>true</code> if the length is 0.","Iterate over the indices as a sequence of <code>usize</code> values","Returns the number of indices","","","Randomly sample exactly <code>amount</code> distinct indices from …","Randomly sample exactly <code>amount</code> distinct indices from …","","","","","","","","","","","","","","","",""],"i":[1,0,0,0,1,0,0,80,0,1,1,1,0,81,81,14,1,1,1,1,1,80,80,80,81,81,81,81,81,81,81,81,1,1,1,14,14,0,0,1,14,0,81,81,81,81,80,0,1,1,0,1,82,81,81,14,1,1,1,1,63,0,0,0,0,0,0,0,27,63,63,0,0,0,0,63,0,0,0,83,24,25,26,27,18,37,28,29,24,31,33,25,26,27,18,37,28,29,24,31,33,25,26,27,28,29,24,31,33,25,26,27,28,29,24,31,33,25,26,27,33,26,27,27,18,37,28,29,24,31,33,25,26,27,18,37,28,29,24,31,33,33,33,25,26,26,27,18,37,28,29,24,31,33,25,18,17,17,26,31,18,17,26,37,28,28,29,29,24,31,33,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,17,17,83,83,18,26,27,28,29,24,31,33,25,27,26,27,18,37,28,29,24,31,33,25,26,27,18,37,28,29,24,31,33,25,26,27,18,37,28,29,24,31,33,25,0,26,27,18,37,28,29,24,31,33,25,0,0,0,0,32,0,0,0,0,0,0,84,85,56,57,58,59,56,57,58,59,56,57,58,59,56,57,58,59,56,58,56,57,58,59,56,57,58,59,56,57,58,59,86,84,33,56,56,56,56,56,56,56,56,56,56,56,56,57,58,58,59,84,33,56,56,56,56,56,56,56,56,56,56,56,56,57,58,58,59,84,56,56,56,56,56,56,56,56,56,56,56,56,57,58,58,59,86,84,56,56,56,56,56,56,56,56,56,56,56,56,58,58,84,56,56,56,56,56,56,56,56,56,56,56,56,56,57,58,59,56,57,58,59,56,57,58,59,56,57,58,59,56,57,58,59,63,63,63,63,0,0,0,62,63,62,63,62,63,62,63,62,63,62,63,63,62,63,62,63,62,62,62,63,63,62,63,62,63,62,63,62,62,63,0,0,65,65,65,65,65,65,65,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,68,21,67,68,21,67,68,21,67,68,21,67,21,68,67,68,21,67,68,21,67,68,21,68,68,67,68,21,0,67,68,21,67,68,21,67,68,21,67,68,21,67,68,21,67,68,21,67,68,21,67,68,21,0,0,0,71,72,69,71,72,69,69,69,71,69,71,72,72,69,71,72,69,71,72,69,71,69,71,69,71,69,69,72,69,72,71,69,71,72,69,71,72,69,71,72,69,71,72,69,0,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,87,0,0,0,74,74,87,88,87,88,88,87,87,88,87,87,74,74,0,74,74,74,74,87,87,74,74,74,74,74,0,0,0,77,79,78,77,79,78,77,78,77,78,77,77,79,78,77,77,77,79,78,77,77,79,78,77,79,78,77,77,77,77,79,78,0,0,79,78,77,78,77,79,78,77,79,78,77,79,78,77,79,78],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[1,[[3,[2]]]],0,[[]],[[]],[[]],[[1,4],[[6,[5]]]],[[1,4],[[6,[5]]]],[2,1],[7,1],[[]],[[]],[[],[[6,[1]]]],[[]],[[]],[[]],[8,9],[8,9],[[]],[[]],[[10,10],9],[[10,10],9],[1,11],[[]],[[],1],[[],10],[[],12],0,[[]],[1,[[3,[13]]]],[14,[[6,[15,16]]]],0,[17],[17],[[],18],[[],18],[12],0,[1,[[3,[11]]]],[1,[[20,[11,19]]]],[[],21],[[],22],[[],[[6,[1]]]],[[],[[6,[1]]]],[[],[[6,[1]]]],[[],[[6,[1]]]],[[],6],[[],6],[[],23],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[22,15]],[[24,22,15]],[[25,22,15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[26,26],[27,27],[28,28],[29,29],[24,24],[[[31,[30]]],[[31,[30]]]],[[[33,[[0,[30,32]]]]],[[33,[[0,[30,32]]]]]],[25,25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[26,26],9],[[27,27],9],[[[33,[[0,[34,32]]]],33],9],[[26,4],35],[[27,4],35],[[27,4],35],[[[18,[36,36,36]],4],35],[[[37,[36,36,36,36]],4],35],[[28,4],35],[[29,4],35],[[24,4],35],[[[31,[36]],4],35],[[[33,[[0,[36,32]]]],4],35],[[25,4],35],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[38,[32]]],[[33,[32]]]],[[[39,[32]]],[[33,[32]]]],[[]],[[10,10],[[6,[26,27]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],37],[[],37],[8,[[6,[26,27]]]],[[],[[6,[31,0]]]],[18,3],[[]],[26,9],[37],[28,8],[28,40],[29,40],[29,8],[24,41],[31],[[[33,[32]]],32],[25],[25],[25],[25,42],[25,43],[25,44],[25,45],[25,2],[25],[25,46],[25],[25],[25],[25,47],[25],[25],[25],[25],[25],[25],[25],[25],[25],[25],[25],[25],[25],[25],[25],[25],[25,12],[25],[25,10],[25],[25],[25,41],[25,48],[25],[25],[25],[25,3],[25],[25],[25],[25],[25],[25],[25],[25],[25],[25],[25,9],[25],[25,15],[25,49],[25,50],[25,13],[25,51],[25],[25],[25,52],[25],[25,53],[25],[25],[25,54],[25],[25,40],[25,8],[25,55],[[],18],[[],18],[15,22],[15,22],[18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],22],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[56,[30]]],[[56,[30]]]],[57,57],[[[58,[30]]],[[58,[30]]]],[59,59],[[]],[[]],[[]],[[]],[[[56,[34]],56],9],[[[58,[34]],58],9],[[[56,[36]],4],35],[[57,4],35],[[[58,[36]],4],35],[[59,4],35],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[]],[[],[[33,[32]]]],[[],[[56,[12]]]],[[],[[56,[50]]]],[[],[[56,[41]]]],[[],[[56,[42]]]],[[],[[56,[13]]]],[[],[[56,[10]]]],[[],[[56,[53]]]],[[],[[56,[52]]]],[[],[[56,[51]]]],[[],[[56,[55]]]],[[],[[56,[15]]]],[[],[[56,[49]]]],[[],57],[[],[[58,[40]]]],[[],[[58,[8]]]],[[],59],[[]],[[],[[33,[32]]]],[[],[[56,[53]]]],[[],[[56,[15]]]],[[],[[56,[51]]]],[[],[[56,[12]]]],[[],[[56,[49]]]],[[],[[56,[55]]]],[[],[[56,[50]]]],[[],[[56,[10]]]],[[],[[56,[13]]]],[[],[[56,[42]]]],[[],[[56,[52]]]],[[],[[56,[41]]]],[[],57],[[],[[58,[40]]]],[[],[[58,[8]]]],[[],59],[[]],[[[56,[10]]]],[[[56,[49]]]],[[[56,[50]]]],[[[56,[15]]]],[[[56,[13]]]],[[[56,[51]]]],[[[56,[12]]]],[[[56,[52]]]],[[[56,[42]]]],[[[56,[41]]]],[[[56,[53]]]],[[[56,[55]]]],[57],[[[58,[40]]]],[[[58,[8]]]],[59,60],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],23],[[],23],[[],23],[[],23],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[62,[[0,[30,32,61]]]]],[[62,[[0,[30,32,61]]]]]],[63,63],[[]],[[]],[[[62,[[0,[34,32,61]]]],62],9],[[63,63],9],[[[62,[[0,[36,32,61]]]],4],35],[[63,4],35],[[63,4],35],[[]],[[]],[[]],[[]],[[],[[6,[[62,[[0,[32,61]]]],63]]]],[62,15],[[]],[[]],[[],22],[[],6],[[],6],[[],6],[[],6],[[],23],[[],23],[[[62,[[0,[32,61]]]]],[[6,[63]]]],[[]],[[]],0,0,[[]],[[]],[[[65,[[0,[36,64]]]],4],35],[[]],[[]],[[[66,[64]]],[[6,[[65,[64]],63]]]],[[],6],[[],6],[[],23],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[67,67],[68,68],[21,21],[[]],[[]],[[]],[[],67],[[],21],[[68,68],9],[67],[68],[21],[[67,4],[[6,[5]]]],[[68,4],35],[[21,4],35],[[]],[[]],[[]],[14,[[6,[68,1]]]],[[],68],[[]],[[]],[[]],0,[67,10],[68,10],[21,10],[67,12],[68,12],[21,12],[[]],[[]],[[]],[67,[[6,[1]]]],[68,[[6,[1]]]],[21,[[6,[1]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],23],[[],23],[[],23],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[69,69],[[]],[[[71,[70]]]],[[[69,[14]]]],[[[71,[36]],4],35],[[72,4],35],[[72,4],35],[[[69,[36,36]],4],35],[[]],[[]],[[]],[[]],[[]],[[]],[70,[[71,[70]]]],[12,69],[[[71,[70]]],10],[[[69,[14]]],10],[[[71,[70]]],12],[[[69,[14]]],12],[69,[[6,[1]]]],[72,[[3,[11]]]],[[]],[[],22],[[[71,[70]]],[[6,[1]]]],[[[69,[14]]],[[6,[1]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],23],[[],23],[[],23],[[]],[[]],[[]],0,[[]],[[]],[73,73],[[]],[[73,73],9],[73],[[73,4],35],[[]],[[]],[[12,12],73],[73,10],[73,12],[[]],[73,[[6,[1]]]],[[],6],[[],6],[[],23],[[]],0,0,0,0,[[]],[[]],[[],3],[[],3],[15,74],[15,66],[[],15],[15,[[6,[74,63]]]],[[],3],[[],3],[[],[[6,[63]]]],[[],[[6,[63]]]],[[[74,[[0,[36,75]],36]],4],35],[[]],0,[[]],[[]],[[[74,[[0,[[76,[15]],75]]]]],15],[[[74,[[0,[[76,[15]],75]]]]],3],[15],[[]],[[[74,[[0,[[76,[15]],75]]]]]],[[],6],[[],6],[[],23],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[77,77],[78,78],[[]],[[]],[[77,77],9],[[77,4],35],[[79,4],35],[[78,4],35],[[[66,[10]]],77],[[[66,[15]]],77],[[]],[[]],[[]],[[77,15],15],[[]],[[]],[[]],[77,78],[[]],[[]],[77,[[66,[15]]]],[77,9],[77,79],[77,15],[79,[[3,[15]]]],[78,3],[[15,15],77],[[15,15],[[6,[77,63]]]],[79],[78],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],23],[[],23],[[],23],[[]],[[]],[[]]],"p":[[3,"Error"],[3,"NonZeroU32"],[4,"Option"],[3,"Formatter"],[3,"Error"],[4,"Result"],[3,"Error"],[15,"f64"],[15,"bool"],[15,"u32"],[8,"Error"],[15,"u64"],[15,"i32"],[8,"RngCore"],[15,"usize"],[3,"Error"],[8,"Distribution"],[3,"DistIter"],[3,"Global"],[3,"Box"],[3,"ThreadRng"],[3,"String"],[3,"TypeId"],[3,"Alphanumeric"],[3,"Standard"],[3,"Bernoulli"],[4,"BernoulliError"],[3,"OpenClosed01"],[3,"Open01"],[8,"Clone"],[3,"Slice"],[8,"SampleUniform"],[3,"Uniform"],[8,"PartialEq"],[6,"Result"],[8,"Debug"],[3,"DistMap"],[3,"RangeInclusive"],[3,"Range"],[15,"f32"],[15,"u8"],[15,"u16"],[3,"NonZeroUsize"],[3,"NonZeroU128"],[3,"NonZeroU64"],[3,"NonZeroU16"],[3,"NonZeroU8"],[3,"Wrapping"],[15,"i8"],[15,"i16"],[15,"u128"],[15,"i64"],[15,"i128"],[15,"char"],[15,"isize"],[3,"UniformInt"],[3,"UniformChar"],[3,"UniformFloat"],[3,"UniformDuration"],[3,"Duration"],[8,"PartialOrd"],[3,"WeightedIndex"],[4,"WeightedError"],[8,"Weight"],[3,"WeightedIndex"],[3,"Vec"],[3,"OsRng"],[3,"StdRng"],[3,"ReseedingRng"],[8,"Read"],[3,"ReadRng"],[3,"ReadError"],[3,"StepRng"],[3,"SliceChooseIter"],[8,"Sized"],[8,"Index"],[4,"IndexVec"],[4,"IndexVecIntoIter"],[4,"IndexVecIter"],[8,"SeedableRng"],[8,"Rng"],[8,"Fill"],[8,"DistString"],[8,"UniformSampler"],[8,"SampleBorrow"],[8,"SampleRange"],[8,"SliceRandom"],[8,"IteratorRandom"]]},\
"rand_chacha":{"doc":"The ChaCha random number generator.","t":[3,3,3,3,3,3,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ChaCha12Core","ChaCha12Rng","ChaCha20Core","ChaCha20Rng","ChaCha8Core","ChaCha8Rng","ChaChaCore","ChaChaRng","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_seed","from_seed","from_seed","from_seed","from_seed","from_seed","generate","generate","generate","get_seed","get_seed","get_seed","get_stream","get_stream","get_stream","get_word_pos","get_word_pos","get_word_pos","into","into","into","into","into","into","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","rand_core","set_stream","set_stream","set_stream","set_word_pos","set_word_pos","set_word_pos","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["rand_chacha","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["ChaCha with 12 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds","A cryptographically secure random number generator that …","ChaCha with 8 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds, low-level interface","ChaCha with 20 rounds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Get the seed.","Get the seed.","Get the seed.","Get the stream number.","Get the stream number.","Get the stream number.","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Set the stream number.","Set the stream number.","Set the stream number.","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,2,4,6,1,2,3,4,5,6,1,2,2,3,4,4,5,6,6,1,2,3,4,5,6,1,3,5,2,4,6,2,4,6,2,4,6,1,2,3,4,5,6,2,4,6,2,4,6,0,2,4,6,2,4,6,1,2,3,4,5,6,2,4,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],7],[[2,2],7],[[3,3],7],[[4,4],7],[[5,5],7],[[6,6],7],[2],[4],[6],[[1,8],9],[[2,8],9],[[3,8],9],[[4,8],9],[[5,8],9],[[6,8],9],[[]],[1,2],[[]],[[]],[[]],[3,4],[[]],[5,6],[[]],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[1],[3],[5],[2],[4],[6],[2,10],[4,10],[6,10],[2,11],[4,11],[6,11],[[]],[[]],[[]],[[]],[[]],[[]],[2,12],[4,12],[6,12],[2,10],[4,10],[6,10],0,[[2,10]],[[4,10]],[[6,10]],[[2,11]],[[4,11]],[[6,11]],[[]],[[]],[[]],[[]],[[]],[[]],[2,[[14,[13]]]],[4,[[14,[13]]]],[6,[[14,[13]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"ChaCha20Core"],[3,"ChaCha20Rng"],[3,"ChaCha12Core"],[3,"ChaCha12Rng"],[3,"ChaCha8Core"],[3,"ChaCha8Rng"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u64"],[15,"u128"],[15,"u32"],[3,"Error"],[4,"Result"],[3,"TypeId"]]},\
"rand_core":{"doc":"Random number generation traits","t":[18,8,3,18,3,8,16,8,0,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,0,11,11,11,0,11,10,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,3,3,8,16,16,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5],"n":["CUSTOM_START","CryptoRng","Error","INTERNAL_START","OsRng","RngCore","Seed","SeedableRng","block","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","code","default","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from","from_entropy","from_rng","from_seed","impls","inner","into","into","le","new","next_u32","next_u32","next_u64","next_u64","raw_os_error","read","seed_from_u64","source","take_inner","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","BlockRng","BlockRng64","BlockRngCore","Item","Results","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","core","core","fill_bytes","fill_bytes","fmt","fmt","from","from","from_rng","from_rng","from_seed","from_seed","generate","generate_and_set","generate_and_set","index","index","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reset","reset","seed_from_u64","seed_from_u64","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","fill_bytes_via_next","fill_via_u32_chunks","fill_via_u64_chunks","next_u32_via_fill","next_u64_via_fill","next_u64_via_u32","read_u32_into","read_u64_into"],"q":["rand_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand_core::block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand_core::impls","","","","","","rand_core::le",""],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an <code>RngCore</code> or …","Error type of random number generators","Codes below this point represent OS Errors (i.e. positive …","A random number generator that retrieves randomness from …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","The <code>BlockRngCore</code> trait and implementation helpers","","","","","","","Retrieve the error code, if any.","","Fill <code>dest</code> with random data.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Helper functions for implementing <code>RngCore</code> functions.","Reference the inner error (<code>std</code> only)","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Little-Endian utilities","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","","Return the next random <code>u64</code>.","","Extract the raw OS error code (if this error came from the …","","Create a new PRNG using a <code>u64</code> seed.","","Unwrap the inner error (<code>std</code> only)","","","Fill <code>dest</code> entirely with random data.","","","","","","","","A wrapper type implementing <code>RngCore</code> for some type …","A wrapper type implementing <code>RngCore</code> for some type …","A trait for RNGs which do not generate random numbers …","Results element type, e.g. <code>u32</code>.","Results type. This is the ‘block’ an RNG implementing …","","","","","","","","","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Generate a new block of results.","Generate a new set of results immediately, setting the …","Generate a new set of results immediately, setting the …","Get the index into the result buffer.","Get the index into the result buffer.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>BlockRng</code> from an existing RNG implementing …","Create a new <code>BlockRng</code> from an existing RNG implementing …","","","","","Reset the number of available results. This will force a …","Reset the number of available results. This will force a …","","","","","","","","","","","","","Implement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>next_u32</code>, little-endian order.","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>."],"i":[2,0,0,2,0,0,25,0,0,2,1,2,1,1,1,2,1,8,1,2,2,1,2,2,2,1,25,25,25,0,2,2,1,0,2,8,1,8,1,2,8,25,2,2,1,2,8,1,2,1,2,1,2,1,0,0,0,20,20,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,20,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[[]],[2,[[4,[3]]]],[[],1],[[]],[1],[[2,5],6],[[2,5],6],[[1,5],6],[3,2],[7,2],[[]],[[]],[[]],[8,[[9,[2]]]],[[]],0,[2,10],[[]],[[]],0,[[],2],[[],11],[1,11],[[],12],[1,12],[2,[[4,[13]]]],[8,[[9,[14,15]]]],[12],[2,[[4,[10]]]],[2,[[16,[10]]]],[[]],[[],17],[[],[[9,[2]]]],[1,[[9,[2]]]],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],0,0,0,0,0,[[]],[[]],[[]],[[]],[[[22,[[0,[19,20,21]]]]],[[22,[[0,[19,20,21]]]]]],[[[23,[[0,[19,20,21]]]]],[[23,[[0,[19,20,21]]]]]],[[]],[[]],0,0,[[[22,[20]]]],[[[23,[20]]]],[[[22,[[0,[20,24]]]],5],6],[[[23,[[0,[20,24]]]],5],6],[[]],[[]],[8,[[9,[[22,[[0,[20,25]]]],2]]]],[8,[[9,[[23,[[0,[20,25]]]],2]]]],[[],[[22,[[0,[20,25]]]]]],[[],[[23,[[0,[20,25]]]]]],[[]],[[[22,[20]],14]],[[[23,[20]],14]],[[[22,[20]]],14],[[[23,[20]]],14],[[]],[[]],[20,[[22,[20]]]],[20,[[23,[20]]]],[[[22,[20]]],11],[[[23,[20]]],11],[[[22,[20]]],12],[[[23,[20]]],12],[[[22,[20]]]],[[[23,[20]]]],[12,[[22,[[0,[20,25]]]]]],[12,[[23,[[0,[20,25]]]]]],[[]],[[]],[[[22,[20]]],[[9,[2]]]],[[[23,[20]]],[[9,[2]]]],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[]],[[]],[[]],[[],11],[[],12],[[],12],[[]],[[]]],"p":[[3,"OsRng"],[3,"Error"],[3,"NonZeroU32"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"Error"],[8,"RngCore"],[4,"Result"],[8,"Error"],[15,"u32"],[15,"u64"],[15,"i32"],[15,"usize"],[3,"Error"],[3,"Box"],[3,"String"],[3,"TypeId"],[8,"Clone"],[8,"BlockRngCore"],[8,"Sized"],[3,"BlockRng"],[3,"BlockRng64"],[8,"Debug"],[8,"SeedableRng"]]},\
"scale_info":{"doc":"Efficient and space-efficient serialization of Rust types.","tn":["Array","BitSequence","Bool","Char","Compact","Composite","Field","I128","I16","I256","I32","I64","I8","Identity","IntoPortable","InvalidIdentifier","MetaType","MissingSegments","Output","Path","PathError","PortableRegistry","Primitive","Registry","Sequence","StaticTypeInfo","Str","Tuple","Type","TypeDef","TypeDefArray","TypeDefBitSequence","TypeDefCompact","TypeDefComposite","TypeDefPrimitive","TypeDefSequence","TypeDefTuple","TypeDefVariant","TypeInfo","TypeInfo","TypeParameter","U128","U16","U256","U32","U64","U8","Variant","Variant","bit_order_type","bit_store_type","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","builder","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","docs","docs","docs","encode","encode","encode","encode","encode","encode","encode","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","form","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_segments","hash","ident","index","interner","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_portable","into_portable","into_portable","into_portable","into_portable","into_portable","into_portable","into_portable","into_portable","into_portable","into_portable","into_portable","into_portable","into_portable","is_empty","len","map_into_portable","meta_type","name","name","name","named_type_params","namespace","new","new","new","new","new","new","new","new","new","new","of","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","path","prelude","register_type","register_types","resolve","segments","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tuple_meta_type","ty","ty","type_def","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_info","type_info","type_name","type_param","type_param","type_param","type_params","type_params","types","unit","using_encoded","using_encoded","using_encoded","using_encoded","using_encoded","using_encoded","using_encoded","variants","segment","0","0","0","0","0","0","0","0","FieldBuilder","Fields","FieldsBuilder","NamedFields","NoFields","TypeBuilder","UnnamedFields","VariantBuilder","Variants","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","compact","composite","default","default","default","default","discriminant","docs","docs","docs","docs_always","docs_always","docs_always","field","field","field_state","fields","finalize","finalize","finalize","finalize","from","from","from","from","from","from","from","from","from","index","into","into","into","into","into","into","into","into","into","name","named","new","new","new","path","state","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_name","type_params","unit","unnamed","variant","variant","variant_state","variant_unit","NameAssigned","NameNotAssigned","TypeAssigned","TypeNotAssigned","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","into","into","into","into","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","PathAssigned","PathNotAssigned","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","IndexAssigned","IndexNotAssigned","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","Form","MetaForm","PortableForm","String","Type","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","eq","eq","fmt","fmt","from","from","into","into","partial_cmp","partial_cmp","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Interner","Symbol","UntrackedSymbol","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","decode","decode_all","decode_all_with_depth_limit","decode_with_depth_limit","default","deserialize","encode_to","eq","eq","eq","fmt","fmt","fmt","from","from","from","get","id","intern_or_get","into","into","into","into_untracked","new","partial_cmp","partial_cmp","resolve","serialize","serialize","serialize","to_keyed_vec","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","any","borrow","boxed","cmp","collections","fmt","format","hash","marker","mem","num","ops","string","vec","vec","Any","Demand","Provider","TypeId","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","downcast_mut","downcast_mut","downcast_mut","downcast_mut_unchecked","downcast_mut_unchecked","downcast_mut_unchecked","downcast_ref","downcast_ref","downcast_ref","downcast_ref_unchecked","downcast_ref_unchecked","downcast_ref_unchecked","eq","fmt","fmt","fmt","fmt","fmt","from","hash","into","is","is","is","of","partial_cmp","provide","provide_ref","provide_value","request_ref","request_value","to_owned","try_from","try_into","type_id","type_id","type_id","type_name","type_name_of_val","Borrow","BorrowMut","Borrowed","Cow","Owned","Owned","ToOwned","add","add","add_assign","add_assign","as_bits","as_byte_slice","as_ref","as_ref","as_slice_of","borrow","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","clone_into","cmp","decode","decode_all","decode_all_with_depth_limit","decode_with_depth_limit","default","deref","deserialize","encode","encode_to","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","hash","into","into_deserializer","into_owned","is_borrowed","is_owned","ne","ne","ne","ne","ne","ne","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","serialize","size_hint","to_keyed_vec","to_mut","to_owned","to_owned","to_string","to_string","try_as_bits","try_from","try_into","type_id","type_info","using_encoded","0","0","Box","ThinBox","allocator","as_bits","as_byte_slice","as_fd","as_mut","as_mut_bits","as_mut_byte_slice","as_mut_slice_of","as_raw_fd","as_ref","as_slice_of","assume_init","assume_init","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call","call_mut","call_once","cause","clone","clone","clone","clone","clone","clone","clone_from","clone_from","clone_into","cmp","consume","decode","decode_all","decode_all_with_depth_limit","decode_with_depth_limit","default","default","default","default","default","deref","deref","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","deserialize","deserialize","downcast","downcast","downcast","downcast_unchecked","downcast_unchecked","downcast_unchecked","drop","drop","encode","encode_to","eq","fill_buf","finish","flush","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_raw","from_raw_in","ge","gt","hash","into","into","into_boxed_slice","into_future","into_inner","into_iter","into_pin","into_raw","into_raw_with_allocator","into_searcher","is_contained_in","is_empty","is_prefix_of","is_read_vectored","is_suffix_of","is_write_vectored","last","le","leak","len","lt","ne","new","new","new_in","new_uninit","new_uninit_in","new_uninit_slice","new_uninit_slice_in","new_unsize","new_zeroed","new_zeroed_in","new_zeroed_slice","new_zeroed_slice_in","next","next_back","nth","nth_back","partial_cmp","pin","pin_in","poll","poll_next","read","read_buf","read_exact","read_line","read_to_end","read_to_string","read_until","read_vectored","resume","seek","serialize","size_hint","size_hint","size_hint","source","source","stream_position","strip_prefix_of","strip_suffix_of","to_keyed_vec","to_owned","to_string","to_string","try_as_bits","try_as_mut_bits","try_from","try_from","try_from","try_into","try_into","try_new","try_new_in","try_new_uninit","try_new_uninit_in","try_new_uninit_slice","try_new_zeroed","try_new_zeroed_in","try_new_zeroed_slice","type_id","type_id","type_info","using_encoded","write","write","write","write","write_all","write_fmt","write_i128","write_i16","write_i32","write_i64","write_i8","write_isize","write_length_prefix","write_str","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","write_vectored","0","Eq","Eq","Equal","Greater","Less","Ord","Ord","Ordering","PartialEq","PartialEq","PartialOrd","PartialOrd","Reverse","borrow","borrow","borrow_mut","borrow_mut","clamp","clone","clone","clone_from","clone_into","clone_into","cmp","cmp","cmp","default","deserialize","eq","eq","eq","fmt","fmt","from","from","ge","ge","gt","gt","hash","hash","into","into","is_eq","is_ge","is_gt","is_le","is_lt","is_ne","le","le","lt","lt","max","max","max_by","max_by_key","min","min","min_by","min_by_key","ne","partial_cmp","partial_cmp","partial_cmp","reverse","serialize","then","then_with","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","AllocError","BTreeMap","BTreeSet","BinaryHeap","Bound","CapacityOverflow","Excluded","HashMap","HashSet","Included","LinkedList","TryReserveError","TryReserveErrorKind","Unbounded","VecDeque","allocator","and","and","and","and","and","append","append","append","append","append","append_or_new","as_mut_slices","as_slice","as_slices","back","back","back_mut","back_mut","binary_heap","binary_search","binary_search_by","binary_search_by_key","bitand","bitand","bitor","bitor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","btree_map","btree_set","capacity","capacity","capacity","capacity","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_from","clone_from","clone_from","clone_from","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","contains","contains","contains","contains","contains_key","contains_key","cursor_back","cursor_back_mut","cursor_front","cursor_front_mut","decode","decode","decode","decode","decode","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","default","default","default","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","difference","difference","drain","drain","drain","drain","drain_filter","drain_filter","drain_filter","drain_filter","drain_filter","drain_sorted","drop","drop","drop","encode_to","encode_to","encode_to","encode_to","encode_to","entry","entry","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_reserve","extend_reserve","extend_reserve","extend_reserve","extend_reserve","extend_reserve","extend_reserve","extend_reserve","first","first_entry","first_key_value","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","front","front","front_mut","front_mut","get","get","get","get","get","get_key_value","get_key_value","get_many_mut","get_many_unchecked_mut","get_mut","get_mut","get_mut","get_or_insert","get_or_insert_owned","get_or_insert_with","hash","hash","hash","hash","hash_map","hash_set","hasher","hasher","index","index","index","index_mut","insert","insert","insert","insert","insert","intersection","intersection","into","into","into","into","into","into","into","into","into","into_deserializer","into_deserializer","into_deserializer","into_deserializer","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter_sorted","into_keys","into_keys","into_sorted_vec","into_values","into_values","into_vec","is_disjoint","is_disjoint","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_subset","is_subset","is_superset","is_superset","iter","iter","iter","iter","iter","iter","iter","iter_mut","iter_mut","iter_mut","iter_mut","keys","keys","kind","last","last_entry","last_key_value","len","len","len","len","len","len","len","len","len","len","len","len","linked_list","make_contiguous","ne","new","new","new","new","new","new","new","new_in","new_in","new_in","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partition_point","peek","peek_mut","pop","pop_back","pop_back","pop_first","pop_first","pop_front","pop_front","pop_last","pop_last","push","push_back","push_back","push_front","push_front","range","range","range","range_mut","range_mut","raw_entry","raw_entry_mut","read","read_buf","remove","remove","remove","remove","remove","remove","remove_entry","remove_entry","replace","replace","reserve","reserve","reserve","reserve","reserve_exact","reserve_exact","resize","resize_with","retain","retain","retain","retain","retain","retain","retain_mut","rotate_left","rotate_right","serialize","serialize","serialize","serialize","serialize","serialize","serialize","shrink_to","shrink_to","shrink_to","shrink_to","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","split_off","split_off","split_off","split_off","sub","sub","swap","swap_remove_back","swap_remove_front","symmetric_difference","symmetric_difference","take","take","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","try_reserve","try_reserve","try_reserve","try_reserve_exact","try_reserve_exact","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_info","type_info","type_info","union","union","values","values","values_mut","values_mut","vec_deque","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity_and_hasher","with_capacity_and_hasher","with_capacity_in","with_hasher","with_hasher","write","write","write_all","0","0","layout","BinaryHeap","Drain","DrainSorted","IntoIter","IntoIterSorted","Iter","PeekMut","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref_mut","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_empty","last","next","next","next","next","next","next_back","next_back","next_back","pop","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","BTreeMap","DrainFilter","Entry","IntoIter","IntoKeys","IntoValues","Iter","IterMut","Keys","Occupied","OccupiedEntry","OccupiedError","Range","RangeMut","Vacant","VacantEntry","Values","ValuesMut","and_modify","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","description","drop","drop","entry","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get_mut","insert","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_mut","key","key","key","last","last","last","last","last","last","last","last","last","len","len","len","len","len","len","len","len","max","max","max","max","max","max","min","min","min","min","min","min","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","or_default","or_insert","or_insert_with","or_insert_with_key","remove","remove_entry","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","0","0","BTreeSet","Difference","DrainFilter","Intersection","IntoIter","Iter","Range","SymmetricDifference","Union","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","last","last","len","len","max","max","min","min","min","min","min","min","next","next","next","next","next","next","next","next","next_back","next_back","next_back","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","DefaultHasher","Drain","DrainFilter","Entry","HashMap","IntoIter","IntoKeys","IntoValues","Iter","IterMut","Keys","Occupied","Occupied","OccupiedEntry","OccupiedError","RandomState","RawEntryBuilder","RawEntryBuilderMut","RawEntryMut","RawOccupiedEntryMut","RawVacantEntryMut","Vacant","Vacant","VacantEntry","Values","ValuesMut","and_modify","and_modify","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_hasher","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","description","entry","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hash","from_hash","from_key","from_key","from_key_hashed_nocheck","from_key_hashed_nocheck","get","get","get_key_value","get_key_value_mut","get_mut","get_mut","insert","insert","insert","insert","insert_entry","insert_entry","insert_hashed_nocheck","insert_key","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_key","into_key_value","into_mut","into_mut","key","key","key","key","key_mut","len","len","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next","next","next","next","or_default","or_insert","or_insert","or_insert_with","or_insert_with","or_insert_with_key","remove","remove","remove_entry","remove_entry","replace_entry","replace_key","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","write","write_str","0","0","0","0","Difference","Drain","DrainFilter","HashSet","Intersection","IntoIter","Iter","SymmetricDifference","Union","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","len","len","len","next","next","next","next","next","next","next","next","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Cursor","CursorMut","DrainFilter","IntoIter","Iter","IterMut","LinkedList","as_cursor","back","back","back_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","current","current","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","front","front","front_mut","index","index","insert_after","insert_before","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","last","last","move_next","move_next","move_prev","move_prev","next","next","next","next","next_back","next_back","next_back","peek_next","peek_next","peek_prev","peek_prev","pop_back","pop_front","push_back","push_front","remove_current","remove_current_as_list","size_hint","size_hint","size_hint","size_hint","splice_after","splice_before","split_after","split_before","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Drain","IntoIter","Iter","IterMut","VecDeque","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","drop","fmt","fmt","fmt","fmt","fold","fold","from","from","from","from","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_empty","last","last","next","next","next","next","next_back","next_back","next_back","next_back","nth","nth","rfold","rfold","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","try_fold","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_rfold","type_id","type_id","type_id","type_id","Alignment","Arguments","Binary","Center","Debug","Debug","DebugList","DebugMap","DebugSet","DebugStruct","DebugTuple","Display","Error","Formatter","Left","LowerExp","LowerHex","Octal","Pointer","Result","Right","UpperExp","UpperHex","Write","align","alternate","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","collect_str","custom","debug_list","debug_map","debug_set","debug_struct","debug_tuple","default","description","entries","entries","entries","entry","entry","entry","eq","eq","field","field","fill","finish","finish","finish","finish","finish","finish_non_exhaustive","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","hash","into","into","into","into","into","into","into","into","into","key","pad","pad_integral","partial_cmp","precision","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","sign_aware_zero_pad","sign_minus","sign_plus","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","width","write","write_char","write_char","write_fmt","write_fmt","write_fmt","write_str","write_str","write_str","BuildHasher","BuildHasherDefault","Hash","Hash","Hasher","Hasher","SipHasher","borrow","borrow","borrow_mut","borrow_mut","build_hasher","build_hasher","clone","clone","clone_into","clone_into","default","default","eq","finish","finish","fmt","fmt","from","from","hash","hash_one","hash_slice","into","into","new","new_with_keys","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write","write","write_i128","write_i16","write_i32","write_i64","write_i8","write_isize","write_length_prefix","write_str","write_str","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","Copy","Copy","Destruct","Discriminant","DiscriminantKind","PhantomData","PhantomPinned","Send","Sized","StructuralEq","StructuralPartialEq","Sync","Unpin","Unsize","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","decode","decode_all","decode_all_with_depth_limit","decode_with_depth_limit","default","default","deserialize","deserialize","encode_to","eq","eq","fmt","fmt","from","from","hash","hash","into","into","partial_cmp","partial_cmp","serialize","to_keyed_vec","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","type_info","Assume","BikeshedIntrinsicFrom","Discriminant","ManuallyDrop","MaybeUninit","align_of","align_of_val","align_of_val_raw","alignment","array_assume_init","as_bytes","as_bytes_mut","as_mut_ptr","as_ptr","assume_init","assume_init_drop","assume_init_mut","assume_init_read","assume_init_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","copy","default","deref","deref_mut","discriminant","drop","drop","eq","eq","eq","fmt","fmt","fmt","fmt","forget","forget_unsized","from","from","from","from","hash","hash","into","into","into","into","into_inner","lifetimes","min_align_of","min_align_of_val","needs_drop","new","new","partial_cmp","replace","size_of","size_of_val","size_of_val_raw","slice_as_bytes","slice_as_bytes_mut","slice_as_mut_ptr","slice_as_ptr","slice_assume_init_mut","slice_assume_init_ref","swap","take","take","to_owned","to_owned","to_owned","to_owned","transmute","transmute_copy","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","uninit","uninit_array","uninitialized","validity","variant_count","visibility","write","write_slice","write_slice_cloned","zeroed","zeroed","0","0","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","Empty","FpCategory","Infinite","IntErrorKind","InvalidDigit","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","Nan","NegOverflow","NonZeroI128","NonZeroI16","NonZeroI32","NonZeroI64","NonZeroI8","NonZeroIsize","NonZeroU128","NonZeroU16","NonZeroU32","NonZeroU64","NonZeroU8","NonZeroUsize","Normal","ParseFloatError","ParseIntError","PosOverflow","Saturating","Subnormal","TryFromIntError","Wrapping","Zero","Zero","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_abs","checked_abs","checked_abs","checked_abs","checked_abs","checked_abs","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_next_power_of_two","checked_next_power_of_two","checked_next_power_of_two","checked_next_power_of_two","checked_next_power_of_two","checked_next_power_of_two","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","default","description","description","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","get","get","get","get","get","get","get","get","get","get","get","get","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","kind","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new","new","new","new","new","new","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","overflowing_abs","overflowing_abs","overflowing_abs","overflowing_abs","overflowing_abs","overflowing_abs","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","type_info","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unsigned_abs","unsigned_abs","unsigned_abs","unsigned_abs","unsigned_abs","unsigned_abs","using_encoded","using_encoded","using_encoded","using_encoded","using_encoded","using_encoded","using_encoded","using_encoded","using_encoded","using_encoded","wrapping_abs","wrapping_abs","wrapping_abs","wrapping_abs","wrapping_abs","wrapping_abs","0","Add","AddAssign","BREAK","BitAnd","BitAndAssign","BitOr","BitOrAssign","BitXor","BitXorAssign","Bound","Break","CONTINUE","CoerceUnsized","Complete","Continue","ControlFlow","Deref","DerefMut","DispatchFromDyn","Div","DivAssign","Drop","Excluded","Fn","FnMut","FnOnce","FromResidual","Generator","GeneratorState","Included","Index","IndexMut","Mul","MulAssign","Neg","Not","OneSidedRange","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Range","RangeBounds","RangeFrom","RangeFull","RangeInclusive","RangeTo","RangeToInclusive","Rem","RemAssign","Residual","Residual","Return","Shl","ShlAssign","Shr","ShrAssign","Sub","SubAssign","Target","Try","TryType","Unbounded","Yeet","Yield","Yielded","add","add_assign","advance_back_by","advance_by","as_mut","as_ref","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","branch","break_value","call","call_mut","call_once","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cmp","contains","contains","contains","contains","contains","contains","continue_value","decode","decode","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","default","deref","deref_mut","deserialize","deserialize","deserialize","div","div_assign","drop","encode","encode","end","end","end","end","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","from","from","from","from","from","from","from","from","from","from","from","from_output","from_output","from_residual","from_residual","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","hash","hash","hash","hash","hash","hash","hash","hash","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","intersection","intersection","intersection","intersection","intersection","intersection","into","into","into","into","into","into","into","into","into","into","into_inner","into_iter","into_iter","into_iter","is_break","is_continue","is_empty","is_empty","is_sorted","is_sorted","last","last","map","map_break","map_continue","max","max","min","min","mul","mul_assign","neg","new","next","next","next","next_back","next_back","normalize","normalize","normalize","normalize","normalize","normalize","not","nth","nth","nth","nth_back","nth_back","partial_cmp","rem","rem_assign","resume","rfold","serialize","serialize","serialize","shl","shl_assign","shr","shr_assign","size_hint","size_hint","size_hint","size_hint","size_hint","start","start","start","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","sub","sub_assign","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_fold","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_rfold","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_info","type_info","union","union","union","union","union","union","0","0","0","0","0","0","Drain","FromUtf16Error","FromUtf8Error","ParseError","String","ToString","add","add_assign","as_bits","as_bits","as_byte_slice","as_byte_slice","as_bytes","as_bytes","as_mut","as_mut_str","as_mut_vec","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice_of","as_slice_of","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_from","clone_into","clone_into","cmp","decode","decode_all","decode_all_with_depth_limit","decode_with_depth_limit","default","deref","deref_mut","description","description","deserialize","drain","drop","encode","encode_to","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","extend_from_within","extend_one","extend_one","extend_one","extend_one","extend_one","extend_reserve","extend_reserve","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_raw_parts","from_str","from_utf16","from_utf16_lossy","from_utf8","from_utf8_lossy","from_utf8_unchecked","hash","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","insert","insert_str","into","into","into","into","into_boxed_str","into_bytes","into_bytes","into_deserializer","into_iter","into_raw_parts","into_searcher","is_contained_in","is_empty","is_prefix_of","is_suffix_of","last","len","ne","ne","ne","ne","new","next","next_back","partial_cmp","pop","push","push_str","remove","remove_matches","replace_range","reserve","reserve_exact","retain","serialize","shrink_to","shrink_to_fit","size_hint","size_hint","split_off","strip_prefix_of","strip_suffix_of","to_keyed_vec","to_owned","to_owned","to_socket_addrs","to_string","to_string","to_string","to_string","to_string","truncate","try_as_bits","try_as_bits","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","type_id","type_id","type_info","using_encoded","utf8_error","with_capacity","write_char","write_str","Drain","DrainFilter","IntoIter","Splice","Vec","advance_back_by","advance_by","allocator","allocator","allocator","allocator","and","append","append_or_new","as_bits","as_bits","as_bits","as_byte_slice","as_byte_slice","as_byte_slice","as_mut","as_mut","as_mut_bits","as_mut_byte_slice","as_mut_ptr","as_mut_slice","as_mut_slice","as_mut_slice_of","as_ptr","as_ref","as_ref","as_ref","as_ref","as_slice","as_slice","as_slice","as_slice_of","as_slice_of","as_slice_of","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_from","clone_into","clone_into","cmp","count","decode","decode_all","decode_all_with_depth_limit","decode_with_depth_limit","dedup","dedup_by","dedup_by_key","default","deref","deref_mut","deserialize","drain","drain_filter","drop","drop","drop","drop","drop","encode","encode_to","eq","eq","eq","eq","eq","eq","extend","extend","extend_from_slice","extend_from_within","extend_one","extend_one","extend_reserve","extend_reserve","flush","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_raw_parts","from_raw_parts_in","hash","index","index_mut","insert","into","into","into","into","into","into_boxed_slice","into_deserializer","into_flattened","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_raw_parts","into_raw_parts_with_alloc","is_empty","is_empty","is_empty","is_write_vectored","leak","len","len","ne","ne","ne","ne","ne","ne","new","new_in","next","next","next","next","next_back","next_back","next_back","next_chunk","partial_cmp","pop","push","remove","reserve","reserve_exact","resize","resize_with","retain","retain_mut","serialize","set_len","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","spare_capacity_mut","splice","split_at_spare_mut","split_off","swap_remove","to_keyed_vec","to_owned","to_owned","truncate","try_as_bits","try_as_bits","try_as_bits","try_as_mut_bits","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","type_id","type_id","type_id","type_info","using_encoded","with_capacity","with_capacity_in","write","write","write_all","write_vectored"],"q":["scale_infoscale_info::PathError","scale_info::TypeDef","","","","","","","","scale_info::build","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","scale_info::build::field_state","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","scale_info::build::state","","","","","","","","","","","","","","","","scale_info::build::variant_state","","","","","","","","","","","","","","","","scale_info::form","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","scale_info::interner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","scale_info::prelude","","","","","","","","","","","","","","","scale_info::prelude::any","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","scale_info::prelude::borrow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","scale_info::prelude::borrow::Cow","","scale_info::prelude::boxed","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","scale_info::prelude::cmp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","scale_info::prelude::collections","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","scale_info::prelude::collections::Bound","","scale_info::prelude::collections::TryReserveErrorKind","scale_info::prelude::collections::binary_heap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","scale_info::prelude::collections::btree_mapscale_info::prelude::collections::btree_map::Entry","","scale_info::prelude::collections::btree_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","scale_info::prelude::collections::hash_mapscale_info::prelude::collections::hash_map::Entry","","scale_info::prelude::collections::hash_map::RawEntryMut","","scale_info::prelude::collections::hash_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","scale_info::prelude::collections::linked_list","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","scale_info::prelude::collections::vec_deque","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","scale_info::prelude::fmtscale_info::prelude::hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","scale_info::prelude::marker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","scale_info::prelude::mem","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","scale_info::prelude::numscale_info::prelude::opsscale_info::prelude::ops::Bound","","scale_info::prelude::ops::ControlFlow","","scale_info::prelude::ops::GeneratorState","","scale_info::prelude::stringscale_info::prelude::vecd":["An array type with compile-time known length.","A type representing a sequence of bits.","<code>bool</code> type","<code>char</code> type","A type using the [<code>Compact</code>] encoding","A composite type (e.g. a struct or a tuple)","A field of a struct-like data type.","<code>i128</code>","<code>i16</code>","256 bits signed int (no rust equivalent)","<code>i32</code>","<code>i64</code>","<code>i8</code>","The type identifying for which type info is provided.","Convert the type definition into the portable form using a …","If a segment within a module path is not a proper Rust …","A metatype abstraction.","If the module path does not at least have one segment.","The portable version of <code>Self</code>.","Represents the path of a type definition.","An error that may be encountered upon constructing …","A read-only registry containing types in their portable …","A Rust primitive type.","The registry for space-efficient storage of type …","A sequence type with runtime known length.","Convenience trait for implementors, combining <code>TypeInfo</code> and …","<code>str</code> type","A tuple type.","A <code>Type</code> definition with optional metadata.","The possible types a SCALE encodable Rust value could have.","An array type.","Type describing a <code>bitvec::vec::BitVec</code>.","A type wrapped in [<code>Compact</code>].","A composite type, consisting of either named (struct) or …","A primitive Rust type.","A type to refer to a sequence of elements of the same type.","A type to refer to tuple types.","A Enum type (consisting of variants).","Implementors return their meta type information.","","A generic type parameter.","<code>u128</code>","<code>u16</code>","256 bits unsigned int (no rust equivalent)","<code>u32</code>","<code>u64</code>","<code>u8</code>","A struct enum variant with either named (struct) or …","A variant type (e.g. an enum)","Returns the type of the bit ordering of the …","Returns underlying type used to store the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builders for defining metadata for variant types (enums), …","Returns a new <code>FieldBuilder</code> for constructing a field.","Create a <code>TypeBuilder</code> the public API for constructing a <code>Type</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the documentation of the field.","Returns the documentation of the variant.","Returns the documentation of the type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the fields of the composite type.","Returns the fields of the struct variant.","Returns the types of the tuple fields.","","","","","","","","","","","","","","","","","","","","Provides form definitions.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Create a Path from the given segments","","Get the ident segment of the Path","Returns the index of the variant.","Interning data structure and associated symbol definitions.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert <code>self</code> to the portable form by using the registry …","","","","","","","","","","","","","","Returns <code>true</code> if the path is empty","Returns the length of the array type.","Converts an iterator into a Vec of the equivalent portable …","Returns the runtime bridge to the types compile-time type …","Returns the name of the field. None for unnamed fields.","Returns the name of the variant.","Get the name of the parameter.","Construct a vector of <code>TypeParameter</code>s from pairs of the …","Get the namespace segments of the Path","Creates a new meta type from the given compile-time known …","Creates a new field.","Create a new Path","Create a new <code>TypeDefVariant</code> with the given variants","Create a new <code>TypeParameter</code>.","Creates a new array type.","Creates a new tuple type definition from the given types.","Creates a new sequence type.","Creates a new type wrapped in [<code>Compact</code>].","Creates a new empty registry.","Creates a new sequence type.","","","","","","","","","","","","","","","","Returns the path of the type","Exports from <code>std</code>, <code>core</code> and <code>alloc</code> crates.","Registers the given type into the registry and returns its …","Calls <code>register_type</code> for each <code>MetaType</code> in the given <code>iter</code>.","Returns the type definition for the given identifier, <code>None</code> …","Returns the segments of the Path","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Takes a number of types and returns a vector that contains …","Returns the type of the field.","Get the type of the parameter.","Returns the definition of the type","","Returns the type identifier provided by <code>core::any</code>.","","","","","","","","","","","","","","","","","","Returns the static type identifier for <code>Self</code>.","Returns the meta type information.","Returns a string which is the name of the type of the …","Returns the element type of the array type.","Returns the element type of the sequence type.","Returns the [<code>Compact</code>] wrapped type, i.e. the <code>T</code> in …","Returns the generic type parameters of the type","Construct a vector of <code>TypeParameter</code> instances with the …","Returns all types with their associated identifiers.","Creates a new unit tuple to represent the unit type, <code>()</code>.","","","","","","","","Returns the variants of a variant type","The index of the erroneous segment.","","","","","","","","","Construct a valid <code>Field</code>.","Provides FieldsBuilder constructors","Build a set of either all named (e.g. for a struct) or all …","A fields builder only allows named fields (e.g. a struct)","A fields builder has no fields (e.g. a unit struct)","Builds a <code>Type</code>","A fields builder only allows unnamed fields (e.g. a tuple)","Build a <code>Variant</code>.","Builds a definition of a variant type i.e an <code>enum</code>","","","","","","","","","","","","","","","","","","","Initializes the type of the field as a compact type.","Construct a “composite” type i.e. a <code>struct</code>","","","","","Set the variant’s discriminant.","Doc capture is not enabled via the “docs” feature so …","Doc capture is not enabled via the “docs” feature so …","Doc capture is not enabled via the “docs” feature so …","Set the type documentation, always captured even if the “…","Initialize the documentation of a field, always captured …","Initialize the variant’s documentation, always captured …","Add a named field constructed using the builder.","Add an unnamed field constructed using the builder.","Type states for building a field.","Initialize the variant’s fields.","Complete building and return the set of fields","Complete building and return a new <code>Field</code>.","Complete building and create final <code>Variant</code> instance.","Construct a new <code>TypeDefVariant</code> from the initialized …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Set the variant’s codec index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Initialize the field name.","Fields for a type construct with named fields","Create a new FieldBuilder.","Create a new <code>VariantBuilder</code>.","Create a new [<code>VariantsBuilder</code>].","Set the Path for the type","State types for type builders which require a Path.","","","","","","","","","","","","","","","","","","","Initialize the type of the field.","","","","","","","","","","Initialize the type name of a field (optional).","Set the type parameters if it’s a generic type","The type construct has no fields","Fields for a type construct with unnamed fields","Construct a “variant” type i.e an <code>enum</code>","Add a variant","State types for the <code>VariantBuilder</code> which requires an index.","Add a unit variant (without fields).","A name has been assigned to the field.","A name has not been assigned to the field.","A type has been assigned to the field.","A type has not been assigned to the field.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","State where the builder has assigned a Path to the type","State where the builder has not assigned a Path to the type","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","State where the builder has assigned an index to a variant.","State where the builder has not assigned an index to a …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Trait to control the internal structures of type …","A meta meta-type.","Portable form that has its lifetime untracked in …","The string type.","The type representing the type.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Interning data structure generic over the element type.","A symbol from an interner.","A symbol that is not lifetime tracked.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the symbol of the given element or <code>None</code> if it hasn…","Returns the index to the symbol in the interner table.","Interns the given element or returns its associated symbol …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Removes the lifetime tracking for this symbol.","Creates a new empty interner.","","","Resolves the original element given its associated symbol …","","","","","","","","","","","","","","","","This module contains the <code>Any</code> trait, which enables dynamic …","A module for working with borrowed data.","A pointer type for heap allocation.","Functionality for ordering and comparison.","Collection types.","Utilities for formatting and printing <code>String</code>s.","Creates a <code>String</code> using interpolation of runtime …","Generic hashing support.","Primitive traits and types representing basic properties …","Basic functions for dealing with memory.","Additional functionality for numerics.","Overloadable operators.","A UTF-8–encoded, growable string.","A contiguous growable array type with heap-allocated …","Creates a <code>Vec</code> containing the arguments.","A trait to emulate dynamic typing.","A helper object for providing data by type.","Trait implemented by a type which can dynamically provide …","A <code>TypeId</code> represents a globally unique identifier for a …","","","","","","","","Forwards to the method defined on the type <code>dyn Any</code>.","Forwards to the method defined on the type <code>Any</code>.","Returns some mutable reference to the inner value if it is …","Returns a mutable reference to the inner value as type …","Forwards to the method defined on the type <code>dyn Any</code>.","Forwards to the method defined on the type <code>Any</code>.","Returns some reference to the inner value if it is of type …","Forwards to the method defined on the type <code>dyn Any</code>.","Forwards to the method defined on the type <code>Any</code>.","Forwards to the method defined on the type <code>dyn Any</code>.","Returns a reference to the inner value as type <code>dyn T</code>.","Forwards to the method defined on the type <code>Any</code>.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Forwards to the method defined on the type <code>dyn Any</code>.","Returns <code>true</code> if the inner type is the same as <code>T</code>.","Forwards to the method defined on the type <code>Any</code>.","Returns the <code>TypeId</code> of the type this generic function has …","","Data providers should implement this method to provide <em>all</em> …","Provide a reference, note that the referee type must be …","Provide a value or other type with only static lifetimes.","Request a reference from the <code>Provider</code>.","Request a value from the <code>Provider</code>.","","","","Gets the <code>TypeId</code> of <code>self</code>.","","","Returns the name of a type as a string slice.","Returns the name of the type of the pointed-to value as a …","A trait for borrowing data.","A trait for mutably borrowing data.","Borrowed data.","A clone-on-write smart pointer.","Owned data.","The resulting type after obtaining ownership.","A generalization of <code>Clone</code> to borrowed data.","","","","","","","","","","Immutably borrows from an owned value.","","","Mutably borrows from an owned value.","","","","Uses borrowed data to replace owned data, usually by …","","","","","","","Creates an owned Cow&lt;’a, B&gt; with the default value for …","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to <code>Vec</code>.","Converts a <code>String</code> into an <code>Owned</code> variant. No heap …","Converts a <code>&amp;</code><code>CString</code> into a borrowed <code>Cow</code> without copying or …","Creates a clone-on-write pointer from a reference to <code>Path</code>.","Converts the string reference into a <code>Cow::Borrowed</code>.","Converts a <code>CString</code> into an owned <code>Cow</code> without copying or …","Returns the argument unchanged.","Converts a string slice into a <code>Borrowed</code> variant. No heap …","Converts a <code>CStr</code> into a borrowed <code>Cow</code> without copying or …","Creates a <code>Borrowed</code> variant of <code>Cow</code> from a slice.","Creates an <code>Owned</code> variant of <code>Cow</code> from an owned instance of …","Converts the string reference into a <code>Cow::Borrowed</code>.","Moves the string into a <code>Cow::Owned</code>.","Creates a clone-on-write pointer from an owned instance of …","Converts a <code>String</code> reference into a <code>Borrowed</code> variant. No …","Creates a clone-on-write pointer from a reference to …","","","","","","Calls <code>U::from(self)</code>.","","Extracts the owned data.","Returns true if the data is borrowed, i.e. if <code>to_mut</code> would …","Returns true if the data is owned, i.e. if <code>to_mut</code> would be …","","","","","","","","","","","","","","","","","","","","","","","Acquires a mutable reference to the owned form of the data.","Creates owned data from borrowed data, usually by cloning.","","","","","","","","","","","","A pointer type for heap allocation.","ThinBox.","Returns a reference to the underlying allocator.","","","","","","","","","","","Converts to <code>Box&lt;[T], A&gt;</code>.","Converts to <code>Box&lt;T, A&gt;</code>.","","","","","","","","","","","","","Returns a new box with a <code>clone()</code> of this box’s contents.","","","","","Copies <code>source</code>’s contents into <code>self</code> without creating a …","","","","","","","","","","","","Creates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.","","","","","","","","","","","Attempt to downcast the box to a concrete type.","Attempt to downcast the box to a concrete type.","Attempt to downcast the box to a concrete type.","Downcasts the box to a concrete type.","Downcasts the box to a concrete type.","Downcasts the box to a concrete type.","","","","","","","","","","","","","","Returns the argument unchanged.","Converts a type of <code>Error</code> into a box of dyn <code>Error</code>.","Converts a <code>CString</code> into a Box&lt;CStr&gt; without copying or …","Returns the argument unchanged.","Copies the string into a newly allocated Box&lt;OsStr&gt;.","Converts a <code>Cow</code> into a box of dyn <code>Error</code>.","Converts the given <code>String</code> to a boxed <code>str</code> slice that is …","Converts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>","Converts a <code>String</code> into a box of dyn <code>Error</code>.","Converts a <code>str</code> into a box of dyn <code>Error</code>.","Convert a vector into a boxed slice.","Converts a <code>Cow&lt;&#39;_, [T]&gt;</code> into a <code>Box&lt;[T]&gt;</code>","Converts a <code>Cow&lt;&#39;_, str&gt;</code> into a <code>Box&lt;str&gt;</code>","Converts a <code>T</code> into a <code>Box&lt;T&gt;</code>","Converts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>","Converts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents …","","Converts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn …","Converts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>","Converts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>","Creates a boxed <code>Path</code> from a clone-on-write pointer.","Converts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …","Creates a boxed <code>Path</code> from a reference.","Converts a <code>PathBuf</code> into a Box&lt;Path&gt;.","","Converts a <code>Cow&lt;&#39;a, OsStr&gt;</code> into a Box&lt;OsStr&gt;, by copying …","Converts a <code>Cow</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.","Converts an <code>OsString</code> into a Box&lt;OsStr&gt; without copying or …","Converts a <code>str</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.","Converts a <code>String</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.","","Constructs a box from a raw pointer.","Constructs a box from a raw pointer in the given allocator.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>","","Consumes the <code>Box</code>, returning the wrapped value.","","Converts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …","Consumes the <code>Box</code>, returning a wrapped raw pointer.","Consumes the <code>Box</code>, returning a wrapped raw pointer and the …","","","","","","","","","","Consumes and leaks the <code>Box</code>, returning a mutable reference, …","","","","Moves a type to the heap with its <code>Metadata</code> stored in the …","Allocates memory on the heap and then places <code>x</code> into it.","Allocates memory in the given allocator then places <code>x</code> into …","Constructs a new box with uninitialized contents.","Constructs a new box with uninitialized contents in the …","Constructs a new boxed slice with uninitialized contents.","Constructs a new boxed slice with uninitialized contents …","Moves a type to the heap with its <code>Metadata</code> stored in the …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new boxed slice with uninitialized contents, …","Constructs a new boxed slice with uninitialized contents …","","","","","","Constructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…","Constructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.","","","Allocates memory on the heap then places <code>x</code> into it, …","Allocates memory in the given allocator then places <code>x</code> into …","Constructs a new box with uninitialized contents on the …","Constructs a new box with uninitialized contents in the …","Constructs a new boxed slice with uninitialized contents. …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new boxed slice with uninitialized contents, …","","","","","","","Writes the value and converts to <code>Box&lt;T, A&gt;</code>.","","","","","","","","","","","","","","","","","","","","Trait for equality comparisons which are equivalence …","Derive macro generating an impl of the trait <code>Eq</code>.","An ordering where a compared value is equal to another.","An ordering where a compared value is greater than another.","An ordering where a compared value is less than another.","Trait for types that form a total order.","Derive macro generating an impl of the trait <code>Ord</code>.","An <code>Ordering</code> is the result of a comparison between two …","Trait for equality comparisons which are partial …","Derive macro generating an impl of the trait <code>PartialEq</code>.","Trait for types that form a partial order.","Derive macro generating an impl of the trait <code>PartialOrd</code>.","A helper struct for reverse ordering.","","","","","Restrict a value to a certain interval.","","","","","","This method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.","","","","","This method tests for <code>self</code> and <code>other</code> values to be equal, …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","This method tests greater than or equal to (for <code>self</code> and …","","This method tests greater than (for <code>self</code> and <code>other</code>) and is …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the ordering is the <code>Equal</code> variant.","Returns <code>true</code> if the ordering is either the <code>Greater</code> or <code>Equal</code>…","Returns <code>true</code> if the ordering is the <code>Greater</code> variant.","Returns <code>true</code> if the ordering is either the <code>Less</code> or <code>Equal</code> …","Returns <code>true</code> if the ordering is the <code>Less</code> variant.","Returns <code>true</code> if the ordering is not the <code>Equal</code> variant.","This method tests less than or equal to (for <code>self</code> and <code>other</code>…","","This method tests less than (for <code>self</code> and <code>other</code>) and is …","","Compares and returns the maximum of two values.","Compares and returns the maximum of two values.","Returns the maximum of two values with respect to the …","Returns the element that gives the maximum value from the …","Compares and returns the minimum of two values.","Compares and returns the minimum of two values.","Returns the minimum of two values with respect to the …","Returns the element that gives the minimum value from the …","This method tests for <code>!=</code>. The default implementation is …","This method returns an ordering between <code>self</code> and <code>other</code> …","","","Reverses the <code>Ordering</code>.","","Chains two orderings.","Chains the ordering with the given function.","","","","","","","","","The memory allocator returned an error","An ordered map based on a B-Tree.","An ordered set based on a B-Tree.","A priority queue implemented with a binary heap.","An endpoint of a range of keys.","Error due to the computed capacity exceeding the collection…","An exclusive bound.","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","An inclusive bound.","A doubly-linked list with owned nodes.","The error type for <code>try_reserve</code> methods.","Details of the allocation that caused a <code>TryReserveError</code>","An infinite endpoint. Indicates that there is no bound in …","A double-ended queue implemented with a growable ring …","Returns a reference to the underlying allocator.","","","","","","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","Moves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …","Moves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …","Moves all elements from <code>other</code> to the end of the list.","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","","Returns a pair of slices which contain, in order, the …","Returns a slice of all values in the underlying vector, in …","Returns a pair of slices which contain, in order, the …","Provides a reference to the back element, or <code>None</code> if the …","Provides a reference to the back element, or <code>None</code> if the …","Provides a mutable reference to the back element, or <code>None</code> …","Provides a mutable reference to the back element, or <code>None</code> …","A priority queue implemented with a binary heap.","Binary searches this <code>VecDeque</code> for a given element. This …","Binary searches this <code>VecDeque</code> with a comparator function. …","Binary searches this <code>VecDeque</code> with a key extraction …","Returns the intersection of <code>self</code> and <code>rhs</code> as a new …","Returns the intersection of <code>self</code> and <code>rhs</code> as a new …","Returns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.","Returns the union of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>.","Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …","Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …","","","","","","","","","","","","","","","","","","","An ordered map based on a B-Tree.","An ordered set based on a B-Tree.","Returns the number of elements the binary heap can hold …","Returns the number of elements the map can hold without …","Returns the number of elements the set can hold without …","Returns the number of elements the deque can hold without …","Drops all items from the binary heap.","Clears the map, removing all key-value pairs. Keeps the …","Clears the map, removing all elements.","Clears the set, removing all values.","Clears the set, removing all elements.","Removes all elements from the <code>LinkedList</code>.","Clears the deque, removing all values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if the set contains a value.","Returns <code>true</code> if the set contains an element equal to the …","Returns <code>true</code> if the <code>LinkedList</code> contains an element equal …","Returns <code>true</code> if the deque contains an element equal to the …","Returns <code>true</code> if the map contains a value for the specified …","Returns <code>true</code> if the map contains a value for the specified …","Provides a cursor at the back element.","Provides a cursor with editing operations at the back …","Provides a cursor at the front element.","Provides a cursor with editing operations at the front …","","","","","","","","","","","","","","","","","","","","","Creates an empty <code>BinaryHeap&lt;T&gt;</code>.","Creates an empty <code>HashMap&lt;K, V, S&gt;</code>, with the <code>Default</code> value …","Creates an empty <code>BTreeMap</code>.","Creates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …","Creates an empty <code>BTreeSet</code>.","Creates an empty <code>LinkedList&lt;T&gt;</code>.","Creates an empty deque.","","","","","","","","Visits the values representing the difference, i.e., the …","Visits the elements representing the difference, i.e., the …","Clears the binary heap, returning an iterator over the …","Clears the map, returning all key-value pairs as an …","Clears the set, returning all elements as an iterator. …","Removes the specified range from the deque in bulk, …","Creates an iterator which uses a closure to determine if …","Creates an iterator that visits all elements (key-value …","Creates an iterator which uses a closure to determine if a …","Creates an iterator that visits all elements in ascending …","Creates an iterator which uses a closure to determine if …","Clears the binary heap, returning an iterator over the …","","","","","","","","","Gets the given key’s corresponding entry in the map for …","Gets the given key’s corresponding entry in the map for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the first element in the set, if …","Returns the first entry in the map for in-place …","Returns the first key-value pair in the map. The key in …","","","","","","","","","","","","","Converts a <code>Vec&lt;T&gt;</code> into a <code>BinaryHeap&lt;T&gt;</code>.","Returns the argument unchanged.","Examples","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>[(K, V); N]</code> into a <code>BTreeMap&lt;(K, V)&gt;</code>.","Returns the argument unchanged.","Examples","Returns the argument unchanged.","Converts a <code>[T; N]</code> into a <code>BTreeSet&lt;T&gt;</code>.","Converts a <code>[T; N]</code> into a <code>LinkedList&lt;T&gt;</code>.","Returns the argument unchanged.","Converts a <code>[T; N]</code> into a <code>VecDeque&lt;T&gt;</code>.","Turn a <code>Vec&lt;T&gt;</code> into a <code>VecDeque&lt;T&gt;</code>.","Returns the argument unchanged.","","Returns the argument unchanged.","Always evaluates to <code>TryReserveErrorKind::CapacityOverflow</code>.","Returns the argument unchanged.","","","","","","","","Provides a reference to the front element, or <code>None</code> if the …","Provides a reference to the front element, or <code>None</code> if the …","Provides a mutable reference to the front element, or <code>None</code> …","Provides a mutable reference to the front element, or <code>None</code> …","Returns a reference to the value corresponding to the key.","Returns a reference to the value corresponding to the key.","Returns a reference to the value in the set, if any, that …","Returns a reference to the element in the set, if any, …","Provides a reference to the element at the given index.","Returns the key-value pair corresponding to the supplied …","Returns the key-value pair corresponding to the supplied …","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Returns a mutable reference to the value corresponding to …","Returns a mutable reference to the value corresponding to …","Provides a mutable reference to the element at the given …","Inserts the given <code>value</code> into the set if it is not present, …","Inserts an owned copy of the given <code>value</code> into the set if …","Inserts a value computed from <code>f</code> into the set if the given …","","","","","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","Returns a reference to the map’s <code>BuildHasher</code>.","Returns a reference to the set’s <code>BuildHasher</code>.","Returns a reference to the value corresponding to the …","Returns a reference to the value corresponding to the …","","","Inserts a key-value pair into the map.","Inserts a key-value pair into the map.","Adds a value to the set.","Adds a value to the set.","Inserts an element at <code>index</code> within the deque, shifting all …","Visits the values representing the intersection, i.e., the …","Visits the elements representing the intersection, i.e., …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Creates a consuming iterator, that is, one that moves each …","","","Creates a consuming iterator, that is, one that moves each …","","","","","","Creates a consuming iterator, that is, one that moves each …","","Gets an iterator for moving out the <code>BTreeSet</code>’s contents.","","Consumes the list into an iterator yielding elements by …","","","","Consumes the deque into a front-to-back iterator yielding …","Returns an iterator which retrieves elements in heap order.","Creates a consuming iterator visiting all the keys in …","Creates a consuming iterator visiting all the keys, in …","Consumes the <code>BinaryHeap</code> and returns a vector in sorted …","Creates a consuming iterator visiting all the values in …","Creates a consuming iterator visiting all the values, in …","Consumes the <code>BinaryHeap</code> and returns the underlying vector …","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","Checks if the binary heap is empty.","Returns <code>true</code> if the map contains no elements.","Returns <code>true</code> if the map contains no elements.","Returns <code>true</code> if the set contains no elements.","Returns <code>true</code> if the set contains no elements.","Returns <code>true</code> if the <code>LinkedList</code> is empty.","Returns <code>true</code> if the deque is empty.","Returns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…","Returns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…","Returns <code>true</code> if the set is a superset of another, i.e., …","Returns <code>true</code> if the set is a superset of another, i.e., …","Returns an iterator visiting all values in the underlying …","An iterator visiting all key-value pairs in arbitrary …","Gets an iterator over the entries of the map, sorted by …","An iterator visiting all elements in arbitrary order. The …","Gets an iterator that visits the elements in the <code>BTreeSet</code> …","Provides a forward iterator.","Returns a front-to-back iterator.","An iterator visiting all key-value pairs in arbitrary …","Gets a mutable iterator over the entries of the map, …","Provides a forward iterator with mutable references.","Returns a front-to-back iterator that returns mutable …","An iterator visiting all keys in arbitrary order. The …","Gets an iterator over the keys of the map, in sorted order.","Details about the allocation that caused the error","Returns a reference to the last element in the set, if any.","Returns the last entry in the map for in-place …","Returns the last key-value pair in the map. The key in …","Returns the length of the binary heap.","","Returns the number of elements in the map.","Returns the number of elements in the map.","","Returns the number of elements in the set.","","Returns the number of elements in the set.","Returns the length of the <code>LinkedList</code>.","","","Returns the number of elements in the deque.","A doubly-linked list with owned nodes.","Rearranges the internal storage of this deque so it is one …","","Creates an empty <code>BinaryHeap</code> as a max-heap.","Creates an empty <code>HashMap</code>.","Makes a new, empty <code>BTreeMap</code>.","Creates an empty <code>HashSet</code>.","Makes a new, empty <code>BTreeSet</code>.","Creates an empty <code>LinkedList</code>.","Creates an empty deque.","Makes a new empty BTreeMap with a reasonable choice for B.","Makes a new <code>BTreeSet</code> with a reasonable choice of B.","Creates an empty deque.","","","","","Returns the index of the partition point according to the …","Returns the greatest item in the binary heap, or <code>None</code> if …","Returns a mutable reference to the greatest item in the …","Removes the greatest item from the binary heap and returns …","Removes the last element from a list and returns it, or …","Removes the last element from the deque and returns it, or …","Removes and returns the first element in the map. The key …","Removes the first element from the set and returns it, if …","Removes the first element and returns it, or <code>None</code> if the …","Removes the first element and returns it, or <code>None</code> if the …","Removes and returns the last element in the map. The key …","Removes the last element from the set and returns it, if …","Pushes an item onto the binary heap.","Appends an element to the back of a list.","Appends an element to the back of the deque.","Adds an element first in the list.","Prepends an element to the deque.","Constructs a double-ended iterator over a sub-range of …","Constructs a double-ended iterator over a sub-range of …","Creates an iterator that covers the specified range in the …","Constructs a mutable double-ended iterator over a …","Creates an iterator that covers the specified mutable …","Creates a raw immutable entry builder for the HashMap.","Creates a raw entry builder for the HashMap.","Fill <code>buf</code> with the contents of the “front” slice as …","","Removes a key from the map, returning the value at the key …","Removes a key from the map, returning the value at the key …","Removes a value from the set. Returns whether the value was","If the set contains an element equal to the value, removes …","Removes the element at the given index and returns it.","Removes and returns the element at <code>index</code> from the deque. …","Removes a key from the map, returning the stored key and …","Removes a key from the map, returning the stored key and …","Adds a value to the set, replacing the existing value, if …","Adds a value to the set, replacing the existing element, …","Reserves capacity for at least <code>additional</code> elements more …","Reserves capacity for at least <code>additional</code> more elements to …","Reserves capacity for at least <code>additional</code> more elements to …","Reserves capacity for at least <code>additional</code> more elements to …","Reserves the minimum capacity for at least <code>additional</code> …","Reserves the minimum capacity for at least <code>additional</code> more …","Modifies the deque in-place so that <code>len()</code> is equal to …","Modifies the deque in-place so that <code>len()</code> is equal to …","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Rotates the double-ended queue <code>mid</code> places to the left.","Rotates the double-ended queue <code>k</code> places to the right.","","","","","","","","Discards capacity with a lower bound.","Shrinks the capacity of the map with a lower limit. It …","Shrinks the capacity of the set with a lower limit. It …","Shrinks the capacity of the deque with a lower bound.","Discards as much additional capacity as possible.","Shrinks the capacity of the map as much as possible. It …","Shrinks the capacity of the set as much as possible. It …","Shrinks the capacity of the deque as much as possible.","","","","","","Splits the collection into two at the given key. Returns …","Splits the collection into two at the value. Returns a new …","Splits the list into two at the given index. Returns …","Splits the deque into two at the given index.","Returns the difference of <code>self</code> and <code>rhs</code> as a new …","Returns the difference of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>…","Swaps elements at indices <code>i</code> and <code>j</code>.","Removes an element from anywhere in the deque and returns …","Removes an element from anywhere in the deque and returns …","Visits the values representing the symmetric difference, …","Visits the elements representing the symmetric difference, …","Removes and returns the value in the set, if any, that is …","Removes and returns the element in the set, if any, that …","","","","","","","","","","","","","","","","Shortens the deque, keeping the first <code>len</code> elements and …","","","","","","","","","","Tries to insert a key-value pair into the map, and returns …","Tries to insert a key-value pair into the map, and returns …","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> elements …","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve the minimum capacity for at least …","Tries to reserve the minimum capacity for at least …","","","","","","","","","","","","","Visits the values representing the union, i.e., all the …","Visits the elements representing the union, i.e., all the …","An iterator visiting all values in arbitrary order. The …","Gets an iterator over the values of the map, in order by …","An iterator visiting all values mutably in arbitrary order.","Gets a mutable iterator over the values of the map, in …","A double-ended queue (deque) implemented with a growable …","Creates an empty <code>BinaryHeap</code> with at least the specified …","Creates an empty <code>HashMap</code> with at least the specified …","Creates an empty <code>HashSet</code> with at least the specified …","Creates an empty deque with space for at least <code>capacity</code> …","Creates an empty <code>HashMap</code> with at least the specified …","Creates an empty <code>HashSet</code> with at least the specified …","Creates an empty deque with space for at least <code>capacity</code> …","Creates an empty <code>HashMap</code> which will use the given hash …","Creates a new empty hash set which will use the given …","","","","","","The layout of allocation request that failed","A priority queue implemented with a binary heap.","A draining iterator over the elements of a <code>BinaryHeap</code>.","A draining iterator over the elements of a <code>BinaryHeap</code>.","An owning iterator over the elements of a <code>BinaryHeap</code>.","","An iterator over the elements of a <code>BinaryHeap</code>.","Structure wrapping a mutable reference to the greatest …","","","","","","","","","","","","","","","","","","","","","","Removes heap elements in heap order.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Removes the peeked value from the heap and returns it.","","","","","","","","","","","","","","","","","","","","","","","","","","","An ordered map based on a B-Tree.","An iterator produced by calling <code>drain_filter</code> on BTreeMap.","A view into a single entry in a map, which may either be …","An owning iterator over the entries of a <code>BTreeMap</code>.","An owning iterator over the keys of a <code>BTreeMap</code>.","An owning iterator over the values of a <code>BTreeMap</code>.","An iterator over the entries of a <code>BTreeMap</code>.","A mutable iterator over the entries of a <code>BTreeMap</code>.","An iterator over the keys of a <code>BTreeMap</code>.","An occupied entry.","A view into an occupied entry in a <code>BTreeMap</code>. It is part of …","The error returned by <code>try_insert</code> when the key already …","An iterator over a sub-range of entries in a <code>BTreeMap</code>.","A mutable iterator over a sub-range of entries in a …","A vacant entry.","A view into a vacant entry in a <code>BTreeMap</code>. It is part of …","An iterator over the values of a <code>BTreeMap</code>.","A mutable iterator over the values of a <code>BTreeMap</code>.","Provides in-place mutable access to an occupied entry …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The entry in the map that was already occupied.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Sets the value of the entry with the <code>VacantEntry</code>’s key, …","Sets the value of the entry with the <code>OccupiedEntry</code>’s key,","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Take ownership of the key.","Converts the entry into a mutable reference to its value.","Returns a reference to this entry’s key.","Gets a reference to the key that would be used when …","Gets a reference to the key in the entry.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting, if empty, …","Takes the value of the entry out of the map, and returns …","Take ownership of the key and value from the map.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The value which was not inserted, because the entry was …","","","An ordered set based on a B-Tree.","A lazy iterator producing elements in the difference of …","An iterator produced by calling <code>drain_filter</code> on BTreeSet.","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>BTreeSet</code>.","An iterator over the items of a <code>BTreeSet</code>.","An iterator over a sub-range of items in a <code>BTreeSet</code>.","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>BTreeSet</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The default <code>Hasher</code> used by <code>RandomState</code>.","A draining iterator over the entries of a <code>HashMap</code>.","A draining, filtering iterator over the entries of a …","A view into a single entry in a map, which may either be …","A hash map implemented with quadratic probing and SIMD …","An owning iterator over the entries of a <code>HashMap</code>.","An owning iterator over the keys of a <code>HashMap</code>.","An owning iterator over the values of a <code>HashMap</code>.","An iterator over the entries of a <code>HashMap</code>.","A mutable iterator over the entries of a <code>HashMap</code>.","An iterator over the keys of a <code>HashMap</code>.","An occupied entry.","An occupied entry.","A view into an occupied entry in a <code>HashMap</code>. It is part of …","The error returned by <code>try_insert</code> when the key already …","<code>RandomState</code> is the default state for <code>HashMap</code> types.","A builder for computing where in a HashMap a key-value …","A builder for computing where in a HashMap a key-value …","A view into a single entry in a map, which may either be …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","A vacant entry.","A vacant entry.","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","An iterator over the values of a <code>HashMap</code>.","A mutable iterator over the values of a <code>HashMap</code>.","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs a new <code>RandomState</code>.","Creates a new <code>DefaultHasher</code> using <code>new</code>. See its …","","The entry in the map that was already occupied.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>RawEntryMut</code> from the given hash.","Access an entry by hash.","Creates a <code>RawEntryMut</code> from the given key.","Access an entry by key.","Creates a <code>RawEntryMut</code> from the given key and its hash.","Access an entry by a key and its hash.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Gets a reference to the key and value in the entry.","Gets a mutable reference to the key and value in the entry.","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the <code>VacantEntry</code>’s key, …","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the <code>VacantEntry</code>’s key, …","Sets the value of the entry, and returns an <code>OccupiedEntry</code>.","Sets the value of the entry with the <code>VacantEntry</code>’s key, …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns the entry’s old …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Converts the entry into a mutable reference to the key in …","Take ownership of the key.","Converts the <code>OccupiedEntry</code> into a mutable reference to the …","Converts the <code>OccupiedEntry</code> into a mutable reference to the …","Converts the <code>OccupiedEntry</code> into a mutable reference to the …","Gets a reference to the key in the entry.","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Gets a mutable reference to the key in the entry.","","","","","","","","","","Constructs a new <code>RandomState</code> that is initialized with …","Creates a new <code>DefaultHasher</code>.","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting, if empty, …","Takes the value out of the entry, and returns it.","Takes the value out of the entry, and returns it.","Take the ownership of the key and value from the map.","Take the ownership of the key and value from the map.","Replaces the entry, returning the old key and value. The …","Replaces the key in the hash map with the key used to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The value which was not inserted, because the entry was …","","","","","","","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>HashSet</code>.","A draining, filtering iterator over the items of a <code>HashSet</code>.","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>HashSet</code>.","An iterator over the items of a <code>HashSet</code>.","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>HashSet</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A cursor over a <code>LinkedList</code>.","A cursor over a <code>LinkedList</code> with editing operations.","An iterator produced by calling <code>drain_filter</code> on LinkedList.","An owning iterator over the elements of a <code>LinkedList</code>.","An iterator over the elements of a <code>LinkedList</code>.","A mutable iterator over the elements of a <code>LinkedList</code>.","A doubly-linked list with owned nodes.","Returns a read-only cursor pointing to the current element.","Provides a reference to the back element of the cursor’s …","Provides a reference to the back element of the cursor’s …","Provides a mutable reference to back element of the cursor…","","","","","","","","","","","","","","","","","","","Returns a reference to the element that the cursor is …","Returns a reference to the element that the cursor is …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Provides a reference to the front element of the cursor’…","Provides a reference to the front element of the cursor’…","Provides a mutable reference to the front element of the …","Returns the cursor position index within the <code>LinkedList</code>.","Returns the cursor position index within the <code>LinkedList</code>.","Inserts a new element into the <code>LinkedList</code> after the …","Inserts a new element into the <code>LinkedList</code> before the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Moves the cursor to the next element of the <code>LinkedList</code>.","Moves the cursor to the next element of the <code>LinkedList</code>.","Moves the cursor to the previous element of the <code>LinkedList</code>.","Moves the cursor to the previous element of the <code>LinkedList</code>.","","","","","","","","Returns a reference to the next element.","Returns a reference to the next element.","Returns a reference to the previous element.","Returns a reference to the previous element.","Removes the last element from the cursor’s parent list …","Removes the first element from the cursor’s parent list …","Appends an element to the back of the cursor’s parent …","Appends an element to the front of the cursor’s parent …","Removes the current element from the <code>LinkedList</code>.","Removes the current element from the <code>LinkedList</code> without …","","","","","Inserts the elements from the given <code>LinkedList</code> after the …","Inserts the elements from the given <code>LinkedList</code> before the …","Splits the list into two after the current element. This …","Splits the list into two before the current element. This …","","","","","","","","","","","","","","","","","","","","","","A draining iterator over the elements of a <code>VecDeque</code>.","An owning iterator over the elements of a <code>VecDeque</code>.","An iterator over the elements of a <code>VecDeque</code>.","A mutable iterator over the elements of a <code>VecDeque</code>.","A double-ended queue implemented with a growable ring …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Possible alignments returned by <code>Formatter::align</code>","This structure represents a safely precompiled version of …","<code>b</code> formatting.","Indication that contents should be center-aligned.","<code>?</code> formatting.","Derive macro generating an impl of the trait <code>Debug</code>.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","Format trait for an empty format, <code>{}</code>.","The error type which is returned from formatting a message …","Configuration for formatting.","Indication that contents should be left-aligned.","<code>e</code> formatting.","<code>x</code> formatting.","<code>o</code> formatting.","<code>p</code> formatting.","The type returned by formatter methods.","Indication that contents should be right-aligned.","<code>E</code> formatting.","<code>X</code> formatting.","A trait for writing or formatting into Unicode-accepting …","Flag indicating what form of alignment was requested.","Determines if the <code>#</code> flag was specified.","Get the formatted string, if it has no arguments to be …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>DebugList</code> builder designed to assist with …","Creates a <code>DebugMap</code> builder designed to assist with …","Creates a <code>DebugSet</code> builder designed to assist with …","Creates a <code>DebugStruct</code> builder designed to assist with …","Creates a <code>DebugTuple</code> builder designed to assist with …","","","Adds the contents of an iterator of entries to the set …","Adds the contents of an iterator of entries to the list …","Adds the contents of an iterator of entries to the map …","Adds a new entry to the set output.","Adds a new entry to the list output.","Adds a new entry to the map output.","","","Adds a new field to the generated struct output.","Adds a new field to the generated tuple struct output.","Character used as ‘fill’ whenever there is alignment.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Marks the struct as non-exhaustive, indicating to the …","Flags for formatting","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","","","","","","The <code>format</code> function takes an <code>Arguments</code> struct and returns …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Adds the key part of a new entry to the map output.","This function takes a string slice and emits it to the …","Performs the correct padding for an integer which has …","","Optionally specified precision for numeric types. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Determines if the <code>0</code> flag was specified.","Determines if the <code>-</code> flag was specified.","Determines if the <code>+</code> flag was specified.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds the value part of a new entry to the map output.","Optionally specified integer width that the output should …","The <code>write</code> function takes an output stream, and an <code>Arguments</code>…","Writes a <code>char</code> into this writer, returning whether the …","","Glue for usage of the <code>write!</code> macro with implementors of …","","Writes some formatted information into this instance.","Writes a string slice into this writer, returning whether …","Writes some data to the underlying buffer contained within …","","A trait for creating instances of <code>Hasher</code>.","Used to create a default <code>BuildHasher</code> instance for types …","A hashable type.","Derive macro generating an impl of the trait <code>Hash</code>.","A trait for hashing an arbitrary stream of bytes.","Type of the hasher that will be created.","An implementation of SipHash 2-4.","","","","","Creates a new hasher.","","","","","","","","","Returns the hash value for the values written so far.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Feeds this value into the given <code>Hasher</code>.","Calculates the hash of a single value.","Feeds a slice of this type into the given <code>Hasher</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>SipHasher</code> with the two initial keys set to 0.","Creates a <code>SipHasher</code> that is keyed off the provided keys.","","","","","","","","","Writes some data into this <code>Hasher</code>.","","Writes a single <code>i128</code> into this hasher.","Writes a single <code>i16</code> into this hasher.","Writes a single <code>i32</code> into this hasher.","Writes a single <code>i64</code> into this hasher.","Writes a single <code>i8</code> into this hasher.","Writes a single <code>isize</code> into this hasher.","Writes a length prefix into this hasher, as part of being …","Writes a single <code>str</code> into this hasher.","","Writes a single <code>u128</code> into this hasher.","Writes a single <code>u16</code> into this hasher.","Writes a single <code>u32</code> into this hasher.","Writes a single <code>u64</code> into this hasher.","Writes a single <code>u8</code> into this hasher.","Writes a single <code>usize</code> into this hasher.","Types whose values can be duplicated simply by copying …","Derive macro generating an impl of the trait <code>Copy</code>.","A marker for types that can be dropped.","The type of the discriminant, which must satisfy the trait …","Compiler-internal trait used to indicate the type of enum …","Zero-sized type used to mark things that “act like” …","A marker type which does not implement <code>Unpin</code>.","Types that can be transferred across thread boundaries.","Types with a constant size known at compile time.","Required trait for constants used in pattern matches.","Required trait for constants used in pattern matches.","Types for which it is safe to share references between …","Types that can be safely moved after being pinned.","Types that can be “unsized” to a dynamically-sized …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","What transmutation safety conditions shall the compiler …","Are values of a type transmutable into values of another …","Opaque type representing the discriminant of an enum.","A wrapper to inhibit compiler from automatically calling <code>T</code>…","A wrapper type to construct uninitialized instances of <code>T</code>.","Returns the ABI-required minimum alignment of a type in …","Returns the ABI-required minimum alignment of the type of …","Returns the ABI-required minimum alignment of the type of …","When <code>true</code>, the compiler assumes that <em>you</em> are ensuring …","Extracts the values from an array of <code>MaybeUninit</code> …","Returns the contents of this <code>MaybeUninit</code> as a slice of …","Returns the contents of this <code>MaybeUninit</code> as a mutable …","Gets a mutable pointer to the contained value. Reading …","Gets a pointer to the contained value. Reading from this …","Extracts the value from the <code>MaybeUninit&lt;T&gt;</code> container. This …","Drops the contained value in place.","Gets a mutable (unique) reference to the contained value.","Reads the value from the <code>MaybeUninit&lt;T&gt;</code> container. The …","Gets a shared reference to the contained value.","","","","","","","","","","","","","","","","","","Bitwise-copies a value.","","","","Returns a value uniquely identifying the enum variant in <code>v</code>.","Disposes of a value.","Manually drops the contained value. This is exactly …","","","","","","","","Takes ownership and “forgets” about the value <strong>without </strong>…","Like <code>forget</code>, but also accepts unsized values.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Extracts the value from the <code>ManuallyDrop</code> container.","When <code>true</code>, the compiler assume that <em>you</em> are ensuring that …","Returns the ABI-required minimum alignment of a type in …","Returns the ABI-required minimum alignment of the type of …","Returns <code>true</code> if dropping values of type <code>T</code> matters.","Wrap a value to be manually dropped.","Creates a new <code>MaybeUninit&lt;T&gt;</code> initialized with the given …","","Moves <code>src</code> into the referenced <code>dest</code>, returning the previous …","Returns the size of a type in bytes.","Returns the size of the pointed-to value in bytes.","Returns the size of the pointed-to value in bytes.","Returns the contents of this slice of <code>MaybeUninit</code> as a …","Returns the contents of this mutable slice of <code>MaybeUninit</code> …","Gets a mutable pointer to the first element of the array.","Gets a pointer to the first element of the array.","Assuming all the elements are initialized, get a mutable …","Assuming all the elements are initialized, get a slice to …","Swaps the values at two mutable locations, without …","Replaces <code>dest</code> with the default value of <code>T</code>, returning the …","Takes the value from the <code>ManuallyDrop&lt;T&gt;</code> container out.","","","","","Reinterprets the bits of a value of one type as another …","Interprets <code>src</code> as having type <code>&amp;U</code>, and then reads <code>src</code> …","","","","","","","","","","","","","Creates a new <code>MaybeUninit&lt;T&gt;</code> in an uninitialized state.","Create a new array of <code>MaybeUninit&lt;T&gt;</code> items, in an …","Bypasses Rust’s normal memory-initialization checks by …","When <code>true</code>, the compiler assumes that <em>you</em> are ensuring that …","Returns the number of variants in the enum type <code>T</code>.","When <code>true</code>, the compiler assumes that <em>you</em> have ensured that …","Sets the value of the <code>MaybeUninit&lt;T&gt;</code>.","Copies the elements from <code>src</code> to <code>this</code>, returning a mutable …","Clones the elements from <code>src</code> to <code>this</code>, returning a mutable …","Returns the value of type <code>T</code> represented by the all-zero …","Creates a new <code>MaybeUninit&lt;T&gt;</code> in an uninitialized state, …","","","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Value being parsed is empty.","A classification of floating point numbers.","Positive or negative infinity, which often results from …","Enum to store the various types of errors that can cause …","Contains an invalid digit in its context.","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","NaN (not a number): this value results from calculations …","Integer is too small to store in target integer type.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","A regular floating point number, not any of the …","An error which can be returned when parsing a float.","An error which can be returned when parsing an integer.","Integer is too large to store in target integer type.","Provides intentionally-saturating arithmetic on <code>T</code>.","“Subnormal” or “denormal” floating point …","The error type returned when a checked integral type …","Provides intentionally-wrapped arithmetic on <code>T</code>.","Value was Zero","Positive or negative zero.","Computes the absolute value of self. See <code>i8::abs</code> for …","Computes the absolute value of self. See <code>i16::abs</code> for …","Computes the absolute value of self. See <code>i32::abs</code> for …","Computes the absolute value of self. See <code>i64::abs</code> for …","Computes the absolute value of self. See <code>i128::abs</code> for …","Computes the absolute value of self. See <code>isize::abs</code> for …","Saturating absolute value. Computes <code>self.abs()</code>, returning …","Saturating absolute value. Computes <code>self.abs()</code>, returning …","Saturating absolute value. Computes <code>self.abs()</code>, returning …","Saturating absolute value. Computes <code>self.abs()</code>, returning …","Saturating absolute value. Computes <code>self.abs()</code>, returning …","Saturating absolute value. Computes <code>self.abs()</code>, returning …","Computes the absolute value of <code>self</code>, wrapping around at …","Computes the absolute value of <code>self</code>, wrapping around at …","Computes the absolute value of <code>self</code>, wrapping around at …","Computes the absolute value of <code>self</code>, wrapping around at …","Computes the absolute value of <code>self</code>, wrapping around at …","Computes the absolute value of <code>self</code>, wrapping around at …hecked absolute value. Check for overflow and returns <code>None</code>…","Checked absolute value. Check for overflow and returns <code>None</code>…","Checked absolute value. Check for overflow and returns <code>None</code>…","Checked absolute value. Check for overflow and returns <code>None</code>…","Checked absolute value. Check for overflow and returns <code>None</code>…","Checked absolute value. Check for overflow and returns <code>None</code>…","Add an unsigned integer to a non-zero value. Check for …","Add an unsigned integer to a non-zero value. Check for …","Add an unsigned integer to a non-zero value. Check for …","Add an unsigned integer to a non-zero value. Check for …","Add an unsigned integer to a non-zero value. Check for …","Add an unsigned integer to a non-zero value. Check for …","Multiply two non-zero integers together. Check for …","Multiply two non-zero integers together. Check for …","Multiply two non-zero integers together. Check for …","Multiply two non-zero integers together. Check for …","Multiply two non-zero integers together. Check for …","Multiply two non-zero integers together. Check for …","Multiply two non-zero integers together. Check for …","Multiply two non-zero integers together. Check for …","Multiply two non-zero integers together. Check for …","Multiply two non-zero integers together. Check for …","Multiply two non-zero integers together. Check for …","Multiply two non-zero integers together. Check for …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Raise non-zero value to an integer power. Check for …","Raise non-zero value to an integer power. Check for …","Raise non-zero value to an integer power. Check for …","Raise non-zero value to an integer power. Check for …","Raise non-zero value to an integer power. Check for …","Raise non-zero value to an integer power. Check for …","Raise non-zero value to an integer power. Check for …","Raise non-zero value to an integer power. Check for …","Raise non-zero value to an integer power. Check for …","Raise non-zero value to an integer power. Check for …","Raise non-zero value to an integer power. Check for …","Raise non-zero value to an integer power. Check for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …eturns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts <code>NonZeroU8</code> to <code>NonZeroU16</code> losslessly.","Returns the argument unchanged.","Returns the argument unchanged.","Converts <code>NonZeroU8</code> to <code>NonZeroU32</code> losslessly.","Converts <code>NonZeroU16</code> to <code>NonZeroU32</code> losslessly.","Converts <code>NonZeroU32</code> to <code>NonZeroU64</code> losslessly.","Converts <code>NonZeroU8</code> to <code>NonZeroU64</code> losslessly.","Returns the argument unchanged.","Converts <code>NonZeroU16</code> to <code>NonZeroU64</code> losslessly.","Returns the argument unchanged.","Converts <code>NonZeroU64</code> to <code>NonZeroU128</code> losslessly.","Converts <code>NonZeroU32</code> to <code>NonZeroU128</code> losslessly.","Converts <code>NonZeroU16</code> to <code>NonZeroU128</code> losslessly.","Converts <code>NonZeroU8</code> to <code>NonZeroU128</code> losslessly.","Returns the argument unchanged.","Converts <code>NonZeroU8</code> to <code>NonZeroUsize</code> losslessly.","Converts <code>NonZeroU16</code> to <code>NonZeroUsize</code> losslessly.","Returns the argument unchanged.","Converts <code>NonZeroU8</code> to <code>NonZeroI16</code> losslessly.","Converts <code>NonZeroI8</code> to <code>NonZeroI16</code> losslessly.","Returns the argument unchanged.","Returns the argument unchanged.","Converts <code>NonZeroU8</code> to <code>NonZeroI32</code> losslessly.","Converts <code>NonZeroI8</code> to <code>NonZeroI32</code> losslessly.","Converts <code>NonZeroU16</code> to <code>NonZeroI32</code> losslessly.","Converts <code>NonZeroI16</code> to <code>NonZeroI32</code> losslessly.","Converts <code>NonZeroU8</code> to <code>NonZeroI64</code> losslessly.","Converts <code>NonZeroI8</code> to <code>NonZeroI64</code> losslessly.","Converts <code>NonZeroU32</code> to <code>NonZeroI64</code> losslessly.","Converts <code>NonZeroU16</code> to <code>NonZeroI64</code> losslessly.","Converts <code>NonZeroI32</code> to <code>NonZeroI64</code> losslessly.","Returns the argument unchanged.","Converts <code>NonZeroI16</code> to <code>NonZeroI64</code> losslessly.","Returns the argument unchanged.","Converts <code>NonZeroI8</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroI32</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroU8</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroI64</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroU64</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroU16</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroU32</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroI16</code> to <code>NonZeroI128</code> losslessly.","Returns the argument unchanged.","Converts <code>NonZeroI16</code> to <code>NonZeroIsize</code> losslessly.","Converts <code>NonZeroU8</code> to <code>NonZeroIsize</code> losslessly.","Converts <code>NonZeroI8</code> to <code>NonZeroIsize</code> losslessly.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","","","","","","","","","","","","","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","","","","","","","","","","","","","","","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Outputs the detailed cause of parsing an integer failing.","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the absolute value of self, with overflow …","Computes the absolute value of self, with overflow …","Computes the absolute value of self, with overflow …","Computes the absolute value of self, with overflow …","Computes the absolute value of self, with overflow …","Computes the absolute value of self, with overflow …","","","","","","","","","","","","","","","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …everses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Saturating absolute value, see <code>i8::saturating_abs</code>.","Saturating absolute value, see <code>i16::saturating_abs</code>.","Saturating absolute value, see <code>i32::saturating_abs</code>.","Saturating absolute value, see <code>i64::saturating_abs</code>.","Saturating absolute value, see <code>i128::saturating_abs</code>.","Saturating absolute value, see <code>isize::saturating_abs</code>.","Add an unsigned integer to a non-zero value. Return <code>u8::MAX</code>…","Add an unsigned integer to a non-zero value. Return …","Add an unsigned integer to a non-zero value. Return …","Add an unsigned integer to a non-zero value. Return …","Add an unsigned integer to a non-zero value. Return …","Add an unsigned integer to a non-zero value. Return …","Multiply two non-zero integers together. Return <code>u8::MAX</code> on …","Multiply two non-zero integers together. Return <code>u16::MAX</code> …","Multiply two non-zero integers together. Return <code>u32::MAX</code> …","Multiply two non-zero integers together. Return <code>u64::MAX</code> …","Multiply two non-zero integers together. Return <code>u128::MAX</code> …","Multiply two non-zero integers together. Return <code>usize::MAX</code> …","Multiply two non-zero integers together. Return <code>i8::MAX</code> on …","Multiply two non-zero integers together. Return <code>i16::MAX</code> …","Multiply two non-zero integers together. Return <code>i32::MAX</code> …","Multiply two non-zero integers together. Return <code>i64::MAX</code> …","Multiply two non-zero integers together. Return <code>i128::MAX</code> …","Multiply two non-zero integers together. Return <code>isize::MAX</code> …","Raise non-zero value to an integer power. Return <code>u8::MAX</code> …","Raise non-zero value to an integer power. Return <code>u16::MAX</code> …","Raise non-zero value to an integer power. Return <code>u32::MAX</code> …","Raise non-zero value to an integer power. Return <code>u64::MAX</code> …","Raise non-zero value to an integer power. Return <code>u128::MAX</code> …","Raise non-zero value to an integer power. Return <code>usize::MAX</code>…","Raise non-zero value to an integer power. Return <code>i8::MIN</code> …","Raise non-zero value to an integer power. Return <code>i16::MIN</code> …","Raise non-zero value to an integer power. Return <code>i32::MIN</code> …","Raise non-zero value to an integer power. Return <code>i64::MIN</code> …","Raise non-zero value to an integer power. Return <code>i128::MIN</code> …","Raise non-zero value to an integer power. Return <code>isize::MIN</code>…eturns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</codeeverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","","","","","","","","","","","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","","","","","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroU8</code>.","Attempts to convert <code>u8</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroU8</code>.","","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroU16</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroU16</code>.","Attempts to convert <code>u16</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroU16</code>.","","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroU32</code>.","","Attempts to convert <code>u32</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroU64</code>.","Attempts to convert <code>u64</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroU64</code>.","","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroU128</code>.","Attempts to convert <code>u128</code> to <code>NonZeroU128</code>.","","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>usize</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroUsize</code>.","","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>i8</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroU16</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroU8</code> to <code>NonZeroI8</code>.","","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroI16</code>.","Attempts to convert <code>i16</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroI16</code>.","","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroU16</code> to <code>NonZeroI16</code>.","","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroI32</code>.","Attempts to convert <code>i32</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroI64</code>.","","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroI64</code>.","Attempts to convert <code>i64</code> to <code>NonZeroI64</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroI64</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroI64</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroI64</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroI128</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroI128</code>.","","Attempts to convert <code>i128</code> to <code>NonZeroI128</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroI128</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>isize</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroIsize</code>.","","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>NonZeroU16</code> to <code>NonZeroIsize</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Add an unsigned integer to a non-zero value, assuming …","Add an unsigned integer to a non-zero value, assuming …","Add an unsigned integer to a non-zero value, assuming …","Add an unsigned integer to a non-zero value, assuming …","Add an unsigned integer to a non-zero value, assuming …","Add an unsigned integer to a non-zero value, assuming …","Multiply two non-zero integers together, assuming overflow …","Multiply two non-zero integers together, assuming overflow …","Multiply two non-zero integers together, assuming overflow …","Multiply two non-zero integers together, assuming overflow …","Multiply two non-zero integers together, assuming overflow …","Multiply two non-zero integers together, assuming overflow …","Multiply two non-zero integers together, assuming overflow …","Multiply two non-zero integers together, assuming overflow …","Multiply two non-zero integers together, assuming overflow …","Multiply two non-zero integers together, assuming overflow …","Multiply two non-zero integers together, assuming overflow …","Multiply two non-zero integers together, assuming overflow …","Computes the absolute value of self without any wrapping …","Computes the absolute value of self without any wrapping …","Computes the absolute value of self without any wrapping …","Computes the absolute value of self without any wrapping …","Computes the absolute value of self without any wrapping …","Computes the absolute value of self without any wrapping …","","","","","","","","","","","Wrapping absolute value, see <code>i8::wrapping_abs</code>.","Wrapping absolute value, see <code>i16::wrapping_abs</code>.","Wrapping absolute value, see <code>i32::wrapping_abs</code>.","Wrapping absolute value, see <code>i64::wrapping_abs</code>.","Wrapping absolute value, see <code>i128::wrapping_abs</code>.","Wrapping absolute value, see <code>isize::wrapping_abs</code>.","","The addition operator <code>+</code>.","The addition assignment operator <code>+=</code>.","APIs like <code>try_for_each</code> don’t need values with <code>Break</code>, so …","The bitwise AND operator <code>&amp;</code>.","The bitwise AND assignment operator <code>&amp;=</code>.","The bitwise OR operator <code>|</code>.","The bitwise OR assignment operator <code>|=</code>.","The bitwise XOR operator <code>^</code>.","The bitwise XOR assignment operator <code>^=</code>.","An endpoint of a range of keys.","Exit the operation without running subsequent phases.","It’s frequently the case that there’s no value needed …","Trait that indicates that this is a pointer or a wrapper …","The generator completed with a return value.","Move on to the next phase of the operation as normal.","Used to tell an operation whether it should exit early or …","Used for immutable dereferencing operations, like <code>*v</code>.","Used for mutable dereferencing operations, like in <code>*v = 1;</code>.","<code>DispatchFromDyn</code> is used in the implementation of object …","The division operator <code>/</code>.","The division assignment operator <code>/=</code>.","Custom code within the destructor.","An exclusive bound.","The version of the call operator that takes an immutable …","The version of the call operator that takes a mutable …","The version of the call operator that takes a by-value …","Used to specify which residuals can be converted into …","The trait implemented by builtin generator types.","The result of a generator resumption.","An inclusive bound.","Used for indexing operations (<code>container[index]</code>) in …","Used for indexing operations (<code>container[index]</code>) in mutable …","The multiplication operator <code>*</code>.","The multiplication assignment operator <code>*=</code>.","The unary negation operator <code>-</code>.","The unary logical negation operator <code>!</code>.","<code>OneSidedRange</code> is implemented for built-in range types that …","The resulting type after applying the <code>+</code> operator.","The resulting type after applying the <code>-</code> operator.","The resulting type after applying the <code>*</code> operator.","The resulting type after applying the <code>/</code> operator.","The resulting type after applying the <code>%</code> operator.","The resulting type after applying the <code>-</code> operator.","The resulting type after applying the <code>!</code> operator.","The resulting type after applying the <code>&amp;</code> operator.","The resulting type after applying the <code>|</code> operator.","The resulting type after applying the <code>^</code> operator.","The resulting type after applying the <code>&lt;&lt;</code> operator.","The resulting type after applying the <code>&gt;&gt;</code> operator.","The returned type after the call operator is used.","The returned type after indexing.","The type of the value produced by <code>?</code> when <em>not</em> …","A (half-open) range bounded inclusively below and …","<code>RangeBounds</code> is implemented by Rust’s built-in range …","A range only bounded inclusively below (<code>start..</code>).","An unbounded range (<code>..</code>).","A range bounded inclusively below and above (<code>start..=end</code>).","A range only bounded exclusively above (<code>..end</code>).","A range only bounded inclusively above (<code>..=end</code>).","The remainder operator <code>%</code>.","The remainder assignment operator <code>%=</code>.","Allows retrieving the canonical type implementing <code>Try</code> that …","The type of the value passed to <code>FromResidual::from_residual</code>","The type of value this generator returns.","The left shift operator <code>&lt;&lt;</code>. Note that because this trait …","The left shift assignment operator <code>&lt;&lt;=</code>.","The right shift operator <code>&gt;&gt;</code>. Note that because this trait …","The right shift assignment operator <code>&gt;&gt;=</code>.","The subtraction operator <code>-</code>.","The subtraction assignment operator <code>-=</code>.","The resulting type after dereferencing.","The <code>?</code> operator and <code>try {}</code> blocks.","The “return” type of this meta-function.","An infinite endpoint. Indicates that there is no bound in …","Implement <code>FromResidual&lt;Yeet&lt;T&gt;&gt;</code> on your type to enable …","The type of value this generator yields.","The generator suspended with a value.","Performs the <code>+</code> operation.","Performs the <code>+=</code> operation.","","","Converts from <code>&amp;mut Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;mut T&gt;</code>.","Converts from <code>&amp;Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;T&gt;</code>.","Performs the <code>&amp;</code> operation.","Performs the <code>&amp;=</code> operation.","Performs the <code>|</code> operation.","Performs the <code>|=</code> operation.","Performs the <code>^</code> operation.","Performs the <code>^=</code> operation.","","","","","","","","","","","","","","","","","","","","","Used in <code>?</code> to decide whether the operator should produce a …","","Converts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …","Performs the call operation.","Performs the call operation.","Performs the call operation.","","","","","","","","","","","","","","","","","","","Map a <code>Bound&lt;&amp;T&gt;</code> to a <code>Bound&lt;T&gt;</code> by cloning the contents of …","","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Converts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …","","","","","","","","","","","Dereferences the value.","Mutably dereferences the value.","","","","Performs the <code>/</code> operation.","Performs the <code>/=</code> operation.","Executes the destructor for this type.","","","Returns the upper bound of the range (inclusive).","The upper bound of the range (exclusive).","The upper bound of the range (exclusive).","The upper bound of the range (inclusive)","End index bound.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs the type from its <code>Output</code> type.","","Constructs the type from a compatible <code>Residual</code> type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the indexing (<code>container[index]</code>) operation.","","","","","","","","","","","","","","","","","","","Performs the mutable indexing (<code>container[index]</code>) operation.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Destructures the <code>RangeInclusive</code> into (lower bound, upper …","","","","Returns <code>true</code> if this is a <code>Break</code> variant.","Returns <code>true</code> if this is a <code>Continue</code> variant.","Returns <code>true</code> if the range contains no items.","Returns <code>true</code> if the range contains no items.","","","","","Maps a <code>Bound&lt;T&gt;</code> to a <code>Bound&lt;U&gt;</code> by applying a function to …","Maps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;T, C&gt;</code> by applying a …","Maps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;B, T&gt;</code> by applying a …","","","","","Performs the <code>*</code> operation.","Performs the <code>*=</code> operation.","Performs the unary <code>-</code> operation.","Creates a new inclusive range. Equivalent to writing …","","","","","","","","","","","","Performs the unary <code>!</code> operation.","","","","","","","Performs the <code>%</code> operation.","Performs the <code>%=</code> operation.","Resumes the execution of this generator.","","","","","Performs the <code>&lt;&lt;</code> operation.","Performs the <code>&lt;&lt;=</code> operation.","Performs the <code>&gt;&gt;</code> operation.","Performs the <code>&gt;&gt;=</code> operation.","","","","","","Returns the lower bound of the range (inclusive).","The lower bound of the range (inclusive).","The lower bound of the range (inclusive).","Start index bound.","","","","","","","","","","","","Performs the <code>-</code> operation.","Performs the <code>-=</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A draining iterator for <code>String</code>.","A possible error value when converting a <code>String</code> from a …","A possible error value when converting a <code>String</code> from a …","A type alias for <code>Infallible</code>.","A UTF-8–encoded, growable string.","A trait for converting a value to a <code>String</code>.","","","","","","","Returns a byte slice of this <code>String</code>’s contents.","Returns a slice of <code>u8</code>s bytes that were attempted to …","","Converts a <code>String</code> into a mutable string slice.","Returns a mutable reference to the contents of this <code>String</code>.","","","","","","","","","Returns the remaining (sub)string of this iterator as a …","Extracts a string slice containing the entire <code>String</code>.","","","","","","","","","","","Returns this <code>String</code>’s capacity, in bytes.","Truncates this <code>String</code>, removing all contents.","","","","","","","","","","","Creates an empty <code>String</code>.","","","","","","Removes the specified range from the string in bulk, …","","","","","","","","","","","","","","","Copies elements from <code>src</code> range to the end of the string.","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts a <code>&amp;String</code> into a <code>String</code>.","Converts a <code>&amp;str</code> into a <code>String</code>.","Returns the argument unchanged.","Converts a <code>&amp;mut str</code> into a <code>String</code>.","Converts a clone-on-write string to an owned instance of …","Converts the given boxed <code>str</code> slice to a <code>String</code>. It is …","Allocates an owned <code>String</code> from a single character.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Creates a new <code>String</code> from a length, capacity, and pointer.","","Decode a UTF-16–encoded vector <code>v</code> into a <code>String</code>, …","Decode a UTF-16–encoded slice <code>v</code> into a <code>String</code>, replacing …","Converts a vector of bytes to a <code>String</code>.","Converts a slice of bytes to a string, including invalid …","Converts a vector of bytes to a <code>String</code> without checking …","","","","","","","","","","","","","","Inserts a character into this <code>String</code> at a byte position.","Inserts a string slice into this <code>String</code> at a byte position.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this <code>String</code> into a Box&lt;str&gt;.","Converts a <code>String</code> into a byte vector.","Returns the bytes that were attempted to convert to a …","","","Decomposes a <code>String</code> into its raw components.","","","Returns <code>true</code> if this <code>String</code> has a length of zero, and <code>false</code>…","","","","Returns the length of this <code>String</code>, in bytes, not <code>char</code>s or …","","","","","Creates a new empty <code>String</code>.","","","","Removes the last character from the string buffer and …","Appends the given <code>char</code> to the end of this <code>String</code>.","Appends a given string slice onto the end of this <code>String</code>.","Removes a <code>char</code> from this <code>String</code> at a byte position and …","Remove all matches of pattern <code>pat</code> in the <code>String</code>.","Removes the specified range in the string, and replaces it …","Reserves capacity for at least <code>additional</code> bytes more than …","Reserves the minimum capacity for at least <code>additional</code> …","Retains only the characters specified by the predicate.","","Shrinks the capacity of this <code>String</code> with a lower bound.","Shrinks the capacity of this <code>String</code> to match its length.","","","Splits the string into two at the given byte index.","","","","","","","Converts the given value to a <code>String</code>.","","","","","Shortens this <code>String</code> to the specified length.","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> bytes …","Tries to reserve the minimum capacity for at least …","","","","","","","Fetch a <code>Utf8Error</code> to get more details about the conversion …","Creates a new empty <code>String</code> with at least the specified …","","","A draining iterator for <code>Vec&lt;T&gt;</code>.","An iterator which uses a closure to determine if an …","An iterator that moves out of a vector.","A splicing iterator for <code>Vec</code>.","A contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …","","","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","","","","","","","","","","","","Returns an unsafe mutable pointer to the vector’s …","Returns the remaining items of this iterator as a mutable …","Extracts a mutable slice of the entire vector.","","Returns a raw pointer to the vector’s buffer, or a …","","","","","Returns the remaining items of this iterator as a slice.","Returns the remaining items of this iterator as a slice.","Extracts a slice containing the entire vector.","","","","","","","","","","","","","","","","Returns the number of elements the vector can hold without …","Clears the vector, removing all values.","","","","","","","","","","","","Removes consecutive repeated elements in the vector …","Removes all but the first of consecutive elements in the …","Removes all but the first of consecutive elements in the …","Creates an empty <code>Vec&lt;T&gt;</code>.","","","","Removes the specified range from the vector in bulk, …","Creates an iterator which uses a closure to determine if …","","","","","","","","","","","","","","","","Clones and appends all elements in a slice to the <code>Vec</code>.","Copies elements from <code>src</code> range to the end of the vector.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert a boxed slice into a vector by transferring …","Converts the given <code>String</code> to a vector <code>Vec</code> that holds …","Converts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.","Returns the argument unchanged.","Converts a <code>CString</code> into a Vec&lt;u8&gt;.","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Turn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.","","Convert a clone-on-write slice into a vector.","Allocate a <code>Vec&lt;u8&gt;</code> and fill it with a UTF-8 string.","Allocate a <code>Vec&lt;T&gt;</code> and move <code>s</code>’s items into it.","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Returns the argument unchanged.","Returns the argument unchanged.","","Creates a <code>Vec&lt;T&gt;</code> directly from the raw components of …","Creates a <code>Vec&lt;T, A&gt;</code> directly from the raw components of …","","","","Inserts an element at position <code>index</code> within the vector, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the vector into <code>Box&lt;[T]&gt;</code>.","","Takes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.","","","Creates a consuming iterator, that is, one that moves each …","","","","","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","","","Returns <code>true</code> if the vector contains no elements.","","Consumes and leaks the <code>Vec</code>, returning a mutable reference …","","Returns the number of elements in the vector, also …","","","","","","","Constructs a new, empty <code>Vec&lt;T&gt;</code>.","Constructs a new, empty <code>Vec&lt;T, A&gt;</code>.","","","","","","","","","","Removes the last element from a vector and returns it, or …","Appends an element to the back of a collection.","Removes and returns the element at position <code>index</code> within …","Reserves capacity for at least <code>additional</code> more elements to …","Reserves the minimum capacity for at least <code>additional</code> more …","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate, …","","Forces the length of the vector to <code>new_len</code>.","Shrinks the capacity of the vector with a lower bound.","Shrinks the capacity of the vector as much as possible.","","","","","","Returns the remaining spare capacity of the vector as a …","Creates a splicing iterator that replaces the specified …","Returns vector content as a slice of <code>T</code>, along with the …","Splits the collection into two at the given index.","Removes an element from the vector and returns it.","","","","Shortens the vector, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve the minimum capacity for at least …","","","","","","","","Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …","Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …","","","",""],"i":[14,14,15,15,14,14,0,15,15,15,15,15,15,245,0,31,0,31,246,0,0,0,14,0,14,0,15,14,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,0,14,1,1,4,7,8,9,31,10,11,12,13,14,15,16,17,18,19,1,20,26,4,7,8,9,31,10,11,12,13,14,15,16,17,18,19,1,20,26,0,8,12,4,7,8,9,10,11,12,13,14,15,16,17,18,19,1,20,4,7,8,9,10,11,12,13,14,15,16,17,18,19,1,20,4,7,8,9,10,11,12,13,14,15,16,17,18,19,1,7,8,9,10,11,12,13,14,15,16,17,18,19,1,20,7,8,9,10,11,12,13,14,15,16,17,18,19,1,20,7,8,9,10,11,12,13,14,15,16,17,18,19,1,20,7,8,9,10,11,12,13,14,15,16,17,18,19,1,20,9,26,7,8,9,10,11,12,13,14,15,16,17,18,19,1,20,8,11,12,7,9,10,17,18,19,20,7,8,9,10,11,12,13,14,15,16,17,18,19,1,20,4,7,8,9,31,10,11,12,13,14,15,16,17,18,19,1,20,26,7,11,17,4,7,8,9,9,31,10,11,12,13,14,15,16,17,18,19,1,20,26,0,4,7,7,8,9,31,10,10,11,12,12,12,12,12,12,12,12,13,13,14,14,14,14,14,14,14,14,14,15,16,17,18,19,1,20,20,26,9,4,9,11,0,4,7,8,9,31,10,11,12,13,14,15,16,17,18,19,1,20,26,246,7,8,9,10,11,12,13,14,16,17,18,19,1,9,16,26,0,8,11,13,0,9,4,8,9,10,13,16,17,18,19,26,18,4,7,8,9,10,11,12,13,14,15,16,17,18,19,1,12,0,26,26,20,9,7,8,9,10,11,12,13,14,15,16,17,18,19,1,20,7,8,9,10,11,12,13,14,15,16,17,18,19,1,20,4,7,8,9,10,11,12,13,14,15,16,17,18,19,1,20,9,4,7,8,9,31,10,11,12,13,14,15,16,17,18,19,1,20,26,4,7,8,9,31,10,11,12,13,14,15,16,17,18,19,1,20,26,0,8,13,12,4,4,7,8,9,31,10,11,12,13,14,15,16,17,18,19,1,20,26,245,4,8,16,18,19,12,0,20,17,7,9,10,17,18,19,20,10,247,248,249,250,251,252,253,254,255,0,0,0,0,0,0,0,0,0,3,60,53,54,256,49,2,51,50,3,60,53,54,256,49,2,51,50,2,3,3,49,2,50,51,3,2,51,3,2,51,49,49,0,51,49,2,51,50,3,60,53,54,256,49,2,51,50,51,3,60,53,54,256,49,2,51,50,2,256,2,51,50,3,0,3,60,53,54,256,49,2,51,50,3,60,53,54,256,49,2,51,50,2,3,60,53,54,256,49,2,51,50,2,3,256,256,3,50,0,50,0,0,0,0,57,58,46,47,57,58,46,47,57,58,46,47,57,58,46,47,57,58,46,47,57,58,46,47,57,58,46,47,0,0,59,48,59,48,59,48,59,48,59,48,59,48,59,48,0,0,56,55,56,55,56,55,56,55,56,55,56,55,56,55,0,0,0,6,6,36,44,36,44,36,44,36,44,36,44,36,44,36,44,36,44,36,44,36,44,36,44,36,44,36,44,36,44,36,44,0,0,0,41,61,62,41,61,62,41,61,41,61,41,61,41,41,41,41,62,41,41,41,61,62,41,61,62,41,61,62,62,41,62,41,61,62,61,62,41,61,62,41,61,62,41,41,61,41,61,62,41,61,62,41,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,40,64,40,40,40,40,63,63,63,63,63,63,63,63,63,63,63,63,40,63,63,63,64,40,40,40,40,63,63,63,40,40,257,64,64,0,0,40,40,40,63,64,40,0,0,0,0,65,0,65,258,0,65,65,65,65,65,65,65,65,65,259,65,65,260,65,65,65,258,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,258,65,65,65,65,65,65,65,65,65,261,262,0,0,77,77,77,77,77,77,77,77,77,77,77,77,77,82,77,77,82,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,82,77,82,77,77,77,77,77,77,77,77,77,77,77,77,77,82,77,77,77,77,77,77,77,82,82,77,77,77,82,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,82,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,82,77,77,77,77,77,77,82,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,82,77,77,77,77,77,77,82,77,77,77,82,77,77,82,77,77,77,77,77,77,77,77,77,82,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,102,0,0,21,21,21,0,0,0,0,0,0,0,0,21,102,21,102,22,21,102,102,21,102,22,21,102,102,102,30,21,102,21,102,21,102,39,102,39,102,21,102,21,102,21,21,21,21,21,21,39,102,39,102,0,22,0,0,0,22,0,0,30,39,21,102,21,102,21,21,21,102,21,102,21,102,21,102,111,0,0,0,0,111,220,0,0,220,0,0,0,220,0,103,104,108,106,107,103,104,105,106,107,103,103,103,104,103,107,103,107,103,0,103,103,103,108,106,108,106,108,106,104,109,105,108,106,107,103,110,111,104,109,105,108,106,107,103,110,111,0,0,104,109,108,103,104,109,105,108,106,107,103,104,109,105,108,106,107,103,110,111,104,109,108,106,107,103,104,109,105,108,106,107,103,110,111,105,106,107,103,108,106,107,103,109,105,107,107,107,107,104,105,106,107,103,104,105,106,107,103,104,105,106,107,103,104,105,106,107,103,104,109,105,108,106,107,103,104,109,105,108,106,107,103,108,106,104,109,108,103,109,105,108,106,107,104,105,107,103,104,105,106,107,103,109,105,109,105,108,106,107,103,103,103,103,103,103,103,110,111,104,104,109,109,105,105,108,108,106,106,107,107,103,103,104,104,109,109,105,105,108,108,106,106,107,107,103,103,104,104,109,109,108,108,103,103,106,105,105,103,104,109,105,108,106,107,103,110,110,111,104,104,104,109,109,105,105,108,108,106,106,107,107,103,103,103,110,110,111,111,104,109,105,108,106,107,103,107,103,107,103,109,105,108,106,103,109,105,109,109,109,105,103,108,108,108,105,106,107,103,0,0,109,108,109,105,103,103,109,105,108,106,103,108,106,104,109,105,108,106,107,103,110,111,109,105,108,106,104,104,109,109,109,105,105,105,108,108,106,106,107,107,107,103,103,103,104,109,105,104,109,105,104,108,106,104,109,105,108,106,107,103,108,106,108,106,104,109,105,108,106,107,103,109,105,107,103,109,105,110,106,105,105,104,104,109,105,105,108,106,106,107,107,103,103,0,103,107,104,109,105,108,106,107,103,105,106,103,105,106,107,103,103,104,104,104,107,103,105,106,107,103,105,106,104,107,103,107,103,105,106,103,105,103,109,109,103,103,109,105,108,106,107,103,109,105,108,106,104,109,108,103,104,103,103,103,104,109,105,108,106,103,103,103,103,104,109,105,108,106,107,103,104,109,108,103,104,109,108,103,104,105,106,107,103,105,106,107,103,108,106,103,103,103,108,106,108,106,104,105,106,107,103,104,109,105,108,106,107,103,110,111,110,103,104,109,105,108,106,107,103,110,111,109,105,104,109,105,108,106,107,103,110,111,104,109,108,103,104,103,104,109,105,108,106,107,103,110,111,105,106,103,108,106,109,105,109,105,0,104,109,108,103,109,108,103,109,108,103,103,103,263,264,265,0,0,0,0,0,0,0,158,134,133,151,116,125,158,134,133,151,116,125,134,133,151,134,133,151,158,158,158,125,158,134,133,151,116,125,158,134,133,151,116,125,158,134,133,151,116,125,134,133,151,116,125,134,133,116,134,134,133,151,116,125,134,133,116,158,134,133,151,116,125,134,133,151,158,134,133,151,116,125,158,134,133,151,116,125,158,134,133,151,116,125,0,0,0,0,0,0,0,0,0,127,0,0,0,0,127,0,0,0,127,127,175,128,168,138,140,139,157,172,174,153,155,159,161,121,127,175,128,168,138,140,139,157,172,174,153,155,159,161,121,138,157,172,159,138,157,172,159,168,139,121,168,127,175,128,168,168,138,140,139,157,172,174,153,155,159,161,121,127,175,128,168,138,140,139,157,172,174,153,155,159,161,121,128,128,175,128,127,175,128,168,138,140,139,157,172,174,153,155,159,161,121,138,140,139,157,172,174,153,155,159,161,121,175,128,127,175,128,138,140,157,172,174,153,155,159,161,138,140,139,157,172,174,153,155,138,140,157,153,159,161,138,140,157,153,159,161,138,140,139,157,172,174,153,155,159,161,121,138,140,139,157,172,174,153,155,159,161,127,127,127,127,128,128,138,140,139,157,172,174,153,155,121,138,157,172,159,168,127,175,128,168,138,140,139,157,172,174,153,155,159,161,121,127,175,128,168,138,140,139,157,172,174,153,155,159,161,121,127,175,128,168,138,140,139,157,172,174,153,155,159,161,121,168,266,267,0,0,0,0,0,0,0,0,0,143,115,166,132,170,123,144,160,143,115,166,132,170,123,144,160,143,115,166,132,170,160,143,115,166,132,170,160,123,143,115,166,132,170,123,144,160,143,115,166,132,170,123,144,160,143,115,166,132,170,123,144,160,143,115,166,132,170,123,144,160,143,160,143,144,143,160,143,115,166,132,170,160,143,115,166,132,170,123,144,160,143,144,160,143,115,166,132,170,123,144,143,115,166,132,170,160,143,115,166,132,170,123,144,160,143,115,166,132,170,123,144,160,143,115,166,132,170,123,144,160,0,0,0,0,0,0,0,0,0,0,0,176,126,0,0,0,0,0,0,0,0,176,126,0,0,0,176,126,137,135,136,156,171,117,120,173,152,154,163,176,178,179,162,126,180,181,167,129,177,137,135,136,156,171,117,120,173,152,154,163,176,178,179,162,126,180,181,167,129,177,129,137,156,171,129,177,137,156,171,129,177,129,177,167,167,177,137,135,136,156,171,117,120,173,152,154,163,176,178,179,162,126,180,181,167,167,129,177,137,135,136,156,171,117,120,173,152,154,163,176,178,179,162,126,180,181,167,129,177,163,162,163,162,163,162,178,180,178,178,178,180,178,179,180,181,126,181,179,178,137,135,136,156,171,117,120,173,152,154,163,176,178,179,162,126,180,181,167,129,177,137,135,136,156,171,117,120,173,152,154,178,181,178,178,180,178,126,180,181,178,137,135,136,156,171,117,173,152,154,129,177,137,135,136,156,171,117,120,173,152,154,126,176,126,176,126,126,178,180,178,180,180,180,137,135,136,156,171,117,120,173,152,154,137,156,171,129,177,167,137,135,136,156,171,117,120,173,152,154,163,176,178,179,162,126,180,181,167,129,177,137,135,136,156,171,117,120,173,152,154,163,176,178,179,162,126,180,181,167,129,177,137,135,136,156,171,117,120,173,152,154,163,176,178,179,162,126,180,181,167,129,177,167,177,177,268,269,270,271,0,0,0,0,0,0,0,0,0,141,142,118,122,131,114,165,169,141,142,118,122,131,114,165,169,141,131,114,165,169,141,131,114,165,169,141,142,118,122,131,114,165,169,141,142,118,122,131,114,165,169,141,142,118,122,131,114,165,169,141,142,118,122,131,114,165,169,141,142,118,141,142,118,122,131,114,165,169,141,142,118,122,131,114,165,169,141,131,114,165,169,141,142,118,122,131,114,165,169,141,142,118,122,131,114,165,169,141,142,118,122,131,114,165,169,0,0,0,0,0,0,0,113,112,113,113,145,147,112,113,124,146,145,147,112,113,124,146,145,112,146,145,112,146,112,113,124,145,147,112,113,124,146,145,147,112,113,124,146,112,113,113,112,113,113,113,145,147,112,113,124,146,145,147,124,146,145,147,112,113,112,113,145,147,124,146,145,147,146,112,113,112,113,113,113,113,113,113,113,145,147,124,146,113,113,113,113,145,112,146,145,147,112,113,124,146,145,147,112,113,124,146,145,147,112,113,124,146,0,0,0,0,0,119,148,149,150,119,148,149,150,149,150,149,150,119,119,148,149,150,148,149,119,148,149,150,119,148,149,150,119,148,149,150,148,149,150,148,149,119,148,149,150,119,148,149,150,148,149,148,149,119,148,149,150,149,150,149,119,148,149,150,119,148,149,150,149,119,148,149,150,0,0,0,182,0,0,0,0,0,0,0,0,0,0,182,0,0,0,0,0,182,0,0,0,32,32,94,186,187,185,183,184,32,182,33,94,186,187,185,183,184,32,182,33,94,182,33,94,182,33,94,33,32,33,32,32,32,32,32,33,33,185,183,184,185,183,184,182,33,186,187,32,186,187,185,183,184,186,32,34,272,273,274,275,276,277,278,279,182,33,33,94,94,0,186,187,185,183,184,32,182,33,94,33,186,187,185,183,184,32,182,33,94,184,32,32,33,32,94,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,182,33,94,33,94,186,187,185,183,184,32,182,33,94,186,187,185,183,184,32,182,33,94,186,187,185,183,184,32,182,33,94,184,32,0,191,32,191,32,32,191,32,32,0,0,0,0,0,280,0,192,193,192,193,280,192,192,193,192,193,192,193,192,281,193,192,193,192,193,282,280,282,192,193,193,193,192,193,192,193,192,193,192,193,281,193,281,281,281,281,281,281,281,281,193,281,281,281,281,281,281,0,0,0,283,0,0,0,0,0,0,0,0,0,0,194,195,194,195,194,195,194,195,194,195,194,194,194,194,194,195,194,194,194,194,195,194,195,194,195,194,195,194,195,194,195,194,194,194,195,194,195,194,195,194,195,194,0,0,0,0,0,0,0,0,198,80,80,80,80,80,80,80,80,80,80,196,197,80,198,196,197,80,198,196,197,80,198,196,197,80,198,197,0,197,197,197,0,0,197,196,197,198,196,197,80,198,0,0,196,197,80,198,196,197,196,197,80,198,197,198,0,0,0,197,80,197,0,0,0,0,80,80,80,80,80,80,0,0,197,196,197,80,198,0,0,196,197,80,198,196,197,80,198,196,197,80,198,80,80,0,198,0,198,80,80,80,0,80,205,206,207,208,209,210,211,212,199,200,201,202,203,204,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,216,0,217,0,216,207,208,209,210,211,212,199,200,201,202,203,204,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,207,208,209,210,211,212,199,200,201,202,203,204,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,217,216,0,0,0,0,0,0,0,0,0,0,0,0,217,0,0,216,0,217,0,0,216,217,199,200,201,202,203,204,205,205,205,205,205,205,206,206,206,206,206,206,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,207,207,208,208,209,209,210,210,211,211,212,212,199,199,200,200,201,201,202,202,203,203,204,204,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,207,207,208,208,209,209,210,210,211,211,212,212,199,199,200,200,201,201,202,202,203,203,204,204,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,213,214,215,216,207,208,209,210,211,212,199,200,201,202,203,204,205,206,217,213,214,215,216,207,208,209,210,211,212,199,200,201,202,203,204,205,206,217,199,200,201,202,203,204,207,208,209,210,211,212,207,208,209,210,211,212,199,200,201,202,203,204,207,208,209,210,211,212,207,208,209,210,211,212,199,200,201,202,203,204,213,214,215,216,207,208,209,210,211,212,199,200,201,202,203,204,205,206,217,213,214,215,216,207,208,209,210,211,212,199,200,201,202,203,204,205,206,217,207,208,209,210,211,212,199,200,201,202,203,204,205,206,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,207,208,209,210,211,199,200,201,202,203,207,208,209,210,211,199,200,201,202,203,207,208,209,210,211,199,200,201,202,203,207,208,209,210,211,199,200,201,202,203,205,206,213,214,215,207,208,209,210,211,212,199,200,201,202,203,204,206,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,207,208,209,210,211,199,200,201,202,203,207,208,209,210,211,199,200,201,202,203,213,214,215,216,207,208,209,210,211,212,199,200,201,202,203,204,205,206,217,213,213,214,214,215,215,216,207,207,207,207,207,207,208,208,208,208,208,208,209,209,209,209,209,209,210,210,210,210,210,210,211,211,211,211,211,211,212,212,212,212,212,212,199,199,199,199,199,199,200,200,200,200,200,200,201,201,201,201,201,201,202,202,202,202,202,202,203,203,203,203,203,203,204,204,204,204,204,204,205,205,205,205,205,205,206,206,206,206,206,206,217,213,214,214,214,214,215,216,207,208,208,209,209,209,210,210,210,210,211,211,211,211,211,212,212,212,199,200,200,200,201,201,201,201,201,202,202,202,202,202,202,202,203,203,203,203,203,203,203,203,203,204,204,204,204,205,206,217,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,207,208,209,210,211,212,199,200,201,202,203,204,207,208,209,210,211,212,199,200,201,202,203,204,207,208,209,210,211,212,199,200,201,202,203,204,205,206,207,208,209,210,211,212,207,208,209,210,211,212,213,214,215,216,207,208,209,210,211,212,199,200,201,202,203,204,205,206,217,205,205,205,205,205,205,206,206,206,206,206,206,205,205,205,205,205,205,206,206,206,206,206,206,207,208,209,210,211,212,205,205,205,205,205,205,206,206,206,206,206,206,215,207,208,209,210,211,212,199,200,201,202,203,204,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,207,208,209,210,211,212,199,200,201,202,203,204,207,208,209,210,211,212,199,200,201,202,203,204,206,206,206,206,206,206,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,199,200,201,202,203,204,207,208,209,210,211,212,199,200,201,202,203,204,205,206,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,199,200,201,202,203,204,207,208,209,210,211,212,207,208,209,210,211,212,199,200,201,202,203,204,207,208,209,210,211,212,199,200,201,202,203,204,207,208,209,210,211,212,199,200,201,202,203,204,206,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,205,205,205,205,205,205,206,206,206,206,206,206,207,208,209,210,211,199,200,201,202,203,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,207,208,209,210,211,199,200,201,202,203,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,213,214,215,216,207,208,209,210,211,212,199,200,201,202,203,204,205,206,217,213,214,215,207,208,209,210,211,212,199,200,201,202,203,204,205,206,207,208,209,210,211,212,199,200,201,202,203,204,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,213,214,215,216,207,207,207,207,207,207,207,207,207,207,207,207,207,208,208,208,208,208,208,208,208,208,208,208,208,209,209,209,209,209,209,209,209,209,209,209,210,210,210,210,210,210,210,210,210,210,211,211,211,211,211,211,211,211,211,212,212,212,212,212,212,212,212,212,212,212,199,199,199,199,199,199,199,199,199,199,199,199,199,200,200,200,200,200,200,200,200,200,200,200,201,201,201,201,201,201,201,201,201,202,202,202,202,202,202,202,203,203,203,203,203,204,204,204,204,204,204,204,204,204,204,205,206,217,213,214,215,216,207,208,209,210,211,212,199,200,201,202,203,204,205,206,217,213,214,215,216,207,208,209,210,211,212,199,200,201,202,203,204,205,206,217,207,208,209,210,211,199,200,201,202,203,207,208,209,210,211,212,207,208,209,210,211,212,199,200,201,202,203,204,199,200,201,202,203,204,207,208,209,210,211,199,200,201,202,203,199,200,201,202,203,204,227,0,0,221,0,0,0,0,0,0,0,221,221,0,91,221,0,0,0,0,0,0,0,220,0,0,0,0,0,0,220,0,0,0,0,0,0,0,284,285,286,287,288,289,290,291,292,293,294,295,45,296,297,0,0,0,0,0,0,0,0,0,0,297,298,0,0,0,0,0,0,299,0,300,220,0,298,91,284,301,219,219,220,220,291,302,292,303,293,304,221,91,222,219,223,224,225,226,220,227,221,91,222,219,223,224,225,226,220,227,297,221,221,305,164,45,221,91,222,219,223,224,225,226,220,221,91,222,219,223,224,225,226,220,220,91,306,219,223,224,225,226,221,219,225,219,225,219,225,219,225,222,219,299,307,219,225,220,287,308,309,219,225,225,219,224,226,306,222,219,219,223,223,224,224,225,225,226,226,221,91,222,219,223,224,225,226,220,221,91,222,219,223,224,225,226,220,227,225,221,91,222,219,219,223,224,225,226,220,227,297,221,310,221,222,222,222,219,219,219,223,223,223,224,224,224,225,225,225,226,226,226,222,222,222,219,219,219,223,223,223,224,224,224,225,225,225,226,226,226,222,222,222,219,219,219,223,223,223,224,224,224,225,225,225,226,226,226,222,222,222,219,219,219,223,223,223,224,224,224,225,225,225,226,226,226,91,222,219,223,224,225,226,220,296,222,222,222,219,219,219,223,223,223,224,224,224,225,225,225,226,226,226,311,222,222,222,219,219,219,223,223,223,224,224,224,225,225,225,226,226,226,222,219,223,224,225,226,221,91,222,219,223,224,225,226,220,227,225,219,223,225,221,221,219,225,219,225,219,225,220,221,221,219,225,219,225,286,312,289,225,219,223,225,219,225,222,219,223,224,225,226,290,219,223,225,219,225,91,288,313,298,225,219,225,220,294,314,295,315,219,219,223,225,225,225,219,223,306,222,219,219,223,223,224,224,225,225,226,226,285,316,219,225,221,91,222,219,223,224,225,226,220,225,221,91,222,219,223,224,225,226,220,227,221,91,222,219,223,224,225,226,220,227,225,221,91,222,219,223,224,225,226,220,227,219,225,222,219,223,224,225,226,263,264,317,318,319,320,0,0,0,0,0,0,43,43,232,43,232,43,43,231,43,43,43,232,232,43,43,43,43,232,43,232,43,232,43,43,231,233,232,43,43,231,233,43,43,43,231,43,43,231,43,43,43,43,43,43,43,43,231,233,43,43,232,43,43,43,43,43,43,231,43,43,43,43,43,43,43,43,43,43,43,43,43,43,232,43,43,231,231,233,233,232,43,43,43,43,43,43,43,231,233,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,232,43,231,233,43,43,231,43,232,43,43,43,43,43,43,232,43,43,43,43,43,43,232,232,43,43,43,43,43,43,43,43,43,43,43,43,43,232,43,43,43,43,43,43,231,43,321,43,43,231,233,43,232,43,232,43,231,233,232,43,231,233,43,43,232,43,231,233,43,43,231,43,43,43,0,0,0,0,0,236,236,238,236,28,239,28,28,28,238,236,28,238,236,28,28,28,28,28,28,236,28,28,28,238,236,28,28,238,236,28,238,236,28,238,236,28,28,239,240,238,236,28,28,239,240,28,28,236,28,28,236,28,28,236,28,28,28,28,28,28,28,28,28,28,28,28,28,238,236,28,239,240,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,238,236,28,239,240,238,236,28,28,28,28,28,28,28,28,28,28,28,28,239,240,28,28,28,28,28,28,28,238,236,28,239,240,28,28,28,238,236,28,28,28,239,240,28,28,238,236,28,28,28,28,28,28,28,28,28,28,28,28,28,238,236,239,240,238,236,240,236,28,28,28,28,28,28,28,28,28,28,28,28,28,28,238,236,28,239,240,28,28,28,28,28,28,236,28,28,238,236,28,28,238,236,28,239,240,238,236,28,239,240,28,28,238,236,28,239,240,28,28,28,28,28,28,28,28],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],2],[[],3],[4,4],[[[7,[[0,[5,6]]]]],[[7,[[0,[5,6]]]]]],[[[8,[[0,[5,6]]]]],[[8,[[0,[5,6]]]]]],[[[9,[[0,[5,6]]]]],[[9,[[0,[5,6]]]]]],[[[10,[[0,[5,6]]]]],[[10,[[0,[5,6]]]]]],[[[11,[[0,[5,6]]]]],[[11,[[0,[5,6]]]]]],[[[12,[[0,[5,6]]]]],[[12,[[0,[5,6]]]]]],[[[13,[[0,[5,6]]]]],[[13,[[0,[5,6]]]]]],[[[14,[[0,[5,6]]]]],[[14,[[0,[5,6]]]]]],[15,15],[[[16,[[0,[5,6]]]]],[[16,[[0,[5,6]]]]]],[[[17,[[0,[5,6]]]]],[[17,[[0,[5,6]]]]]],[[[18,[[0,[5,6]]]]],[[18,[[0,[5,6]]]]]],[[[19,[[0,[5,6]]]]],[[19,[[0,[5,6]]]]]],[[[1,[[0,[5,6]]]]],[[1,[[0,[5,6]]]]]],[20,20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[4,4],21],[[[7,[[0,[22,6]]]],7],21],[[[8,[[0,[22,6]]]],8],21],[[[9,[[0,[22,6]]]],9],21],[[[10,[[0,[22,6]]]],10],21],[[[11,[[0,[22,6]]]],11],21],[[[12,[[0,[22,6]]]],12],21],[[[13,[[0,[22,6]]]],13],21],[[[14,[[0,[22,6]]]],14],21],[[15,15],21],[[[16,[[0,[22,6]]]],16],21],[[[17,[[0,[22,6]]]],17],21],[[[18,[[0,[22,6]]]],18],21],[[[19,[[0,[22,6]]]],19],21],[[[1,[[0,[22,6]]]],1],21],[[],[[24,[[7,[6]],23]]]],[[],[[24,[[8,[6]],23]]]],[[],[[24,[[9,[6]],23]]]],[[],[[24,[[10,[6]],23]]]],[[],[[24,[[11,[6]],23]]]],[[],[[24,[[12,[6]],23]]]],[[],[[24,[[13,[6]],23]]]],[[],[[24,[[14,[6]],23]]]],[[],[[24,[15,23]]]],[[],[[24,[[16,[6]],23]]]],[[],[[24,[[17,[6]],23]]]],[[],[[24,[[18,[6]],23]]]],[[],[[24,[[19,[6]],23]]]],[[],[[24,[[1,[6]],23]]]],[[],[[24,[20,23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[[],9],[[],26],[[],[[24,[[7,[6]]]]]],[[],[[24,[[8,[6]]]]]],[[],[[24,[[9,[6]]]]]],[[],[[24,[[10,[6]]]]]],[[],[[24,[[11,[6]]]]]],[[],[[24,[[12,[6]]]]]],[[],[[24,[[13,[6]]]]]],[[],[[24,[[14,[6]]]]]],[[],[[24,[15]]]],[[],[[24,[[16,[6]]]]]],[[],[[24,[[17,[6]]]]]],[[],[[24,[[18,[6]]]]]],[[],[[24,[[19,[6]]]]]],[[],[[24,[[1,[6]]]]]],[[],[[24,[20]]]],[8],[11],[12],[[[7,[6]]],[[28,[27]]]],[[[9,[6]]],[[28,[27]]]],[[[10,[6]]],[[28,[27]]]],[[[17,[6]]],[[28,[27]]]],[[[18,[6]]],[[28,[27]]]],[[[19,[6]]],[[28,[27]]]],[20,[[28,[27]]]],[[[7,[6]]]],[[[8,[6]]]],[[[9,[6]]]],[[[10,[6]]]],[[[11,[6]]]],[[[12,[6]]]],[[[13,[6]]]],[[[14,[6]]]],[15],[[[16,[6]]]],[[[17,[6]]]],[[[18,[6]]]],[[[19,[6]]]],[[[1,[6]]]],[20],[[4,4],29],[[[7,[[0,[30,6]]]],7],29],[[[8,[[0,[30,6]]]],8],29],[[[9,[[0,[30,6]]]],9],29],[[31,31],29],[[[10,[[0,[30,6]]]],10],29],[[[11,[[0,[30,6]]]],11],29],[[[12,[[0,[30,6]]]],12],29],[[[13,[[0,[30,6]]]],13],29],[[[14,[[0,[30,6]]]],14],29],[[15,15],29],[[[16,[[0,[30,6]]]],16],29],[[[17,[[0,[30,6]]]],17],29],[[[18,[[0,[30,6]]]],18],29],[[[19,[[0,[30,6]]]],19],29],[[[1,[[0,[30,6]]]],1],29],[[20,20],29],[[26,26],29],[7],[11],[17],[[4,32],[[24,[33]]]],[[[7,[[0,[34,6]]]],32],35],[[[8,[[0,[34,6]]]],32],35],[[[9,[[0,[34,6]]]],32],35],[[[9,[36]],32],[[24,[33]]]],[[31,32],35],[[[10,[[0,[34,6]]]],32],35],[[[11,[[0,[34,6]]]],32],35],[[[12,[[0,[34,6]]]],32],35],[[[13,[[0,[34,6]]]],32],35],[[[14,[[0,[34,6]]]],32],35],[[15,32],35],[[[16,[[0,[34,6]]]],32],35],[[[17,[[0,[34,6]]]],32],35],[[[18,[[0,[34,6]]]],32],35],[[[19,[[0,[34,6]]]],32],35],[[[1,[[0,[34,6]]]],32],35],[[20,32],35],[[26,32],35],0,[[]],[[]],[[[28,[[8,[6]]]]],[[7,[6]]]],[[]],[[]],[[]],[[]],[[[28,[[11,[6]]]]],[[10,[6]]]],[[]],[19,12],[[],[[12,[6]]]],[1,12],[15,12],[[]],[17,12],[16,12],[18,12],[[]],[[],[[13,[6]]]],[[[7,[6]]],[[14,[6]]]],[[[1,[6]]],[[14,[6]]]],[[]],[[[16,[6]]],[[14,[6]]]],[[[17,[6]]],[[14,[6]]]],[[[10,[6]]],[[14,[6]]]],[[[18,[6]]],[[14,[6]]]],[[[19,[6]]],[[14,[6]]]],[15,[[14,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[26,20],[[]],[[]],[[],[[24,[9,31]]]],[4],[9,37],[11,27],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[26],[[7,26]],[[8,26]],[[9,26]],[[10,26]],[[11,26]],[[12,26]],[[13,26]],[[14,26]],[[16,26]],[[17,26]],[[18,26]],[[19,26]],[[1,26]],[9,29],[16,25],[26,28],[[],4],[8,37],[11],[13],0,[9],[[],4],[[[37,[38]],4,[37,[38]]],8],[[38,38],9],[[],10],[37,13],[[25,4],16],[[],17],[4,18],[4,19],[[],26],[[],18],[[4,4],[[37,[21]]]],[[[7,[[0,[39,6]]]],7],[[37,[21]]]],[[[8,[[0,[39,6]]]],8],[[37,[21]]]],[[[9,[[0,[39,6]]]],9],[[37,[21]]]],[[[10,[[0,[39,6]]]],10],[[37,[21]]]],[[[11,[[0,[39,6]]]],11],[[37,[21]]]],[[[12,[[0,[39,6]]]],12],[[37,[21]]]],[[[13,[[0,[39,6]]]],13],[[37,[21]]]],[[[14,[[0,[39,6]]]],14],[[37,[21]]]],[[15,15],[[37,[21]]]],[[[16,[[0,[39,6]]]],16],[[37,[21]]]],[[[17,[[0,[39,6]]]],17],[[37,[21]]]],[[[18,[[0,[39,6]]]],18],[[37,[21]]]],[[[19,[[0,[39,6]]]],19],[[37,[21]]]],[[[1,[[0,[39,6]]]],1],[[37,[21]]]],[12,9],0,[[26,4],[[41,[40]]]],[26,[[28,[[41,[40]]]]]],[[20,25],[[37,[12]]]],[9],[[[7,[6]]],24],[[[8,[6]]],24],[[[9,[6]]],24],[[[10,[6]]],24],[[[11,[6]]],24],[[[12,[6]]],24],[[[13,[6]]],24],[[[14,[6]]],24],[15,24],[[[16,[6]]],24],[[[17,[6]]],24],[[[18,[6]]],24],[[[19,[6]]],24],[[[1,[6]]],24],[20,24],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],43],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],0,[8],[13,37],[12,14],[[],40],[4,40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],12],[4,[[12,[44]]]],[8,37],[16],[18],[19],[12],0,[20],[[],17],[[[7,[6]],45]],[[[9,[6]],45]],[[[10,[6]],45]],[[[17,[6]],45]],[[[18,[6]],45]],[[[19,[6]],45]],[[20,45]],[10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[46]]],[[2,[47]]]],[[[3,[48]],49],12],[[],3],[[],49],[[],2],[[],50],[[51,52],51],[3,3],[2,2],[51,51],[3,3],[2,2],[51,51],[[[49,[53]]],[[49,[53]]]],[[[49,[54]]],[[49,[54]]]],0,[[51,49],51],[49,[[28,[[8,[44]]]]]],[[[2,[47]]],[[8,[44]]]],[[[51,[55]]],[[11,[44]]]],[50,10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[51,[56]],27],[[51,[55]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[57]],38],[[2,[58]]]],[[],[[49,[53]]]],[[],2],[38,[[51,[56]]]],[[],50],[[[3,[59]],9],[[3,[48]]]],0,[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[[2,[46]]],[[2,[47]]]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[2,38],2],[3,3],[[],[[49,[60]]]],[[],[[49,[54]]]],[[[3,[48]],50],12],[[50,38],50],0,[[50,38,27],50],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],40],[[],40],[[],40],[[],40],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],40],[[],40],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],40],[[],40],0,0,0,0,0,[[]],[[]],[[]],[[]],[36,36],[44,44],[[]],[[]],[[36,36],21],[[44,44],21],[[36,36],29],[[44,44],29],[[36,32],35],[[44,32],35],[[]],[[]],[[]],[[]],[[36,36],[[37,[21]]]],[[44,44],[[37,[21]]]],[36,24],[44,24],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],40],[[],40],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[41,[5]]],[[41,[5]]]],[[[61,[5]]],[[61,[5]]]],[[]],[[]],[[[41,[22]],41],21],[[[61,[22]],61],21],[[],[[24,[41,23]]]],[[],[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[[],[[62,[22]]]],[[],[[24,[41]]]],[41],[[[41,[30]],41],29],[[[61,[30]],61],29],[[[62,[30]],62],29],[[[41,[34]],32],35],[[[61,[34]],32],35],[[[62,[34]],32],35],[[]],[[]],[[]],[62,[[37,[61]]]],[41,25],[62],[[]],[[]],[[]],[61,41],[[],62],[[[41,[39]],41],[[37,[21]]]],[[[61,[39]],61],[[37,[21]]]],[[62,61],37],[41,24],[61,24],[62,24],[[],[[28,[27,42]]]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],40],[[],40],[[],40],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[40,40],[[]],[[40,40],21],[63,37],[63,37],[63,37],[63],[63],[63],[63,37],[63,37],[63,37],[63],[63],[63],[[40,40],29],[[63,32],[[24,[33]]]],[[63,32],[[24,[33]]]],[[63,32],[[24,[33]]]],[[64,32],[[24,[33]]]],[[40,32],[[24,[33]]]],[[]],[40],[[]],[63,29],[63,29],[63,29],[[],40],[[40,40],[[37,[21]]]],[64],[64,64],[[64,45],64],[[],37],[[],37],[[]],[[],24],[[],24],[[],40],[[],40],[[],40],[[],38],[[],38],0,0,0,0,0,0,0,[[[65,[38]],38]],[[[65,[38]],[65,[38]]]],[[[65,[38]],[65,[38]]]],[[[65,[38]],38]],[[],66],[[]],[[[65,[67]]],68],[65],[[],[[24,[69]]]],[[]],[65],[[]],[[]],[[]],[65,65],[[65,65]],[[]],[[]],[[65,65],21],[[],[[24,[65,23]]]],[[],[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[[],65],[65],[[],[[24,[65]]]],[[],[[28,[27,42]]]],[[]],[[[65,[38]],38],29],[[[65,[38]],38],29],[[[65,[68]],68],29],[[[65,[68]],67],29],[[65,28],29],[65,29],[[[65,[67]],67],29],[[[65,[68]],68],29],[[[65,[68]],67],29],[[[65,[68]],70],29],[[[65,[68]],71],29],[[[65,[67]],67],29],[65,29],[[[65,[67]],70],29],[[[65,[67]],68],29],[[[65,[67]],71],29],[[[65,[38]],43],29],[[[65,[67]],68],29],[[65,65],29],[[65,32],[[24,[33]]]],[[65,32],[[24,[33]]]],[28,65],[43,[[65,[38]]]],[72,[[65,[73]]]],[68,[[65,[68]]]],[67,[[65,[67]]]],[72,[[65,[73]]]],[[]],[38,[[65,[38]]]],[73,[[65,[73]]]],[[],65],[[[28,[42]]],65],[71,[[65,[67]]]],[71,[[65,[67]]]],[70,[[65,[68]]]],[43,[[65,[38]]]],[70,[[65,[68]]]],[[],65],[[],[[65,[38]]]],[[],[[65,[38]]]],[[],[[65,[38]]]],[65],[[]],[[[65,[38]]],74],[65],[65,29],[65,29],[[65,28],29],[[[65,[38]],38],29],[65,29],[[[65,[38]],38],29],[65,29],[[[65,[38]],43],29],[[[65,[68]],71],[[37,[21]]]],[[[65,[68]],68],[[37,[21]]]],[[[65,[67]],68],[[37,[21]]]],[[[65,[67]],71],[[37,[21]]]],[[[65,[67]],67],[[37,[21]]]],[[[65,[67]],67],[[37,[21]]]],[[[65,[68]],70],[[37,[21]]]],[[[65,[68]],68],[[37,[21]]]],[[65,65],[[37,[21]]]],[[[65,[68]],67],[[37,[21]]]],[[[65,[67]],70],[[37,[21]]]],[[[65,[68]],67],[[37,[21]]]],[[[65,[67]],68],[[37,[21]]]],[65,24],[[],75],[[],[[28,[27,42]]]],[65],[[]],[[]],[[],43],[[[65,[38]]],43],[[],[[24,[66,76]]]],[[],24],[[],24],[[],40],[[],12],[[]],0,0,0,0,[77],[[],66],[[]],[[[77,[42]]],78],[77],[[],66],[[]],[[],[[24,[69]]]],[[[77,[42]]],79],[77],[[],[[24,[69]]]],[77,77],[[[77,[80]]],77],[[]],[77],[[]],[[]],[[]],[77],[77],[77],[77],[[[77,[42]]],[[37,[81]]]],[[[77,[38,42]]],[[77,[38,42]]]],[[[77,[68,42]]],[[77,[68,42]]]],[77,77],[[[77,[73,42]]],[[77,[73,42]]]],[77,77],[[[77,[67,42]]],[[77,[67,42]]]],[[77,77]],[[77,77]],[[]],[[77,77],21],[[[77,[42]],75]],[[],[[24,[23]]]],[[],[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[[],[[77,[73,42]]]],[[],[[77,[67,42]]]],[[],[[77,[42]]]],[[],[[77,[38,42]]]],[[],[[77,[42]]]],[82],[77],[82],[77],[[[77,[42]]],38],[[],[[24,[[77,[38,42]]]]]],[[],[[24,[[77,[68,42]]]]]],[[],[[24,[[77,[42]]]]]],[[],[[24,[[77,[73,42]]]]]],[[],[[24,[[77,[42]]]]]],[[[77,[63]]],[[24,[77,[77,[63]]]]]],[[[77,[63]]],[[24,[77,[77,[63]]]]]],[[[77,[63]]],[[24,[77,[77,[63]]]]]],[[[77,[63]]],77],[[[77,[63]]],77],[[[77,[63]]],77],[82],[77],[[],[[28,[27,42]]]],[[]],[[77,77],29],[[[77,[42]]],[[24,[83]]]],[77,52],[[[77,[42]]],[[24,[83]]]],[[82,32],[[24,[33]]]],[[82,32],[[24,[33]]]],[[77,32],[[24,[33]]]],[[77,32],[[24,[33]]]],[[77,32],[[24,[33]]]],[[]],[[],[[77,[81,42]]]],[72,[[77,[73,42]]]],[[]],[67,[[77,[67,42]]]],[[[65,[38]]],[[77,[81,42]]]],[43,[[77,[38,42]]]],[[],[[77,[42]]]],[43,[[77,[81,42]]]],[38,[[77,[81,42]]]],[28,77],[65,[[77,[42]]]],[[[65,[38]]],[[77,[38,42]]]],[[],[[77,[42]]]],[[[77,[38]]],77],[73,[[77,[73,42]]]],[84],[[],[[77,[81,42]]]],[[],[[77,[42]]]],[38,[[77,[38,42]]]],[[[65,[68]]],[[77,[68,42]]]],[[[65,[73]]],[[77,[73,42]]]],[68,[[77,[68,42]]]],[70,[[77,[68,42]]]],[85,[[77,[42]]]],[[[65,[67]]],[[77,[67,42]]]],[[[65,[38]]],[[77,[81,42]]]],[71,[[77,[67,42]]]],[38,[[77,[81,42]]]],[43,[[77,[81,42]]]],[[],[[77,[42]]]],[[],[[77,[42]]]],[[],77],[[77,77],29],[[77,77],29],[77],[[]],[[]],[77,77],[[]],[77],[[]],[77,[[86,[77]]]],[77],[77],[38,87],[38,29],[77,29],[38,29],[[[77,[42]]],29],[38,29],[[[77,[42]]],29],[77,37],[[77,77],29],[77],[77,75],[[77,77],29],[[77,77],29],[[],82],[[],[[77,[42]]]],[[],77],[[],[[77,[80,42]]]],[[],[[77,[80]]]],[75,[[77,[42]]]],[75,77],[[],82],[[],[[77,[80,42]]]],[[],[[77,[80]]]],[75,[[77,[42]]]],[75,77],[77,37],[77,37],[[77,75],37],[[77,75],37],[[77,77],[[37,[21]]]],[[],[[86,[[77,[42]]]]]],[[],[[86,[77]]]],[[[86,[77]],88],89],[[[86,[77]],88],[[89,[37]]]],[[[77,[42]]],[[24,[75,83]]]],[[[77,[42]],90],[[24,[83]]]],[[[77,[42]]],[[24,[83]]]],[[[77,[42]],43],[[24,[75,83]]]],[[[77,[42]],28],[[24,[75,83]]]],[[[77,[42]],43],[[24,[75,83]]]],[[[77,[42]],27,28],[[24,[75,83]]]],[[[77,[42]]],[[24,[75,83]]]],[[[86,[77]]],91],[[[77,[42]],92],[[24,[52,83]]]],[[[77,[42]]],24],[[],75],[[[77,[42]]]],[77],[82,[[37,[81]]]],[[[77,[42]]],[[37,[81]]]],[[[77,[42]]],[[24,[52,83]]]],[38,[[37,[38]]]],[38,[[37,[38]]]],[[],[[28,[27,42]]]],[[]],[[],43],[[],43],[[],[[24,[66,76]]]],[[],[[24,[66,76]]]],[[],24],[[],24],[[[77,[42]]],[[24,[[77,[42]]]]]],[[],24],[[],24],[[],[[24,[[77,[42]],93]]]],[[],[[24,[77,93]]]],[[],[[24,[[77,[80,42]],93]]]],[[],[[24,[[77,[80]],93]]]],[75,[[24,[[77,[42]],93]]]],[[],[[24,[[77,[80,42]],93]]]],[[],[[24,[[77,[80]],93]]]],[75,[[24,[[77,[42]],93]]]],[[],40],[[],40],[[],12],[[]],[[[77,[42]]],[[24,[75,83]]]],[[]],[[[77,[80]]],77],[77],[[[77,[42]]],[[24,[83]]]],[[[77,[42]],94],[[24,[83]]]],[[77,95]],[[77,96]],[[77,79]],[[77,97]],[[77,98]],[[77,99]],[[77,75]],[[77,38]],[[77,100]],[[77,101]],[[77,25]],[[77,52]],[[77,27]],[[77,75]],[[[77,[42]]],[[24,[75,83]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[21,21],[102,102],[[102,102]],[[]],[[]],[[],21],[[21,21],21],[[102,102],21],[[],102],[[],[[24,[102]]]],[[],29],[[21,21],29],[[102,102],29],[[21,32],[[24,[33]]]],[[102,32],[[24,[33]]]],[[]],[[]],[[],29],[[102,102],29],[[],29],[[102,102],29],[21],[102],[[]],[[]],[21,29],[21,29],[21,29],[21,29],[21,29],[21,29],[[],29],[[102,102],29],[[],29],[[102,102],29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],29],[[],[[37,[21]]]],[[21,21],[[37,[21]]]],[[102,102],[[37,[21]]]],[21,21],[102,24],[[21,21],21],[21,21],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],40],[[],40],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[103],[[]],[[]],[[]],[[]],[[]],[[104,104]],[[105,105]],[[106,106]],[[107,107]],[[103,103]],[[[28,[27,42]]],[[24,[[28,[27,42]],23]]]],[103],[104],[103],[107,37],[103,37],[107,37],[103,37],0,[103,[[24,[75,75]]]],[103,[[24,[75,75]]]],[103,[[24,[75,75]]]],[[108,108],108],[[106,106],106],[[108,108],108],[[106,106],106],[[108,108],108],[[106,106],106],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[104,75],[109,75],[108,75],[103,75],[104],[109],[105],[108],[106],[107],[103],[104,104],[109,109],[105,105],[108,108],[106,106],[107,107],[103,103],[110,110],[111,111],[[104,104]],[[109,109]],[[108,108]],[[106,106]],[[107,107]],[[103,103]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[105,105],21],[[106,106],21],[[107,107],21],[[103,103],21],[108,29],[106,29],[107,29],[103,29],[109,29],[105,29],[107,112],[107,113],[107,112],[107,113],[[],[[24,[104,23]]]],[[],[[24,[[105,[42]],23]]]],[[],[[24,[[106,[42]],23]]]],[[],[[24,[107,23]]]],[[],[[24,[[103,[42]],23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[[],104],[[],109],[[],[[105,[42]]]],[[],108],[[],[[106,[42]]]],[[],107],[[],[[103,[42]]]],[[],[[24,[104]]]],[[],[[24,[109]]]],[[],[[24,[[105,[42]]]]]],[[],[[24,[108]]]],[[],[[24,[[106,[42]]]]]],[[],[[24,[107]]]],[[],[[24,[[103,[42]]]]]],[[108,108],114],[[106,106],115],[104,116],[109,117],[108,118],[103,119],[109,120],[105,121],[108,122],[106,123],[107,124],[104,125],[105],[107],[103],[104],[[[105,[42]]]],[[[106,[42]]]],[107],[[[103,[42]]]],[109,126],[105,127],[[109,109],29],[[105,105],29],[[108,108],29],[[106,106],29],[[107,107],29],[103,29],[[103,103],29],[[103,28],29],[103,29],[103,29],[103,29],[103,29],[[110,110],29],[[111,111],29],[104],[104],[109],[109],[105],[105],[108],[108],[106],[106],[107],[107],[103],[103],[104],[104],[109],[109],[105],[105],[108],[108],[106],[106],[107],[107],[103],[103],[[104,75]],[[104,75]],[[109,75]],[[109,75]],[[108,75]],[[108,75]],[[103,75]],[[103,75]],[106,37],[105,[[37,[128]]]],[105,37],[[[103,[27]]],[[24,[83]]]],[[104,32],[[24,[33]]]],[[109,32],[[24,[33]]]],[[105,32],[[24,[33]]]],[[108,32],[[24,[33]]]],[[106,32],[[24,[33]]]],[[107,32],[[24,[33]]]],[[103,32],[[24,[33]]]],[[110,32],[[24,[33]]]],[[110,32],[[24,[33]]]],[[111,32],[[24,[33]]]],[[],104],[[[28,[42]]],104],[[]],[[],[[109,[129]]]],[[]],[[]],[[],[[105,[42]]]],[[]],[[],[[108,[129]]]],[[]],[[],[[106,[42]]]],[[],107],[[]],[[],[[103,[42]]]],[28,103],[[]],[111,110],[[]],[130,111],[[]],[[],104],[[],109],[[],[[105,[42]]]],[[],108],[[],[[106,[42]]]],[[],107],[[],[[103,[42]]]],[107,37],[103,37],[107,37],[103,37],[109,37],[105,37],[108,37],[106,37],[[103,75],37],[109,37],[105,37],[109,37],[109,37],[109,37],[105,37],[[103,75],37],[108],[108],[108],[105],[106],[107],[103],0,0,[109],[108],[109],[105],[[103,75]],[[103,75]],[109,37],[105,37],[108,29],[106,29],[[103,75]],[[108,108],131],[[106,106],132],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[109],[[[105,[42]]]],[108],[[[106,[42]]]],[104,133],[104,134],[109,135],[109,136],[109,137],[105,138],[105,139],[105,140],[108,141],[108,142],[106,143],[106,144],[107,145],[107,146],[107,147],[103,148],[103,149],[103,150],[104,151],[109,152],[105,153],[104,[[28,[42]]]],[109,154],[105,155],[104,[[28,[42]]]],[[108,108],29],[[106,106],29],[104,29],[109,29],[105,29],[108,29],[106,29],[107,29],[103,29],[[108,108],29],[[106,106],29],[[108,108],29],[[106,106],29],[104,134],[109,137],[105,138],[108,141],[106,143],[107,145],[103,149],[109,135],[105,140],[107,147],[103,148],[109,156],[105,157],[110,111],[106,37],[105,[[37,[128]]]],[105,37],[104,75],[[],[[24,[75,23]]]],[109,75],[105,75],[[],[[24,[75,23]]]],[108,75],[[],[[24,[75,23]]]],[106,75],[107,75],[[],[[24,[75,23]]]],[[],[[24,[75,23]]]],[103,75],0,[103],[[107,107],29],[[],104],[[],[[109,[129]]]],[[],[[105,[42]]]],[[],[[108,[129]]]],[[],[[106,[42]]]],[[],107],[[],[[103,[42]]]],[[],105],[[],106],[[],103],[[105,105],[[37,[21]]]],[[106,106],[[37,[21]]]],[[107,107],[[37,[21]]]],[[103,103],[[37,[21]]]],[103,75],[104,37],[104,[[37,[158]]]],[104,37],[107,37],[103,37],[105,37],[106,37],[107,37],[103,37],[105,37],[106,37],[104],[107],[103],[107],[103],[105,159],[106,160],[103,149],[105,161],[103,148],[109,162],[109,163],[[[103,[27]]],[[24,[75,83]]]],[[[103,[27]],90],[[24,[83]]]],[109,37],[105,37],[108,29],[106,29],[[107,75]],[[103,75],37],[109,37],[105,37],[108,37],[106,37],[[104,75]],[[109,75]],[[108,75]],[[103,75]],[[104,75]],[[103,75]],[[103,75]],[[103,75,164]],[104],[109],[105],[108],[106],[103],[103],[[103,75]],[[103,75]],[104,24],[109,24],[[[105,[42]]],24],[108,24],[[[106,[42]]],24],[107,24],[[[103,[42]]],24],[[104,75]],[[109,75]],[[108,75]],[[103,75]],[104],[109],[108],[103],[104,75],[[[105,[42]]],75],[[[106,[42]]],75],[107,75],[[[103,[42]]],75],[105,105],[106,106],[[107,75],107],[[103,75],103],[[108,108],108],[[106,106],106],[[103,75,75]],[[103,75],37],[[103,75],37],[[108,108],165],[[106,106],166],[108,37],[106,37],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],43],[[103,75]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[109,[[24,[167]]]],[105,[[24,[168]]]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[104,75],[[24,[110]]]],[[109,75],[[24,[110]]]],[[108,75],[[24,[110]]]],[[103,75],[[24,[110]]]],[[104,75],[[24,[110]]]],[[103,75],[[24,[110]]]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],12],[[],12],[[],12],[[108,108],169],[[106,106],170],[109,171],[105,172],[109,173],[105,174],0,[75,104],[75,[[109,[129]]]],[75,[[108,[129]]]],[75,[[103,[42]]]],[75,109],[75,108],[75,103],[[],109],[[],108],[[[103,[27]]],[[24,[75,83]]]],[[]],[[[103,[27]]],[[24,[83]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[134,134],[133,133],[151,151],[[]],[[]],[[]],[158],[158],[158],[125],[[158,32],[[24,[33]]]],[[134,32],[[24,[33]]]],[[133,32],[[24,[33]]]],[[151,32],[[24,[33]]]],[[116,32],[[24,[33]]]],[[125,32],[[24,[33]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[134,29],[133,29],[116,29],[134,37],[134,37],[133,37],[151,37],[116,37],[125,37],[134,37],[133,37],[116,37],[158],[134],[133],[151],[116],[125],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[127,127],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[138,138],[157,157],[172,172],[159,159],[[]],[[]],[[]],[[]],[[[168,[42]]],38],[139],[121],0,[[127,32],[[24,[33]]]],[[175,32],[[24,[33]]]],[[128,32],[[24,[33]]]],[[168,32],[[24,[33]]]],[[168,32],[[24,[33]]]],[[138,32],[[24,[33]]]],[[140,32],[[24,[33]]]],[[139,32],[[24,[33]]]],[[157,32],[[24,[33]]]],[[172,32],[[24,[33]]]],[[174,32],[[24,[33]]]],[[153,32],[[24,[33]]]],[[155,32],[[24,[33]]]],[[159,32],[[24,[33]]]],[[161,32],[[24,[33]]]],[[[121,[42]],32],[[24,[33]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[128],[128],[175],[128],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[175],[128],[127],[175],[128],[138,37],[140,37],[157,37],[172,37],[174,37],[153,37],[155,37],[159,37],[161,37],[138,75],[140,75],[139,75],[157,75],[172,75],[174,75],[153,75],[155,75],[138,37],[140,37],[157,37],[153,37],[159,37],[161,37],[138,37],[140,37],[157,37],[153,37],[159,37],[161,37],[138,37],[140,37],[139,37],[157,37],[172,37],[174,37],[153,37],[155,37],[159,37],[161,37],[121,37],[138,37],[140,37],[139,37],[157,37],[172,37],[174,37],[153,37],[155,37],[159,37],[161,37],[127],[127],[127],[127],[128],[128],[138],[140],[139],[157],[172],[174],[153],[155],[121],[[]],[[]],[[]],[[]],[[],43],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[143,143],[115,115],[166,166],[132,132],[170,170],[160,160],[[]],[[]],[[]],[[]],[[]],[[]],[123],[[143,32],[[24,[33]]]],[[115,32],[[24,[33]]]],[[166,32],[[24,[33]]]],[[132,32],[[24,[33]]]],[[170,32],[[24,[33]]]],[[123,32],[[24,[33]]]],[[144,32],[[24,[33]]]],[[160,32],[[24,[33]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[143,37],[160,37],[143,75],[144,75],[143,37],[160,37],[143,37],[115,37],[166,37],[132,37],[170,37],[160,37],[143,37],[115,37],[166,37],[132,37],[170,37],[123,37],[144,37],[160,37],[143,37],[144,37],[160,37],[143],[115],[166],[132],[170],[123],[144],[[]],[[]],[[]],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[176,176],[126,126],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[129,177],[137,137],[156,156],[171,171],[129,129],[177,177],[[]],[[]],[[]],[[]],[[]],[[],129],[[],177],[167,38],0,[177,52],[[137,32],[[24,[33]]]],[[135,32],[[24,[33]]]],[[136,32],[[24,[33]]]],[[156,32],[[24,[33]]]],[[171,32],[[24,[33]]]],[[117,32],[[24,[33]]]],[[120,32],[[24,[33]]]],[[173,32],[[24,[33]]]],[[152,32],[[24,[33]]]],[[154,32],[[24,[33]]]],[[163,32],[[24,[33]]]],[[176,32],[[24,[33]]]],[[178,32],[[24,[33]]]],[[179,32],[[24,[33]]]],[[162,32],[[24,[33]]]],[[126,32],[[24,[33]]]],[[180,32],[[24,[33]]]],[[181,32],[[24,[33]]]],[[167,32],[[24,[33]]]],[[167,32],[[24,[33]]]],[[129,32],[[24,[33]]]],[[177,32],[[24,[33]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[163,52],176],[[162,52],37],[163,176],[162,37],[[163,52],176],[[162,52],37],[178],[180],[178],[178],[178],[180],[178],[179],[180],[181],[126,180],[181,180],[[179,52]],[178],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[178],[181],[178],[178],[180],[178],[126],[180],[181],[178],[137,75],[135,75],[136,75],[156,75],[171,75],[117,75],[173,75],[152,75],[154,75],[[],129],[[],177],[137,37],[135,37],[136,37],[156,37],[171,37],[117,37],[120,37],[173,37],[152,37],[154,37],[126],[176],[126],[176],[126],[126],[178],[180],[178],[180],[180],[180],[137],[135],[136],[156],[171],[117],[120],[173],[152],[154],[[]],[[]],[[]],[[]],[[]],[[],43],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],0,[177],[[177,38]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[141,141],[131,131],[114,114],[165,165],[169,169],[[]],[[]],[[]],[[]],[[]],[[141,32],[[24,[33]]]],[[142,32],[[24,[33]]]],[[118,32],[[24,[33]]]],[[122,32],[[24,[33]]]],[[131,32],[[24,[33]]]],[[114,32],[[24,[33]]]],[[165,32],[[24,[33]]]],[[169,32],[[24,[33]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[141,75],[142,75],[118,75],[141,37],[142,37],[118,37],[122,37],[131,37],[114,37],[165,37],[169,37],[141],[142],[118],[122],[131],[114],[165],[169],[[]],[[]],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],0,0,0,0,0,0,0,[113,112],[112,37],[113,37],[113,37],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[145,145],[112,112],[146,146],[[]],[[]],[[]],[112,37],[113,37],[124],[[145,32],[[24,[33]]]],[[147,32],[[24,[33]]]],[[112,32],[[24,[33]]]],[[113,32],[[24,[33]]]],[[124,32],[[24,[33]]]],[[146,32],[[24,[33]]]],[[]],[[]],[[]],[[]],[[]],[[]],[112,37],[113,37],[113,37],[112,[[37,[75]]]],[113,[[37,[75]]]],[113],[113],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[145,37],[147,37],[112],[113],[112],[113],[145,37],[147,37],[124,37],[146,37],[145,37],[147,37],[146,37],[112,37],[113,37],[112,37],[113,37],[113,37],[113,37],[113],[113],[113,37],[113,[[37,[107]]]],[145],[147],[124],[146],[[113,107]],[[113,107]],[113,107],[113,107],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[149,149],[150,150],[[]],[[]],[119],[[119,32],[[24,[33]]]],[[148,32],[[24,[33]]]],[[149,32],[[24,[33]]]],[[150,32],[[24,[33]]]],[148],[149],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[148,29],[149,29],[150,29],[148,37],[149,37],[119,37],[148,37],[149,37],[150,37],[119,37],[148,37],[149,37],[150,37],[[148,75],37],[[149,75],37],[148],[149],[119],[148],[149],[150],[[]],[[]],[149],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[149],[[],40],[[],40],[[],40],[[],40],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[32,[[37,[182]]]],[32,29],[94,[[37,[38]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[182,182],[33,33],[94,94],[[]],[[]],[[]],[[33,33],21],[32,[[24,[33]]]],[[],33],[32,183],[32,184],[32,185],[[32,38],186],[[32,38],187],[[],33],[33,38],[185,185],[183,183],[184,184],[[185,34],185],[[183,34],183],[[184,34,34],184],[[182,182],29],[[33,33],29],[[186,38,34],186],[[187,34],187],[32,188],[186,[[24,[33]]]],[187,[[24,[33]]]],[185,[[24,[33]]]],[183,[[24,[33]]]],[184,[[24,[33]]]],[186,[[24,[33]]]],[32,25],[32,[[24,[33]]]],[32,[[24,[33]]]],[32,[[24,[33]]]],[32,[[24,[33]]]],[32,[[24,[33]]]],[32,[[24,[33]]]],[32,[[24,[33]]]],[32,[[24,[33]]]],[32,[[24,[33]]]],[[182,32],[[24,[33]]]],[[33,32],[[24,[33]]]],[[33,32],[[24,[33]]]],[[94,32],[[24,[33]]]],[[94,32],[[24,[33]]]],[94,43],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[33],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[184,34],184],[[32,38],[[24,[33]]]],[[32,29,38,38],[[24,[33]]]],[[33,33],[[37,[21]]]],[32,[[37,[75]]]],[94,24],[[32,29],[[24,[33]]]],[32,[[24,[33]]]],[[32,188],[[24,[33]]]],[[32,189],[[24,[33]]]],[[32,190],[[24,[33]]]],[[32,95],[[24,[33]]]],[[32,96],[[24,[33]]]],[[32,79],[[24,[33]]]],[[32,97],[[24,[33]]]],[[32,98],[[24,[33]]]],[[32,[37,[75]]],[[24,[33]]]],[[32,38],[[24,[33]]]],[[32,38,25,38],[[24,[33]]]],[32,[[24,[33]]]],[[32,[37,[75]]],[[24,[33]]]],[32,[[24,[33]]]],[[32,38],[[24,[33]]]],[[32,38,75],[[24,[33]]]],[[32,38,25,38,75],[[24,[33]]]],[[32,75],[[24,[33]]]],[[32,38,75],[[24,[33]]]],[[32,38,25,38,75],[[24,[33]]]],[[32,100],[[24,[33]]]],[[32,101],[[24,[33]]]],[[32,25],[[24,[33]]]],[[32,52],[[24,[33]]]],[[32,27],[[24,[33]]]],[32,[[24,[33]]]],[[32,38],[[24,[33]]]],[[32,38,25,38],[[24,[33]]]],[32,29],[32,29],[32,29],[[]],[[]],[[]],[[],43],[[],43],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[184,34],184],[32,[[37,[75]]]],[[191,94],[[24,[33]]]],[188,[[24,[33]]]],[[32,188],[[24,[33]]]],[94,[[24,[33]]]],[[32,94],[[24,[33]]]],[[32,94],[[24,[33]]]],[38,[[24,[33]]]],[[32,38],[[24,[33]]]],[[32,38],[[24,[33]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[192],[192,192],[193,193],[[]],[[]],[[],192],[[],193],[[192,192],29],[[],52],[193,52],[[192,32],[[24,[33]]]],[[193,32],[[24,[33]]]],[[]],[[]],[[]],[[],52],[[]],[[]],[[]],[[],193],[[52,52],193],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],40],[[],40],[[]],[193],[95],[96],[79],[97],[98],[99],[75],[38],[[193,38]],[100],[101],[25],[52],[27],[75],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[194,194],[195,195],[[]],[[]],[[194,194],21],[[195,195],21],[[],[[24,[194,23]]]],[[],[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[[],194],[[],195],[194,24],[[],[[24,[194]]]],[194],[[194,194],29],[[195,195],29],[[194,32],[[24,[33]]]],[[195,32],[[24,[33]]]],[[]],[[]],[194],[195],[[]],[[]],[[194,194],[[37,[21]]]],[[195,195],[[37,[21]]]],[194,24],[[],[[28,[27,42]]]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],40],[[],40],[[],12],0,0,0,0,0,[[],75],[[],75],[[],75],0,[[]],[80],[80],[80],[80],[80],[80],[80],[80],[80],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[196,196],[197,197],[80,80],[198,198],[[]],[[]],[[]],[[]],[[197,197],21],[[]],[[],197],[197],[197],[[],196],[[]],[197],[[196,196],29],[[197,197],29],[[198,198],29],[[196,32],[[24,[33]]]],[[197,32],[[24,[33]]]],[[80,32],[[24,[33]]]],[[198,32],[[24,[33]]]],[[]],[[]],[[]],[[]],[[]],[[]],[196],[197],[[]],[[]],[[]],[[]],[197],0,[[],75],[[],75],[[],29],[[],197],[[],80],[[197,197],[[37,[21]]]],[[]],[[],75],[[],75],[[],75],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[197],[[]],[[]],[[]],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],40],[[],40],[[],40],[[],40],[[],80],[[]],[[]],0,[[],75],0,[80],[[]],[[]],[[]],[[],80],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[199,199],[200,200],[201,201],[202,202],[203,203],[204,204],[[[205,[95]]],[[205,[95]]]],[[[205,[97]]],[[205,[97]]]],[[[205,[79]]],[[205,[79]]]],[[[205,[99]]],[[205,[99]]]],[[[205,[98]]],[[205,[98]]]],[[[205,[96]]],[[205,[96]]]],[[[206,[95]]],[[206,[95]]]],[[[206,[97]]],[[206,[97]]]],[[[206,[79]]],[[206,[79]]]],[[[206,[96]]],[[206,[96]]]],[[[206,[98]]],[[206,[98]]]],[[[206,[99]]],[[206,[99]]]],[[[205,[95]],[205,[95]]],[[205,[95]]]],[[[205,[79]],205]],[[205,[205,[100]]]],[[205,205]],[[205,205]],[[[205,[27]],205]],[[[205,[97]],[205,[97]]],[[205,[97]]]],[[205,205]],[[[205,[99]],205]],[[[205,[27]],[205,[27]]],[[205,[27]]]],[[205,[205,[25]]]],[[205,[205,[27]]]],[[[205,[75]],[205,[75]]],[[205,[75]]]],[[205,205]],[[[205,[101]],[205,[101]]],[[205,[101]]]],[[205,[205,[79]]]],[[[205,[79]],[205,[79]]],[[205,[79]]]],[[205,205]],[[205,205]],[[[205,[25]],[205,[25]]],[[205,[25]]]],[[205,205]],[[[205,[100]],205]],[[205,205]],[[[205,[100]],[205,[100]]],[[205,[100]]]],[[205,[205,[96]]]],[[205,205]],[[[205,[96]],[205,[96]]],[[205,[96]]]],[[[205,[97]],205]],[[205,[205,[101]]]],[[205,[205,[95]]]],[[[205,[98]],205]],[[205,[205,[52]]]],[[205,205]],[[[205,[52]],[205,[52]]],[[205,[52]]]],[[[205,[98]],[205,[98]]],[[205,[98]]]],[[[205,[25]],205]],[[205,205]],[[[205,[75]],205]],[[205,205]],[[[205,[52]],205]],[[205,[205,[75]]]],[[[205,[101]],205]],[[[205,[95]],205]],[[[205,[96]],205]],[[[205,[99]],[205,[99]]],[[205,[99]]]],[[205,[205,[97]]]],[[205,[205,[98]]]],[[205,[205,[99]]]],[[[206,[97]],[206,[97]]],[[206,[97]]]],[[[206,[52]],[206,[52]]],[[206,[52]]]],[[[206,[96]],[206,[96]]],[[206,[96]]]],[[[206,[79]],206]],[[206,206]],[[206,206]],[[[206,[95]],[206,[95]]],[[206,[95]]]],[[206,[206,[52]]]],[[[206,[75]],[206,[75]]],[[206,[75]]]],[[206,[206,[101]]]],[[[206,[27]],[206,[27]]],[[206,[27]]]],[[[206,[100]],[206,[100]]],[[206,[100]]]],[[[206,[52]],206]],[[206,206]],[[206,206]],[[[206,[97]],206]],[[[206,[99]],[206,[99]]],[[206,[99]]]],[[206,206]],[[206,206]],[[[206,[95]],206]],[[206,206]],[[[206,[100]],206]],[[206,[206,[100]]]],[[206,206]],[[[206,[27]],206]],[[206,206]],[[[206,[79]],[206,[79]]],[[206,[79]]]],[[[206,[75]],206]],[[206,[206,[95]]]],[[206,[206,[96]]]],[[206,[206,[27]]]],[[206,[206,[75]]]],[[206,[206,[97]]]],[[[206,[96]],206]],[[[206,[25]],206]],[[[206,[25]],[206,[25]]],[[206,[25]]]],[[[206,[101]],[206,[101]]],[[206,[101]]]],[[206,[206,[79]]]],[[[206,[98]],206]],[[206,[206,[98]]]],[[206,206]],[[[206,[99]],206]],[[206,206]],[[206,[206,[99]]]],[[206,206]],[[[206,[101]],206]],[[206,[206,[25]]]],[[[206,[98]],[206,[98]]],[[206,[98]]]],[[[205,[98]],205]],[[[205,[101]],205]],[[[205,[52]],[205,[52]]]],[[[205,[79]],79]],[[[205,[27]],27]],[[[205,[99]],205]],[[[205,[99]],[205,[99]]]],[[[205,[97]],205]],[[[205,[75]],205]],[[[205,[27]],[205,[27]]]],[[[205,[97]],97]],[[[205,[98]],[205,[98]]]],[[[205,[96]],[205,[96]]]],[[[205,[79]],79]],[[[205,[101]],[205,[101]]]],[[[205,[95]],95]],[[[205,[97]],97]],[[[205,[98]],98]],[[[205,[25]],25]],[[[205,[75]],75]],[[[205,[25]],205]],[[[205,[96]],205]],[[[205,[100]],100]],[[[205,[95]],[205,[95]]]],[[[205,[98]],98]],[[[205,[52]],52]],[[[205,[25]],[205,[25]]]],[[[205,[99]],99]],[[[205,[52]],52]],[[[205,[52]],205]],[[[205,[96]],96]],[[[205,[75]],[205,[75]]]],[[[205,[75]],75]],[[[205,[100]],[205,[100]]]],[[[205,[27]],27]],[[[205,[96]],96]],[[[205,[27]],205]],[[[205,[99]],99]],[[[205,[101]],101]],[[[205,[79]],205]],[[[205,[25]],25]],[[[205,[100]],100]],[[[205,[97]],[205,[97]]]],[[[205,[101]],101]],[[[205,[79]],[205,[79]]]],[[[205,[95]],95]],[[[205,[100]],205]],[[[205,[95]],205]],[[[206,[25]],25]],[[[206,[100]],[206,[100]]]],[[[206,[95]],95]],[[[206,[97]],97]],[[[206,[100]],206]],[[[206,[97]],97]],[[[206,[79]],[206,[79]]]],[[[206,[75]],[206,[75]]]],[[[206,[100]],100]],[[[206,[25]],25]],[[[206,[98]],[206,[98]]]],[[[206,[79]],79]],[[[206,[95]],206]],[[[206,[101]],206]],[[[206,[101]],101]],[[[206,[52]],52]],[[[206,[95]],[206,[95]]]],[[[206,[79]],79]],[[[206,[99]],99]],[[[206,[52]],[206,[52]]]],[[[206,[27]],27]],[[[206,[101]],[206,[101]]]],[[[206,[95]],95]],[[[206,[75]],75]],[[[206,[96]],96]],[[[206,[97]],206]],[[[206,[27]],206]],[[[206,[98]],98]],[[[206,[79]],206]],[[[206,[25]],[206,[25]]]],[[[206,[96]],96]],[[[206,[52]],52]],[[[206,[27]],27]],[[[206,[52]],206]],[[[206,[27]],[206,[27]]]],[[[206,[98]],98]],[[[206,[99]],[206,[99]]]],[[[206,[97]],[206,[97]]]],[[[206,[25]],206]],[[[206,[98]],206]],[[[206,[99]],206]],[[[206,[96]],[206,[96]]]],[[[206,[75]],75]],[[[206,[96]],206]],[[[206,[100]],100]],[[[206,[75]],206]],[[[206,[99]],99]],[[[206,[101]],101]],[[205,[205,[27]]]],[[[205,[27]],205]],[[205,[205,[75]]]],[[[205,[25]],[205,[25]]],[[205,[25]]]],[[[205,[98]],205]],[[[205,[79]],205]],[[205,205]],[[205,[205,[100]]]],[[[205,[97]],[205,[97]]],[[205,[97]]]],[[205,[205,[79]]]],[[205,[205,[97]]]],[[205,[205,[98]]]],[[[205,[99]],205]],[[205,[205,[25]]]],[[[205,[75]],[205,[75]]],[[205,[75]]]],[[205,205]],[[[205,[101]],[205,[101]]],[[205,[101]]]],[[205,205]],[[205,205]],[[205,[205,[52]]]],[[205,[205,[96]]]],[[205,[205,[101]]]],[[205,[205,[99]]]],[[205,[205,[95]]]],[[205,205]],[[205,205]],[[205,205]],[[[205,[75]],205]],[[[205,[79]],[205,[79]]],[[205,[79]]]],[[[205,[95]],205]],[[205,205]],[[[205,[27]],[205,[27]]],[[205,[27]]]],[[[205,[96]],[205,[96]]],[[205,[96]]]],[[[205,[95]],[205,[95]]],[[205,[95]]]],[[[205,[98]],[205,[98]]],[[205,[98]]]],[[[205,[100]],[205,[100]]],[[205,[100]]]],[[[205,[101]],205]],[[[205,[99]],[205,[99]]],[[205,[99]]]],[[[205,[52]],205]],[[[205,[96]],205]],[[205,205]],[[[205,[25]],205]],[[[205,[100]],205]],[[205,205]],[[[205,[97]],205]],[[[205,[52]],[205,[52]]],[[205,[52]]]],[[205,205]],[[205,205]],[[[206,[97]],206]],[[[206,[75]],[206,[75]]],[[206,[75]]]],[[206,[206,[96]]]],[[[206,[100]],[206,[100]]],[[206,[100]]]],[[206,[206,[101]]]],[[[206,[101]],206]],[[[206,[96]],206]],[[206,206]],[[[206,[95]],206]],[[[206,[52]],206]],[[[206,[27]],[206,[27]]],[[206,[27]]]],[[[206,[99]],206]],[[206,[206,[75]]]],[[206,[206,[79]]]],[[[206,[79]],206]],[[206,[206,[27]]]],[[206,206]],[[206,206]],[[206,[206,[99]]]],[[[206,[100]],206]],[[206,206]],[[206,[206,[95]]]],[[206,206]],[[[206,[79]],[206,[79]]],[[206,[79]]]],[[[206,[95]],[206,[95]]],[[206,[95]]]],[[[206,[96]],[206,[96]]],[[206,[96]]]],[[206,[206,[100]]]],[[206,206]],[[206,206]],[[206,[206,[52]]]],[[[206,[27]],206]],[[[206,[75]],206]],[[[206,[25]],[206,[25]]],[[206,[25]]]],[[206,206]],[[206,[206,[97]]]],[[[206,[52]],[206,[52]]],[[206,[52]]]],[[[206,[99]],[206,[99]]],[[206,[99]]]],[[206,206]],[[206,206]],[[206,206]],[[206,206]],[[[206,[25]],206]],[[[206,[101]],[206,[101]]],[[206,[101]]]],[[[206,[97]],[206,[97]]],[[206,[97]]]],[[[206,[98]],206]],[[206,[206,[25]]]],[[[206,[98]],[206,[98]]],[[206,[98]]]],[[206,[206,[98]]]],[[[205,[100]],100]],[[[205,[99]],99]],[[[205,[99]],205]],[[[205,[100]],100]],[[[205,[95]],95]],[[[205,[79]],205]],[[[205,[97]],[205,[97]]]],[[[205,[101]],205]],[[[205,[27]],[205,[27]]]],[[[205,[98]],205]],[[[205,[99]],99]],[[[205,[27]],205]],[[[205,[100]],[205,[100]]]],[[[205,[27]],27]],[[[205,[79]],79]],[[[205,[96]],[205,[96]]]],[[[205,[101]],[205,[101]]]],[[[205,[96]],96]],[[[205,[101]],101]],[[[205,[95]],205]],[[[205,[25]],25]],[[[205,[75]],[205,[75]]]],[[[205,[95]],95]],[[[205,[27]],27]],[[[205,[100]],205]],[[[205,[98]],98]],[[[205,[75]],75]],[[[205,[97]],97]],[[[205,[52]],52]],[[[205,[97]],97]],[[[205,[25]],[205,[25]]]],[[[205,[99]],[205,[99]]]],[[[205,[96]],205]],[[[205,[75]],75]],[[[205,[98]],98]],[[[205,[52]],205]],[[[205,[95]],[205,[95]]]],[[[205,[96]],96]],[[[205,[101]],101]],[[[205,[97]],205]],[[[205,[75]],205]],[[[205,[98]],[205,[98]]]],[[[205,[52]],52]],[[[205,[79]],79]],[[[205,[25]],205]],[[[205,[79]],[205,[79]]]],[[[205,[52]],[205,[52]]]],[[[205,[25]],25]],[[[206,[96]],[206,[96]]]],[[[206,[79]],79]],[[[206,[100]],100]],[[[206,[75]],206]],[[[206,[99]],99]],[[[206,[98]],98]],[[[206,[100]],100]],[[[206,[52]],52]],[[[206,[27]],27]],[[[206,[101]],101]],[[[206,[97]],[206,[97]]]],[[[206,[97]],97]],[[[206,[97]],97]],[[[206,[99]],[206,[99]]]],[[[206,[98]],206]],[[[206,[98]],98]],[[[206,[79]],[206,[79]]]],[[[206,[97]],206]],[[[206,[99]],206]],[[[206,[101]],[206,[101]]]],[[[206,[25]],25]],[[[206,[96]],96]],[[[206,[79]],206]],[[[206,[75]],75]],[[[206,[75]],75]],[[[206,[27]],206]],[[[206,[100]],206]],[[[206,[25]],206]],[[[206,[27]],[206,[27]]]],[[[206,[96]],206]],[[[206,[79]],79]],[[[206,[25]],25]],[[[206,[100]],[206,[100]]]],[[[206,[75]],[206,[75]]]],[[[206,[52]],52]],[[[206,[95]],[206,[95]]]],[[[206,[96]],96]],[[[206,[52]],[206,[52]]]],[[[206,[95]],95]],[[[206,[27]],27]],[[[206,[95]],206]],[[[206,[25]],[206,[25]]]],[[[206,[99]],99]],[[[206,[95]],95]],[[[206,[52]],206]],[[[206,[98]],[206,[98]]]],[[[206,[101]],206]],[[[206,[101]],101]],[[207,27]],[[207,207]],[[208,101]],[[208,208]],[[209,209]],[[209,25]],[[210,52]],[[210,210]],[[211,211]],[[211,100]],[[212,212]],[[212,75]],[[199,199]],[[199,98]],[[200,96]],[[200,200]],[[201,79]],[[201,201]],[[202,97]],[[202,202]],[[203,203]],[[203,95]],[[204,99]],[[204,204]],[[205,[205,[52]]]],[[205,[205,[99]]]],[[205,205]],[[205,205]],[[[205,[52]],[205,[52]]],[[205,[52]]]],[[205,[205,[100]]]],[[[205,[75]],205]],[[205,[205,[101]]]],[[[205,[95]],205]],[[[205,[27]],205]],[[[205,[100]],205]],[[205,205]],[[[205,[52]],205]],[[205,[205,[96]]]],[[[205,[27]],[205,[27]]],[[205,[27]]]],[[[205,[79]],205]],[[205,205]],[[[205,[96]],[205,[96]]],[[205,[96]]]],[[205,[205,[27]]]],[[[205,[99]],205]],[[205,205]],[[205,205]],[[205,[205,[79]]]],[[205,205]],[[[205,[79]],[205,[79]]],[[205,[79]]]],[[205,[205,[98]]]],[[[205,[100]],[205,[100]]],[[205,[100]]]],[[205,[205,[97]]]],[[205,[205,[75]]]],[[[205,[75]],[205,[75]]],[[205,[75]]]],[[205,205]],[[205,205]],[[[205,[95]],[205,[95]]],[[205,[95]]]],[[[205,[25]],205]],[[[205,[101]],205]],[[[205,[99]],[205,[99]]],[[205,[99]]]],[[205,205]],[[205,205]],[[205,205]],[[[205,[98]],[205,[98]]],[[205,[98]]]],[[205,[205,[25]]]],[[[205,[96]],205]],[[[205,[25]],[205,[25]]],[[205,[25]]]],[[[205,[101]],[205,[101]]],[[205,[101]]]],[[[205,[97]],[205,[97]]],[[205,[97]]]],[[[205,[97]],205]],[[[205,[98]],205]],[[205,[205,[95]]]],[[206,206]],[[[206,[27]],206]],[[206,[206,[27]]]],[[[206,[99]],206]],[[206,[206,[96]]]],[[206,[206,[97]]]],[[206,[206,[52]]]],[[206,[206,[95]]]],[[206,206]],[[[206,[25]],206]],[[206,206]],[[[206,[27]],[206,[27]]],[[206,[27]]]],[[206,206]],[[[206,[25]],[206,[25]]],[[206,[25]]]],[[[206,[101]],206]],[[[206,[95]],206]],[[206,206]],[[[206,[98]],[206,[98]]],[[206,[98]]]],[[[206,[99]],[206,[99]]],[[206,[99]]]],[[206,[206,[100]]]],[[[206,[97]],[206,[97]]],[[206,[97]]]],[[206,206]],[[206,[206,[98]]]],[[206,206]],[[206,[206,[101]]]],[[206,[206,[79]]]],[[[206,[100]],206]],[[[206,[100]],[206,[100]]],[[206,[100]]]],[[206,[206,[75]]]],[[206,206]],[[206,206]],[[[206,[95]],[206,[95]]],[[206,[95]]]],[[[206,[52]],[206,[52]]],[[206,[52]]]],[[[206,[52]],206]],[[[206,[96]],[206,[96]]],[[206,[96]]]],[[[206,[79]],206]],[[206,206]],[[[206,[75]],206]],[[[206,[97]],206]],[[206,[206,[99]]]],[[[206,[79]],[206,[79]]],[[206,[79]]]],[[[206,[98]],206]],[[206,206]],[[[206,[96]],206]],[[[206,[101]],[206,[101]]],[[206,[101]]]],[[[206,[75]],[206,[75]]],[[206,[75]]]],[[206,[206,[25]]]],[[206,206]],[[207,27]],[[207,207]],[[208,101]],[[208,208]],[[209,209]],[[209,25]],[[210,210]],[[210,52]],[[211,211]],[[211,100]],[[212,212]],[[212,75]],[[199,199]],[[199,98]],[[200,200]],[[200,96]],[[201,79]],[[201,201]],[[202,97]],[[202,202]],[[203,95]],[[203,203]],[[204,204]],[[204,99]],[[[205,[27]],205]],[[[205,[95]],205]],[[[205,[96]],96]],[[[205,[98]],98]],[[[205,[79]],79]],[[[205,[100]],205]],[[[205,[52]],52]],[[[205,[96]],96]],[[[205,[25]],25]],[[[205,[101]],205]],[[[205,[79]],205]],[[[205,[95]],95]],[[[205,[27]],27]],[[[205,[98]],98]],[[[205,[75]],75]],[[[205,[98]],[205,[98]]]],[[[205,[97]],97]],[[[205,[79]],[205,[79]]]],[[[205,[96]],205]],[[[205,[95]],[205,[95]]]],[[[205,[96]],[205,[96]]]],[[[205,[52]],52]],[[[205,[99]],99]],[[[205,[99]],99]],[[[205,[97]],205]],[[[205,[100]],100]],[[[205,[52]],205]],[[[205,[101]],101]],[[[205,[97]],97]],[[[205,[25]],205]],[[[205,[52]],[205,[52]]]],[[[205,[75]],[205,[75]]]],[[[205,[95]],95]],[[[205,[25]],25]],[[[205,[75]],75]],[[[205,[27]],27]],[[[205,[25]],[205,[25]]]],[[[205,[101]],101]],[[[205,[75]],205]],[[[205,[99]],[205,[99]]]],[[[205,[100]],100]],[[[205,[27]],[205,[27]]]],[[[205,[99]],205]],[[[205,[97]],[205,[97]]]],[[[205,[79]],79]],[[[205,[100]],[205,[100]]]],[[[205,[101]],[205,[101]]]],[[[205,[98]],205]],[[[206,[52]],52]],[[[206,[79]],206]],[[[206,[79]],[206,[79]]]],[[[206,[95]],206]],[[[206,[95]],[206,[95]]]],[[[206,[98]],206]],[[[206,[100]],206]],[[[206,[101]],[206,[101]]]],[[[206,[27]],27]],[[[206,[98]],98]],[[[206,[101]],101]],[[[206,[96]],96]],[[[206,[96]],206]],[[[206,[97]],97]],[[[206,[96]],[206,[96]]]],[[[206,[52]],206]],[[[206,[97]],206]],[[[206,[100]],[206,[100]]]],[[[206,[75]],75]],[[[206,[100]],100]],[[[206,[99]],206]],[[[206,[75]],[206,[75]]]],[[[206,[25]],25]],[[[206,[27]],[206,[27]]]],[[[206,[95]],95]],[[[206,[75]],75]],[[[206,[25]],25]],[[[206,[95]],95]],[[[206,[99]],[206,[99]]]],[[[206,[52]],52]],[[[206,[98]],98]],[[[206,[79]],79]],[[[206,[99]],99]],[[[206,[97]],97]],[[[206,[97]],[206,[97]]]],[[[206,[100]],100]],[[[206,[25]],[206,[25]]]],[[[206,[75]],206]],[[[206,[27]],206]],[[[206,[79]],79]],[[[206,[96]],96]],[[[206,[25]],206]],[[[206,[101]],206]],[[[206,[27]],27]],[[[206,[98]],[206,[98]]]],[[[206,[101]],101]],[[[206,[99]],99]],[[[206,[52]],[206,[52]]]],[[205,205]],[[[205,[99]],[205,[99]]],[[205,[99]]]],[[205,205]],[[205,[205,[79]]]],[[205,[205,[75]]]],[[205,[205,[27]]]],[[[205,[101]],205]],[[205,205]],[[[205,[27]],[205,[27]]],[[205,[27]]]],[[[205,[79]],205]],[[205,[205,[99]]]],[[205,[205,[97]]]],[[[205,[79]],[205,[79]]],[[205,[79]]]],[[[205,[25]],[205,[25]]],[[205,[25]]]],[[205,205]],[[[205,[97]],205]],[[205,205]],[[205,205]],[[[205,[99]],205]],[[[205,[100]],205]],[[205,205]],[[205,[205,[98]]]],[[[205,[101]],[205,[101]]],[[205,[101]]]],[[[205,[96]],205]],[[[205,[75]],205]],[[[205,[97]],[205,[97]]],[[205,[97]]]],[[205,[205,[95]]]],[[[205,[100]],[205,[100]]],[[205,[100]]]],[[[205,[52]],[205,[52]]],[[205,[52]]]],[[205,205]],[[205,[205,[101]]]],[[205,205]],[[205,[205,[52]]]],[[205,205]],[[[205,[96]],[205,[96]]],[[205,[96]]]],[[[205,[98]],205]],[[[205,[95]],[205,[95]]],[[205,[95]]]],[[[205,[95]],205]],[[205,205]],[[205,205]],[[[205,[52]],205]],[[205,[205,[100]]]],[[[205,[27]],205]],[[[205,[75]],[205,[75]]],[[205,[75]]]],[[205,[205,[25]]]],[[[205,[25]],205]],[[[205,[98]],[205,[98]]],[[205,[98]]]],[[205,[205,[96]]]],[[206,[206,[75]]]],[[[206,[75]],206]],[[[206,[79]],206]],[[206,206]],[[[206,[95]],206]],[[206,206]],[[[206,[27]],[206,[27]]],[[206,[27]]]],[[206,[206,[96]]]],[[206,206]],[[[206,[25]],206]],[[[206,[99]],206]],[[206,[206,[95]]]],[[[206,[97]],206]],[[206,206]],[[[206,[95]],[206,[95]]],[[206,[95]]]],[[206,[206,[98]]]],[[[206,[100]],206]],[[[206,[99]],[206,[99]]],[[206,[99]]]],[[[206,[101]],[206,[101]]],[[206,[101]]]],[[[206,[96]],[206,[96]]],[[206,[96]]]],[[206,[206,[99]]]],[[206,206]],[[[206,[96]],206]],[[206,[206,[27]]]],[[206,[206,[100]]]],[[206,206]],[[[206,[52]],206]],[[206,206]],[[206,206]],[[[206,[25]],[206,[25]]],[[206,[25]]]],[[206,206]],[[[206,[100]],[206,[100]]],[[206,[100]]]],[[[206,[27]],206]],[[[206,[101]],206]],[[[206,[52]],[206,[52]]],[[206,[52]]]],[[206,206]],[[206,[206,[101]]]],[[206,[206,[97]]]],[[206,206]],[[206,[206,[52]]]],[[[206,[75]],[206,[75]]],[[206,[75]]]],[[206,[206,[79]]]],[[[206,[97]],[206,[97]]],[[206,[97]]]],[[[206,[98]],206]],[[[206,[98]],[206,[98]]],[[206,[98]]]],[[206,206]],[[206,[206,[25]]]],[[[206,[79]],[206,[79]]],[[206,[79]]]],[[[205,[95]],205]],[[[205,[95]],95]],[[[205,[96]],96]],[[[205,[25]],205]],[[[205,[79]],205]],[[[205,[97]],97]],[[[205,[75]],205]],[[[205,[75]],[205,[75]]]],[[[205,[98]],205]],[[[205,[98]],[205,[98]]]],[[[205,[99]],205]],[[[205,[95]],95]],[[[205,[25]],25]],[[[205,[27]],27]],[[[205,[99]],99]],[[[205,[25]],25]],[[[205,[27]],27]],[[[205,[100]],100]],[[[205,[101]],[205,[101]]]],[[[205,[79]],79]],[[[205,[96]],96]],[[[205,[25]],[205,[25]]]],[[[205,[101]],205]],[[[205,[96]],[205,[96]]]],[[[205,[101]],101]],[[[205,[100]],[205,[100]]]],[[[205,[100]],205]],[[[205,[99]],[205,[99]]]],[[[205,[52]],205]],[[[205,[98]],98]],[[[205,[52]],52]],[[[205,[79]],79]],[[[205,[101]],101]],[[[205,[97]],205]],[[[205,[75]],75]],[[[205,[52]],[205,[52]]]],[[[205,[79]],[205,[79]]]],[[[205,[52]],52]],[[[205,[100]],100]],[[[205,[27]],205]],[[[205,[99]],99]],[[[205,[97]],[205,[97]]]],[[[205,[98]],98]],[[[205,[27]],[205,[27]]]],[[[205,[75]],75]],[[[205,[95]],[205,[95]]]],[[[205,[97]],97]],[[[205,[96]],205]],[[[206,[100]],206]],[[[206,[25]],[206,[25]]]],[[[206,[101]],101]],[[[206,[75]],75]],[[[206,[100]],100]],[[[206,[27]],[206,[27]]]],[[[206,[96]],96]],[[[206,[25]],25]],[[[206,[27]],206]],[[[206,[100]],100]],[[[206,[52]],206]],[[[206,[79]],79]],[[[206,[99]],[206,[99]]]],[[[206,[25]],206]],[[[206,[52]],[206,[52]]]],[[[206,[98]],[206,[98]]]],[[[206,[95]],[206,[95]]]],[[[206,[96]],206]],[[[206,[98]],98]],[[[206,[25]],25]],[[[206,[95]],95]],[[[206,[100]],[206,[100]]]],[[[206,[97]],[206,[97]]]],[[[206,[99]],99]],[[[206,[97]],97]],[[[206,[97]],97]],[[[206,[96]],96]],[[[206,[99]],99]],[[[206,[98]],98]],[[[206,[101]],101]],[[[206,[27]],27]],[[[206,[101]],[206,[101]]]],[[[206,[75]],75]],[[[206,[75]],206]],[[[206,[98]],206]],[[[206,[79]],[206,[79]]]],[[[206,[79]],206]],[[[206,[97]],206]],[[[206,[52]],52]],[[[206,[96]],[206,[96]]]],[[[206,[95]],206]],[[[206,[99]],206]],[[[206,[101]],206]],[[[206,[27]],27]],[[[206,[95]],95]],[[[206,[75]],[206,[75]]]],[[[206,[79]],79]],[[[206,[52]],52]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[199,[[37,[199]]]],[200,[[37,[200]]]],[201,[[37,[201]]]],[202,[[37,[202]]]],[203,[[37,[203]]]],[204,[[37,[204]]]],[[207,27],[[37,[207]]]],[[208,101],[[37,[208]]]],[[209,25],[[37,[209]]]],[[210,52],[[37,[210]]]],[[211,100],[[37,[211]]]],[[212,75],[[37,[212]]]],[[207,207],[[37,[207]]]],[[208,208],[[37,[208]]]],[[209,209],[[37,[209]]]],[[210,210],[[37,[210]]]],[[211,211],[[37,[211]]]],[[212,212],[[37,[212]]]],[[199,199],[[37,[199]]]],[[200,200],[[37,[200]]]],[[201,201],[[37,[201]]]],[[202,202],[[37,[202]]]],[[203,203],[[37,[203]]]],[[204,204],[[37,[204]]]],[207,[[37,[207]]]],[208,[[37,[208]]]],[209,[[37,[209]]]],[210,[[37,[210]]]],[211,[[37,[211]]]],[212,[[37,[212]]]],[[207,25],[[37,[207]]]],[[208,25],[[37,[208]]]],[[209,25],[[37,[209]]]],[[210,25],[[37,[210]]]],[[211,25],[[37,[211]]]],[[212,25],[[37,[212]]]],[[199,25],[[37,[199]]]],[[200,25],[[37,[200]]]],[[201,25],[[37,[201]]]],[[202,25],[[37,[202]]]],[[203,25],[[37,[203]]]],[[204,25],[[37,[204]]]],[213,213],[214,214],[215,215],[216,216],[207,207],[208,208],[209,209],[210,210],[211,211],[212,212],[199,199],[200,200],[201,201],[202,202],[203,203],[204,204],[205,205],[206,206],[217,217],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[207,207],21],[[208,208],21],[[209,209],21],[[210,210],21],[[211,211],21],[[212,212],21],[[199,199],21],[[200,200],21],[[201,201],21],[[202,202],21],[[203,203],21],[[204,204],21],[[205,205],21],[[206,206],21],[[[205,[96]]],25],[[[205,[25]]],25],[[[205,[101]]],25],[[[205,[52]]],25],[[[205,[98]]],25],[[[205,[95]]],25],[[[205,[27]]],25],[[[205,[97]]],25],[[[205,[99]]],25],[[[205,[100]]],25],[[[205,[79]]],25],[[[205,[75]]],25],[[[206,[99]]],25],[[[206,[27]]],25],[[[206,[75]]],25],[[[206,[100]]],25],[[[206,[52]]],25],[[[206,[101]]],25],[[[206,[95]]],25],[[[206,[97]]],25],[[[206,[79]]],25],[[[206,[96]]],25],[[[206,[98]]],25],[[[206,[25]]],25],[[[205,[98]]],25],[[[205,[52]]],25],[[[205,[99]]],25],[[[205,[101]]],25],[[[205,[27]]],25],[[[205,[96]]],25],[[[205,[100]]],25],[[[205,[75]]],25],[[[205,[25]]],25],[[[205,[79]]],25],[[[205,[97]]],25],[[[205,[95]]],25],[[[206,[97]]],25],[[[206,[98]]],25],[[[206,[75]]],25],[[[206,[27]]],25],[[[206,[101]]],25],[[[206,[95]]],25],[[[206,[25]]],25],[[[206,[96]]],25],[[[206,[100]]],25],[[[206,[52]]],25],[[[206,[79]]],25],[[[206,[99]]],25],[[],[[24,[207,23]]]],[[],[[24,[208,23]]]],[[],[[24,[209,23]]]],[[],[[24,[210,23]]]],[[],[[24,[211,23]]]],[[],[[24,[199,23]]]],[[],[[24,[200,23]]]],[[],[[24,[201,23]]]],[[],[[24,[202,23]]]],[[],[[24,[203,23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[[],205],[[],206],[213,38],[214,38],[215,38],[[],[[24,[207]]]],[[],[[24,[208]]]],[[],[[24,[209]]]],[[],[[24,[210]]]],[[],[[24,[211]]]],[[],[[24,[212]]]],[[],[[24,[199]]]],[[],[[24,[200]]]],[[],[[24,[201]]]],[[],[[24,[202]]]],[[],[[24,[203]]]],[[],[[24,[204]]]],[[],[[24,[206]]]],[[[205,[75]],[205,[75]]],[[205,[75]]]],[[[205,[100]],[205,[100]]],[[205,[100]]]],[[[205,[95]],[205,[95]]],[[205,[95]]]],[[205,205]],[[205,[205,[27]]]],[[[205,[52]],[205,[52]]],[[205,[52]]]],[[205,205]],[[[205,[96]],[205,[96]]],[[205,[96]]]],[[205,205]],[[205,[205,[98]]]],[[[205,[25]],205]],[[205,205]],[[205,[205,[52]]]],[[205,205]],[[[205,[96]],205]],[[205,[205,[99]]]],[[[205,[75]],205]],[[[205,[27]],[205,[27]]],[[205,[27]]]],[[205,[205,[97]]]],[[205,[205,[95]]]],[[[205,[79]],[205,[79]]],[[205,[79]]]],[[205,205]],[[205,[205,[100]]]],[[[205,[101]],205]],[[[205,[99]],205]],[[[205,[98]],[205,[98]]],[[205,[98]]]],[[205,205]],[[[205,[101]],[205,[101]]],[[205,[101]]]],[[205,205]],[[205,205]],[[[205,[27]],205]],[[[205,[79]],205]],[[205,[205,[25]]]],[[[205,[100]],205]],[[205,[205,[96]]]],[[[205,[99]],[205,[99]]],[[205,[99]]]],[[205,205]],[[[205,[25]],[205,[25]]],[[205,[25]]]],[[[205,[97]],[205,[97]]],[[205,[97]]]],[[[205,[52]],205]],[[205,205]],[[205,[205,[101]]]],[[205,[205,[75]]]],[[205,205]],[[205,[205,[79]]]],[[[205,[98]],205]],[[[205,[95]],205]],[[[205,[97]],205]],[[[206,[27]],206]],[[206,206]],[[206,[206,[97]]]],[[206,206]],[[206,[206,[95]]]],[[206,[206,[101]]]],[[[206,[25]],[206,[25]]],[[206,[25]]]],[[[206,[75]],206]],[[206,[206,[99]]]],[[206,206]],[[206,[206,[25]]]],[[206,[206,[96]]]],[[206,206]],[[[206,[25]],206]],[[206,206]],[[206,206]],[[[206,[97]],206]],[[[206,[52]],[206,[52]]],[[206,[52]]]],[[206,206]],[[[206,[95]],206]],[[206,206]],[[[206,[52]],206]],[[[206,[98]],206]],[[206,[206,[52]]]],[[[206,[75]],[206,[75]]],[[206,[75]]]],[[[206,[27]],[206,[27]]],[[206,[27]]]],[[[206,[95]],[206,[95]]],[[206,[95]]]],[[206,206]],[[206,[206,[27]]]],[[206,[206,[98]]]],[[[206,[99]],[206,[99]]],[[206,[99]]]],[[[206,[101]],[206,[101]]],[[206,[101]]]],[[[206,[79]],206]],[[206,[206,[79]]]],[[[206,[98]],[206,[98]]],[[206,[98]]]],[[206,206]],[[206,[206,[75]]]],[[206,206]],[[[206,[100]],[206,[100]]],[[206,[100]]]],[[[206,[101]],206]],[[[206,[97]],[206,[97]]],[[206,[97]]]],[[[206,[96]],206]],[[[206,[99]],206]],[[206,206]],[[206,[206,[100]]]],[[[206,[100]],206]],[[[206,[96]],[206,[96]]],[[206,[96]]]],[[[206,[79]],[206,[79]]],[[206,[79]]]],[[[205,[98]],205]],[[[205,[95]],95]],[[[205,[27]],[205,[27]]]],[[[205,[79]],205]],[[[205,[52]],[205,[52]]]],[[[205,[99]],99]],[[[205,[97]],97]],[[[205,[99]],205]],[[[205,[52]],52]],[[[205,[97]],[205,[97]]]],[[[205,[79]],[205,[79]]]],[[[205,[98]],98]],[[[205,[98]],[205,[98]]]],[[[205,[96]],96]],[[[205,[75]],205]],[[[205,[25]],205]],[[[205,[25]],[205,[25]]]],[[[205,[96]],[205,[96]]]],[[[205,[101]],[205,[101]]]],[[[205,[95]],[205,[95]]]],[[[205,[75]],75]],[[[205,[79]],79]],[[[205,[75]],75]],[[[205,[101]],101]],[[[205,[75]],[205,[75]]]],[[[205,[99]],99]],[[[205,[101]],205]],[[[205,[100]],[205,[100]]]],[[[205,[27]],27]],[[[205,[101]],101]],[[[205,[25]],25]],[[[205,[99]],[205,[99]]]],[[[205,[100]],205]],[[[205,[52]],205]],[[[205,[79]],79]],[[[205,[27]],27]],[[[205,[95]],205]],[[[205,[96]],96]],[[[205,[97]],97]],[[[205,[25]],25]],[[[205,[95]],95]],[[[205,[98]],98]],[[[205,[96]],205]],[[[205,[100]],100]],[[[205,[97]],205]],[[[205,[27]],205]],[[[205,[52]],52]],[[[205,[100]],100]],[[[206,[97]],[206,[97]]]],[[[206,[52]],52]],[[[206,[96]],96]],[[[206,[99]],99]],[[[206,[75]],206]],[[[206,[98]],98]],[[[206,[101]],101]],[[[206,[96]],206]],[[[206,[27]],27]],[[[206,[25]],[206,[25]]]],[[[206,[99]],[206,[99]]]],[[[206,[79]],[206,[79]]]],[[[206,[97]],97]],[[[206,[98]],98]],[[[206,[96]],[206,[96]]]],[[[206,[79]],79]],[[[206,[97]],206]],[[[206,[75]],[206,[75]]]],[[[206,[25]],25]],[[[206,[79]],206]],[[[206,[79]],79]],[[[206,[100]],100]],[[[206,[95]],95]],[[[206,[99]],99]],[[[206,[27]],206]],[[[206,[75]],75]],[[[206,[99]],206]],[[[206,[98]],[206,[98]]]],[[[206,[95]],95]],[[[206,[100]],206]],[[[206,[101]],101]],[[[206,[25]],25]],[[[206,[98]],206]],[[[206,[95]],[206,[95]]]],[[[206,[25]],206]],[[[206,[52]],52]],[[[206,[75]],75]],[[[206,[97]],97]],[[[206,[101]],206]],[[[206,[52]],206]],[[[206,[100]],100]],[[[206,[52]],[206,[52]]]],[[[206,[27]],27]],[[[206,[101]],[206,[101]]]],[[[206,[95]],206]],[[[206,[100]],[206,[100]]]],[[[206,[27]],[206,[27]]]],[[[206,[96]],96]],[207,[[28,[27,42]]]],[208,[[28,[27,42]]]],[209,[[28,[27,42]]]],[210,[[28,[27,42]]]],[211,[[28,[27,42]]]],[199,[[28,[27,42]]]],[200,[[28,[27,42]]]],[201,[[28,[27,42]]]],[202,[[28,[27,42]]]],[203,[[28,[27,42]]]],[207],[208],[209],[210],[211],[199],[200],[201],[202],[203],[[213,213],29],[[214,214],29],[[215,215],29],[[216,216],29],[[207,207],29],[[208,208],29],[[209,209],29],[[210,210],29],[[211,211],29],[[212,212],29],[[199,199],29],[[200,200],29],[[201,201],29],[[202,202],29],[[203,203],29],[[204,204],29],[[205,205],29],[[206,206],29],[[217,217],29],[[213,32],[[24,[33]]]],[[213,32],[[24,[33]]]],[[214,32],[[24,[33]]]],[[214,32],[[24,[33]]]],[[215,32],[[24,[33]]]],[[215,32],[[24,[33]]]],[[216,32],[[24,[33]]]],[[207,32],[[24,[33]]]],[[207,32],[[24,[33]]]],[[207,32],[[24,[33]]]],[[207,32],[[24,[33]]]],[[207,32],[[24,[33]]]],[[207,32],[[24,[33]]]],[[208,32],[[24,[33]]]],[[208,32],[[24,[33]]]],[[208,32],[[24,[33]]]],[[208,32],[[24,[33]]]],[[208,32],[[24,[33]]]],[[208,32],[[24,[33]]]],[[209,32],[[24,[33]]]],[[209,32],[[24,[33]]]],[[209,32],[[24,[33]]]],[[209,32],[[24,[33]]]],[[209,32],[[24,[33]]]],[[209,32],[[24,[33]]]],[[210,32],[[24,[33]]]],[[210,32],[[24,[33]]]],[[210,32],[[24,[33]]]],[[210,32],[[24,[33]]]],[[210,32],[[24,[33]]]],[[210,32],[[24,[33]]]],[[211,32],[[24,[33]]]],[[211,32],[[24,[33]]]],[[211,32],[[24,[33]]]],[[211,32],[[24,[33]]]],[[211,32],[[24,[33]]]],[[211,32],[[24,[33]]]],[[212,32],[[24,[33]]]],[[212,32],[[24,[33]]]],[[212,32],[[24,[33]]]],[[212,32],[[24,[33]]]],[[212,32],[[24,[33]]]],[[212,32],[[24,[33]]]],[[199,32],[[24,[33]]]],[[199,32],[[24,[33]]]],[[199,32],[[24,[33]]]],[[199,32],[[24,[33]]]],[[199,32],[[24,[33]]]],[[199,32],[[24,[33]]]],[[200,32],[[24,[33]]]],[[200,32],[[24,[33]]]],[[200,32],[[24,[33]]]],[[200,32],[[24,[33]]]],[[200,32],[[24,[33]]]],[[200,32],[[24,[33]]]],[[201,32],[[24,[33]]]],[[201,32],[[24,[33]]]],[[201,32],[[24,[33]]]],[[201,32],[[24,[33]]]],[[201,32],[[24,[33]]]],[[201,32],[[24,[33]]]],[[202,32],[[24,[33]]]],[[202,32],[[24,[33]]]],[[202,32],[[24,[33]]]],[[202,32],[[24,[33]]]],[[202,32],[[24,[33]]]],[[202,32],[[24,[33]]]],[[203,32],[[24,[33]]]],[[203,32],[[24,[33]]]],[[203,32],[[24,[33]]]],[[203,32],[[24,[33]]]],[[203,32],[[24,[33]]]],[[203,32],[[24,[33]]]],[[204,32],[[24,[33]]]],[[204,32],[[24,[33]]]],[[204,32],[[24,[33]]]],[[204,32],[[24,[33]]]],[[204,32],[[24,[33]]]],[[204,32],[[24,[33]]]],[[205,32],[[24,[33]]]],[[205,32],[[24,[33]]]],[[205,32],[[24,[33]]]],[[205,32],[[24,[33]]]],[[205,32],[[24,[33]]]],[[205,32],[[24,[33]]]],[[206,32],[[24,[33]]]],[[206,32],[[24,[33]]]],[[206,32],[[24,[33]]]],[[206,32],[[24,[33]]]],[[206,32],[[24,[33]]]],[[206,32],[[24,[33]]]],[[217,32],[[24,[33]]]],[[]],[218,214],[84,214],[[]],[84],[[]],[[]],[[]],[207,208],[[]],[[]],[207,209],[208,209],[209,210],[207,210],[[]],[208,210],[[]],[210,211],[209,211],[208,211],[207,211],[[]],[207,212],[208,212],[[]],[207,200],[199,200],[[]],[[]],[207,201],[199,201],[208,201],[200,201],[207,202],[199,202],[209,202],[208,202],[201,202],[[]],[200,202],[[]],[199,203],[201,203],[207,203],[202,203],[210,203],[208,203],[209,203],[200,203],[[]],[200,204],[207,204],[199,204],[[]],[[]],[[]],[[[205,[95]]],[[205,[95]]]],[[[205,[99]]],[[205,[99]]]],[[[205,[79]]],[[205,[79]]]],[[[205,[52]]],[[205,[52]]]],[[[205,[100]]],[[205,[100]]]],[[[205,[25]]],[[205,[25]]]],[[[205,[96]]],[[205,[96]]]],[[[205,[97]]],[[205,[97]]]],[[[205,[75]]],[[205,[75]]]],[[[205,[101]]],[[205,[101]]]],[[[205,[27]]],[[205,[27]]]],[[[205,[98]]],[[205,[98]]]],[[[206,[75]]],[[206,[75]]]],[[[206,[27]]],[[206,[27]]]],[[[206,[101]]],[[206,[101]]]],[[[206,[98]]],[[206,[98]]]],[[[206,[52]]],[[206,[52]]]],[[[206,[25]]],[[206,[25]]]],[[[206,[95]]],[[206,[95]]]],[[[206,[79]]],[[206,[79]]]],[[[206,[100]]],[[206,[100]]]],[[[206,[96]]],[[206,[96]]]],[[[206,[99]]],[[206,[99]]]],[[[206,[97]]],[[206,[97]]]],[[[205,[99]]],[[205,[99]]]],[[[205,[95]]],[[205,[95]]]],[[[205,[25]]],[[205,[25]]]],[[[205,[101]]],[[205,[101]]]],[[[205,[100]]],[[205,[100]]]],[[[205,[27]]],[[205,[27]]]],[[[205,[98]]],[[205,[98]]]],[[[205,[96]]],[[205,[96]]]],[[[205,[75]]],[[205,[75]]]],[[[205,[52]]],[[205,[52]]]],[[[205,[79]]],[[205,[79]]]],[[[205,[97]]],[[205,[97]]]],[[[206,[95]]],[[206,[95]]]],[[[206,[101]]],[[206,[101]]]],[[[206,[75]]],[[206,[75]]]],[[[206,[100]]],[[206,[100]]]],[[[206,[27]]],[[206,[27]]]],[[[206,[52]]],[[206,[52]]]],[[[206,[25]]],[[206,[25]]]],[[[206,[97]]],[[206,[97]]]],[[[206,[79]]],[[206,[79]]]],[[[206,[96]]],[[206,[96]]]],[[[206,[98]]],[[206,[98]]]],[[[206,[99]]],[[206,[99]]]],[38,[[24,[207]]]],[38,[[24,[208]]]],[38,[[24,[209]]]],[38,[[24,[210]]]],[38,[[24,[211]]]],[38,[[24,[212]]]],[38,[[24,[199]]]],[38,[[24,[200]]]],[38,[[24,[201]]]],[38,[[24,[202]]]],[38,[[24,[203]]]],[38,[[24,[204]]]],[207,27],[208,101],[209,25],[210,52],[211,100],[212,75],[199,98],[200,96],[201,79],[202,97],[203,95],[204,99],[207],[208],[209],[210],[211],[212],[199],[200],[201],[202],[203],[204],[205],[206],[207,25],[208,25],[209,25],[210,25],[211,25],[212,25],[207,25],[208,25],[209,25],[210,25],[211,25],[212,25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[205,[98]]],29],[[[205,[96]]],29],[[[205,[79]]],29],[[[205,[99]]],29],[[[205,[97]]],29],[[[205,[95]]],29],[[[206,[98]]],29],[[[206,[95]]],29],[[[206,[96]]],29],[[[206,[97]]],29],[[[206,[99]]],29],[[[206,[79]]],29],[[[205,[98]]],29],[[[205,[79]]],29],[[[205,[96]]],29],[[[205,[95]]],29],[[[205,[99]]],29],[[[205,[97]]],29],[[[206,[98]]],29],[[[206,[95]]],29],[[[206,[99]]],29],[[[206,[97]]],29],[[[206,[96]]],29],[[[206,[79]]],29],[207,29],[208,29],[209,29],[210,29],[211,29],[212,29],[[[205,[75]]],29],[[[205,[27]]],29],[[[205,[101]]],29],[[[205,[25]]],29],[[[205,[52]]],29],[[[205,[100]]],29],[[[206,[52]]],29],[[[206,[100]]],29],[[[206,[75]]],29],[[[206,[27]]],29],[[[206,[101]]],29],[[[206,[25]]],29],[215,216],[207,25],[208,25],[209,25],[210,25],[211,25],[212,25],[199,25],[200,25],[201,25],[202,25],[203,25],[204,25],[[[205,[100]]],25],[[[205,[75]]],25],[[[205,[97]]],25],[[[205,[25]]],25],[[[205,[27]]],25],[[[205,[95]]],25],[[[205,[52]]],25],[[[205,[99]]],25],[[[205,[98]]],25],[[[205,[101]]],25],[[[205,[96]]],25],[[[205,[79]]],25],[[[206,[98]]],25],[[[206,[95]]],25],[[[206,[79]]],25],[[[206,[25]]],25],[[[206,[101]]],25],[[[206,[52]]],25],[[[206,[27]]],25],[[[206,[99]]],25],[[[206,[100]]],25],[[[206,[75]]],25],[[[206,[96]]],25],[[[206,[97]]],25],[[205,[205,[98]]]],[[[205,[97]],[205,[97]]],[[205,[97]]]],[[205,[205,[97]]]],[[[205,[95]],[205,[95]]],[[205,[95]]]],[[[205,[79]],205]],[[[205,[100]],205]],[[205,205]],[[205,205]],[[205,[205,[96]]]],[[[205,[52]],205]],[[205,[205,[95]]]],[[[205,[98]],[205,[98]]],[[205,[98]]]],[[[205,[25]],205]],[[[205,[99]],205]],[[205,[205,[27]]]],[[205,[205,[99]]]],[[[205,[27]],[205,[27]]],[[205,[27]]]],[[205,[205,[75]]]],[[205,205]],[[205,205]],[[[205,[97]],205]],[[[205,[101]],205]],[[205,[205,[25]]]],[[[205,[75]],205]],[[205,205]],[[205,205]],[[205,[205,[101]]]],[[[205,[101]],[205,[101]]],[[205,[101]]]],[[205,205]],[[205,205]],[[[205,[27]],205]],[[[205,[75]],[205,[75]]],[[205,[75]]]],[[[205,[79]],[205,[79]]],[[205,[79]]]],[[[205,[96]],205]],[[[205,[52]],[205,[52]]],[[205,[52]]]],[[[205,[98]],205]],[[[205,[100]],[205,[100]]],[[205,[100]]]],[[205,[205,[52]]]],[[205,[205,[100]]]],[[205,205]],[[205,205]],[[205,[205,[79]]]],[[[205,[95]],205]],[[[205,[96]],[205,[96]]],[[205,[96]]]],[[[205,[99]],[205,[99]]],[[205,[99]]]],[[205,205]],[[[205,[25]],[205,[25]]],[[205,[25]]]],[[205,205]],[[206,206]],[[[206,[95]],[206,[95]]],[[206,[95]]]],[[[206,[99]],206]],[[[206,[25]],[206,[25]]],[[206,[25]]]],[[206,206]],[[206,206]],[[[206,[79]],206]],[[[206,[25]],206]],[[206,[206,[79]]]],[[[206,[100]],206]],[[206,206]],[[206,206]],[[206,[206,[52]]]],[[[206,[75]],[206,[75]]],[[206,[75]]]],[[[206,[96]],[206,[96]]],[[206,[96]]]],[[[206,[99]],[206,[99]]],[[206,[99]]]],[[206,[206,[101]]]],[[206,[206,[99]]]],[[206,[206,[98]]]],[[[206,[98]],[206,[98]]],[[206,[98]]]],[[206,[206,[100]]]],[[206,206]],[[206,206]],[[206,206]],[[[206,[27]],[206,[27]]],[[206,[27]]]],[[[206,[52]],206]],[[[206,[79]],[206,[79]]],[[206,[79]]]],[[206,[206,[27]]]],[[[206,[101]],206]],[[206,[206,[97]]]],[[[206,[27]],206]],[[206,206]],[[[206,[101]],[206,[101]]],[[206,[101]]]],[[[206,[97]],[206,[97]]],[[206,[97]]]],[[[206,[98]],206]],[[206,[206,[96]]]],[[206,206]],[[[206,[100]],[206,[100]]],[[206,[100]]]],[[[206,[97]],206]],[[[206,[52]],[206,[52]]],[[206,[52]]]],[[[206,[95]],206]],[[206,206]],[[206,206]],[[206,[206,[25]]]],[[[206,[96]],206]],[[[206,[75]],206]],[[206,[206,[75]]]],[[206,[206,[95]]]],[[[205,[25]],25]],[[[205,[27]],205]],[[[205,[101]],[205,[101]]]],[[[205,[98]],98]],[[[205,[27]],[205,[27]]]],[[[205,[95]],95]],[[[205,[97]],205]],[[[205,[79]],79]],[[[205,[98]],[205,[98]]]],[[[205,[52]],205]],[[[205,[99]],99]],[[[205,[79]],205]],[[[205,[75]],75]],[[[205,[101]],205]],[[[205,[98]],98]],[[[205,[25]],[205,[25]]]],[[[205,[100]],[205,[100]]]],[[[205,[75]],[205,[75]]]],[[[205,[95]],205]],[[[205,[98]],205]],[[[205,[100]],205]],[[[205,[25]],25]],[[[205,[25]],205]],[[[205,[75]],75]],[[[205,[52]],52]],[[[205,[79]],79]],[[[205,[97]],97]],[[[205,[101]],101]],[[[205,[52]],52]],[[[205,[95]],[205,[95]]]],[[[205,[75]],205]],[[[205,[99]],[205,[99]]]],[[[205,[99]],99]],[[[205,[79]],[205,[79]]]],[[[205,[101]],101]],[[[205,[52]],[205,[52]]]],[[[205,[100]],100]],[[[205,[99]],205]],[[[205,[95]],95]],[[[205,[97]],[205,[97]]]],[[[205,[96]],96]],[[[205,[96]],205]],[[[205,[100]],100]],[[[205,[27]],27]],[[[205,[27]],27]],[[[205,[97]],97]],[[[205,[96]],96]],[[[205,[96]],[205,[96]]]],[[[206,[25]],206]],[[[206,[96]],96]],[[[206,[25]],[206,[25]]]],[[[206,[95]],95]],[[[206,[96]],[206,[96]]]],[[[206,[101]],[206,[101]]]],[[[206,[100]],100]],[[[206,[98]],[206,[98]]]],[[[206,[75]],[206,[75]]]],[[[206,[98]],98]],[[[206,[95]],206]],[[[206,[95]],[206,[95]]]],[[[206,[97]],97]],[[[206,[95]],95]],[[[206,[75]],75]],[[[206,[99]],206]],[[[206,[97]],206]],[[[206,[100]],100]],[[[206,[79]],[206,[79]]]],[[[206,[52]],206]],[[[206,[99]],[206,[99]]]],[[[206,[52]],[206,[52]]]],[[[206,[79]],79]],[[[206,[98]],206]],[[[206,[96]],206]],[[[206,[100]],[206,[100]]]],[[[206,[101]],101]],[[[206,[97]],[206,[97]]]],[[[206,[101]],206]],[[[206,[97]],97]],[[[206,[27]],206]],[[[206,[25]],25]],[[[206,[99]],99]],[[[206,[99]],99]],[[[206,[27]],27]],[[[206,[25]],25]],[[[206,[52]],52]],[[[206,[101]],101]],[[[206,[52]],52]],[[[206,[27]],27]],[[[206,[75]],75]],[[[206,[27]],[206,[27]]]],[[[206,[79]],206]],[[[206,[79]],79]],[[[206,[100]],206]],[[[206,[75]],206]],[[[206,[96]],96]],[[[206,[98]],98]],[[[205,[79]]],[[205,[79]]]],[[[205,[97]]],[[205,[97]]]],[205],[[[205,[98]]],[[205,[98]]]],[205],[[[205,[99]]],[[205,[99]]]],[205],[[[205,[96]]],[[205,[96]]]],[205],[[[205,[95]]],[[205,[95]]]],[205],[205],[206],[[[206,[25]]],[[206,[25]]]],[[[206,[98]]],[[206,[98]]]],[[[206,[99]]],[[206,[99]]]],[[[206,[52]]],[[206,[52]]]],[206],[[[206,[100]]],[[206,[100]]]],[206],[206],[[[206,[95]]],[[206,[95]]]],[206],[206],[[[206,[96]]],[[206,[96]]]],[206],[206],[[[206,[27]]],[[206,[27]]]],[[[206,[79]]],[[206,[79]]]],[[[206,[97]]],[[206,[97]]]],[[[206,[101]]],[[206,[101]]]],[206],[206],[206],[206],[[[206,[75]]],[[206,[75]]]],[27,[[37,[207]]]],[101,[[37,[208]]]],[25,[[37,[209]]]],[52,[[37,[210]]]],[100,[[37,[211]]]],[75,[[37,[212]]]],[98,[[37,[199]]]],[96,[[37,[200]]]],[79,[[37,[201]]]],[97,[[37,[202]]]],[95,[[37,[203]]]],[99,[[37,[204]]]],[27,207],[101,208],[25,209],[52,210],[100,211],[75,212],[98,199],[96,200],[79,201],[97,202],[95,203],[99,204],[[[206,[27]]],[[206,[27]]]],[[[206,[100]]],[[206,[100]]]],[[[206,[75]]],[[206,[75]]]],[[[206,[52]]],[[206,[52]]]],[[[206,[25]]],[[206,[25]]]],[[[206,[101]]],[[206,[101]]]],[[[205,[27]]],[[205,[27]]]],[205],[[[205,[79]]],[[205,[79]]]],[[[205,[75]]],[[205,[75]]]],[[[205,[25]]],[[205,[25]]]],[[[205,[100]]],[[205,[100]]]],[[[205,[52]]],[[205,[52]]]],[205],[205],[[[205,[101]]],[[205,[101]]]],[205],[[[205,[99]]],[[205,[99]]]],[[[205,[97]]],[[205,[97]]]],[[[205,[98]]],[[205,[98]]]],[205],[205],[205],[205],[205],[[[205,[96]]],[[205,[96]]]],[205],[205],[[[205,[95]]],[[205,[95]]]],[205],[206],[[[206,[79]]],[[206,[79]]]],[[[206,[95]]],[[206,[95]]]],[[[206,[97]]],[[206,[97]]]],[206],[206],[206],[[[206,[101]]],[[206,[101]]]],[206],[[[206,[27]]],[[206,[27]]]],[[[206,[99]]],[[206,[99]]]],[[[206,[52]]],[[206,[52]]]],[[[206,[75]]],[[206,[75]]]],[206],[[[206,[100]]],[[206,[100]]]],[206],[206],[206],[206],[206],[[[206,[98]]],[[206,[98]]]],[206],[[[206,[25]]],[[206,[25]]]],[[[206,[96]]],[[206,[96]]]],[199],[200],[201],[202],[203],[204],[[207,207],[[37,[21]]]],[[208,208],[[37,[21]]]],[[209,209],[[37,[21]]]],[[210,210],[[37,[21]]]],[[211,211],[[37,[21]]]],[[212,212],[[37,[21]]]],[[199,199],[[37,[21]]]],[[200,200],[[37,[21]]]],[[201,201],[[37,[21]]]],[[202,202],[[37,[21]]]],[[203,203],[[37,[21]]]],[[204,204],[[37,[21]]]],[[205,205],[[37,[21]]]],[[206,206],[[37,[21]]]],[[[205,[25]],25],[[205,[25]]]],[[[205,[95]],25],[[205,[95]]]],[[[205,[96]],25],[[205,[96]]]],[[[205,[52]],25],[[205,[52]]]],[[[205,[79]],25],[[205,[79]]]],[[[205,[98]],25],[[205,[98]]]],[[[205,[101]],25],[[205,[101]]]],[[[205,[27]],25],[[205,[27]]]],[[[205,[97]],25],[[205,[97]]]],[[[205,[99]],25],[[205,[99]]]],[[[205,[75]],25],[[205,[75]]]],[[[205,[100]],25],[[205,[100]]]],[[[206,[25]],25],[[206,[25]]]],[[[206,[95]],25],[[206,[95]]]],[[[206,[27]],25],[[206,[27]]]],[[[206,[97]],25],[[206,[97]]]],[[[206,[79]],25],[[206,[79]]]],[[[206,[98]],25],[[206,[98]]]],[[[206,[96]],25],[[206,[96]]]],[[[206,[99]],25],[[206,[99]]]],[[[206,[101]],25],[[206,[101]]]],[[[206,[75]],25],[[206,[75]]]],[[[206,[52]],25],[[206,[52]]]],[[[206,[100]],25],[[206,[100]]]],[[],[[206,[99]]]],[[],[[206,[52]]]],[[],[[206,[25]]]],[[],[[206,[75]]]],[[],[[206,[79]]]],[[],[[206,[95]]]],[[],[[206,[95]]]],[[],[[206,[79]]]],[[],[[206,[97]]]],[[],[[206,[100]]]],[[],[[206,[25]]]],[[],[[206,[27]]]],[[],[[206,[101]]]],[[],[[206,[52]]]],[[],[[206,[96]]]],[[],[[206,[27]]]],[[],[[206,[100]]]],[[],[[206,[99]]]],[[],[[206,[98]]]],[[],[[206,[75]]]],[[],[[206,[97]]]],[[],[[206,[96]]]],[[],[[206,[101]]]],[[],[[206,[98]]]],[[[205,[99]],205]],[[205,205]],[[[205,[52]],[205,[52]]],[[205,[52]]]],[[[205,[27]],[205,[27]]],[[205,[27]]]],[[[205,[98]],[205,[98]]],[[205,[98]]]],[[205,[205,[25]]]],[[[205,[97]],205]],[[205,205]],[[205,[205,[79]]]],[[[205,[52]],205]],[[[205,[95]],205]],[[205,[205,[99]]]],[[[205,[79]],205]],[[[205,[79]],[205,[79]]],[[205,[79]]]],[[205,[205,[95]]]],[[[205,[101]],[205,[101]]],[[205,[101]]]],[[205,205]],[[205,205]],[[[205,[100]],[205,[100]]],[[205,[100]]]],[[205,[205,[75]]]],[[[205,[25]],205]],[[[205,[75]],[205,[75]]],[[205,[75]]]],[[[205,[27]],205]],[[205,205]],[[[205,[98]],205]],[[205,[205,[96]]]],[[205,[205,[100]]]],[[205,205]],[[205,205]],[[[205,[101]],205]],[[205,[205,[52]]]],[[[205,[97]],[205,[97]]],[[205,[97]]]],[[205,205]],[[[205,[75]],205]],[[[205,[96]],[205,[96]]],[[205,[96]]]],[[205,[205,[27]]]],[[205,205]],[[[205,[25]],[205,[25]]],[[205,[25]]]],[[205,205]],[[205,[205,[97]]]],[[205,[205,[98]]]],[[[205,[96]],205]],[[[205,[99]],[205,[99]]],[[205,[99]]]],[[[205,[100]],205]],[[[205,[95]],[205,[95]]],[[205,[95]]]],[[205,[205,[101]]]],[[205,205]],[[205,205]],[[206,206]],[[[206,[100]],206]],[[206,206]],[[[206,[52]],206]],[[206,206]],[[206,206]],[[[206,[96]],206]],[[[206,[97]],[206,[97]]],[[206,[97]]]],[[[206,[101]],206]],[[[206,[25]],206]],[[[206,[98]],[206,[98]]],[[206,[98]]]],[[206,206]],[[[206,[95]],[206,[95]]],[[206,[95]]]],[[206,206]],[[[206,[99]],[206,[99]]],[[206,[99]]]],[[[206,[27]],206]],[[206,[206,[27]]]],[[206,[206,[95]]]],[[206,[206,[79]]]],[[[206,[95]],206]],[[206,206]],[[[206,[98]],206]],[[[206,[25]],[206,[25]]],[[206,[25]]]],[[[206,[101]],[206,[101]]],[[206,[101]]]],[[[206,[100]],[206,[100]]],[[206,[100]]]],[[[206,[99]],206]],[[[206,[52]],[206,[52]]],[[206,[52]]]],[[206,[206,[52]]]],[[[206,[96]],[206,[96]]],[[206,[96]]]],[[206,[206,[97]]]],[[206,[206,[25]]]],[[206,[206,[75]]]],[[206,206]],[[206,[206,[99]]]],[[206,[206,[100]]]],[[206,[206,[101]]]],[[[206,[79]],206]],[[206,206]],[[206,206]],[[[206,[79]],[206,[79]]],[[206,[79]]]],[[[206,[75]],206]],[[206,[206,[96]]]],[[206,[206,[98]]]],[[206,206]],[[206,206]],[[[206,[27]],[206,[27]]],[[206,[27]]]],[[[206,[97]],206]],[[[206,[75]],[206,[75]]],[[206,[75]]]],[[[205,[99]],[205,[99]]]],[[[205,[75]],205]],[[[205,[25]],25]],[[[205,[95]],205]],[[[205,[98]],98]],[[[205,[101]],101]],[[[205,[98]],[205,[98]]]],[[[205,[79]],79]],[[[205,[25]],[205,[25]]]],[[[205,[95]],95]],[[[205,[52]],52]],[[[205,[75]],75]],[[[205,[99]],99]],[[[205,[75]],[205,[75]]]],[[[205,[52]],205]],[[[205,[96]],96]],[[[205,[97]],[205,[97]]]],[[[205,[97]],97]],[[[205,[100]],205]],[[[205,[27]],205]],[[[205,[25]],205]],[[[205,[96]],205]],[[[205,[95]],95]],[[[205,[101]],[205,[101]]]],[[[205,[52]],52]],[[[205,[100]],100]],[[[205,[99]],205]],[[[205,[100]],100]],[[[205,[25]],25]],[[[205,[100]],[205,[100]]]],[[[205,[101]],205]],[[[205,[95]],[205,[95]]]],[[[205,[97]],97]],[[[205,[98]],98]],[[[205,[79]],[205,[79]]]],[[[205,[99]],99]],[[[205,[98]],205]],[[[205,[52]],[205,[52]]]],[[[205,[27]],27]],[[[205,[79]],205]],[[[205,[79]],79]],[[[205,[27]],[205,[27]]]],[[[205,[97]],205]],[[[205,[101]],101]],[[[205,[27]],27]],[[[205,[96]],[205,[96]]]],[[[205,[75]],75]],[[[205,[96]],96]],[[[206,[79]],79]],[[[206,[27]],27]],[[[206,[25]],25]],[[[206,[100]],100]],[[[206,[98]],206]],[[[206,[79]],[206,[79]]]],[[[206,[100]],[206,[100]]]],[[[206,[79]],79]],[[[206,[99]],99]],[[[206,[97]],97]],[[[206,[27]],206]],[[[206,[75]],75]],[[[206,[75]],[206,[75]]]],[[[206,[52]],52]],[[[206,[98]],98]],[[[206,[99]],206]],[[[206,[52]],52]],[[[206,[101]],101]],[[[206,[95]],95]],[[[206,[101]],101]],[[[206,[25]],25]],[[[206,[96]],[206,[96]]]],[[[206,[98]],98]],[[[206,[27]],[206,[27]]]],[[[206,[75]],75]],[[[206,[75]],206]],[[[206,[100]],206]],[[[206,[25]],[206,[25]]]],[[[206,[79]],206]],[[[206,[101]],[206,[101]]]],[[[206,[99]],[206,[99]]]],[[[206,[96]],96]],[[[206,[96]],96]],[[[206,[98]],[206,[98]]]],[[[206,[100]],100]],[[[206,[97]],206]],[[[206,[52]],[206,[52]]]],[[[206,[95]],[206,[95]]]],[[[206,[101]],206]],[[[206,[95]],95]],[[[206,[99]],99]],[[[206,[25]],206]],[[[206,[95]],206]],[[[206,[27]],27]],[[[206,[97]],97]],[[[206,[52]],206]],[[[206,[96]],206]],[[[206,[97]],[206,[97]]]],[[[205,[27]]],[[205,[27]]]],[[[205,[98]]],[[205,[98]]]],[[[205,[101]]],[[205,[101]]]],[[[205,[75]]],[[205,[75]]]],[[[205,[96]]],[[205,[96]]]],[[[205,[97]]],[[205,[97]]]],[[[205,[52]]],[[205,[52]]]],[[[205,[25]]],[[205,[25]]]],[[[205,[95]]],[[205,[95]]]],[[[205,[99]]],[[205,[99]]]],[[[205,[79]]],[[205,[79]]]],[[[205,[100]]],[[205,[100]]]],[[[206,[97]]],[[206,[97]]]],[[[206,[96]]],[[206,[96]]]],[[[206,[75]]],[[206,[75]]]],[[[206,[52]]],[[206,[52]]]],[[[206,[101]]],[[206,[101]]]],[[[206,[27]]],[[206,[27]]]],[[[206,[99]]],[[206,[99]]]],[[[206,[79]]],[[206,[79]]]],[[[206,[98]]],[[206,[98]]]],[[[206,[100]]],[[206,[100]]]],[[[206,[25]]],[[206,[25]]]],[[[206,[95]]],[[206,[95]]]],[[[205,[99]],25],[[205,[99]]]],[[[205,[79]],25],[[205,[79]]]],[[[205,[98]],25],[[205,[98]]]],[[[205,[52]],25],[[205,[52]]]],[[[205,[25]],25],[[205,[25]]]],[[[205,[96]],25],[[205,[96]]]],[[[205,[75]],25],[[205,[75]]]],[[[205,[101]],25],[[205,[101]]]],[[[205,[97]],25],[[205,[97]]]],[[[205,[100]],25],[[205,[100]]]],[[[205,[95]],25],[[205,[95]]]],[[[205,[27]],25],[[205,[27]]]],[[[206,[101]],25],[[206,[101]]]],[[[206,[97]],25],[[206,[97]]]],[[[206,[99]],25],[[206,[99]]]],[[[206,[27]],25],[[206,[27]]]],[[[206,[25]],25],[[206,[25]]]],[[[206,[96]],25],[[206,[96]]]],[[[206,[75]],25],[[206,[75]]]],[[[206,[95]],25],[[206,[95]]]],[[[206,[79]],25],[[206,[79]]]],[[[206,[98]],25],[[206,[98]]]],[[[206,[52]],25],[[206,[52]]]],[[[206,[100]],25],[[206,[100]]]],[[[205,[25]],25],[[205,[25]]]],[[[205,[98]],25],[[205,[98]]]],[[[205,[97]],25],[[205,[97]]]],[[[205,[95]],25],[[205,[95]]]],[[[205,[101]],25],[[205,[101]]]],[[[205,[99]],25],[[205,[99]]]],[[[205,[96]],25],[[205,[96]]]],[[[205,[100]],25],[[205,[100]]]],[[[205,[75]],25],[[205,[75]]]],[[[205,[27]],25],[[205,[27]]]],[[[205,[79]],25],[[205,[79]]]],[[[205,[52]],25],[[205,[52]]]],[[[206,[79]],25],[[206,[79]]]],[[[206,[98]],25],[[206,[98]]]],[[[206,[97]],25],[[206,[97]]]],[[[206,[75]],25],[[206,[75]]]],[[[206,[25]],25],[[206,[25]]]],[[[206,[52]],25],[[206,[52]]]],[[[206,[27]],25],[[206,[27]]]],[[[206,[99]],25],[[206,[99]]]],[[[206,[95]],25],[[206,[95]]]],[[[206,[100]],25],[[206,[100]]]],[[[206,[96]],25],[[206,[96]]]],[[[206,[101]],25],[[206,[101]]]],[199,199],[200,200],[201,201],[202,202],[203,203],[204,204],[[207,27],207],[[208,101],208],[[209,25],209],[[210,52],210],[[211,100],211],[[212,75],212],[[207,207],207],[[208,208],208],[[209,209],209],[[210,210],210],[[211,211],211],[[212,212],212],[[199,199],199],[[200,200],200],[[201,201],201],[[202,202],202],[[203,203],203],[[204,204],204],[[207,25],207],[[208,25],208],[[209,25],209],[[210,25],210],[[211,25],211],[[212,25],212],[[199,25],199],[[200,25],200],[[201,25],201],[[202,25],202],[[203,25],203],[[204,25],204],[207,24],[208,24],[209,24],[210,24],[211,24],[212,24],[199,24],[200,24],[201,24],[202,24],[203,24],[204,24],[206,24],[[[205,[79]],75]],[[[205,[52]],75],[[205,[52]]]],[[205,75]],[[205,75]],[[[205,[75]],75]],[[[205,[25]],75],[[205,[25]]]],[[205,75]],[[[205,[101]],75],[[205,[101]]]],[[205,75]],[[205,75]],[[205,75]],[[205,75]],[[[205,[96]],75],[[205,[96]]]],[[[205,[98]],75]],[[205,75]],[[205,75]],[[205,75]],[[[205,[95]],75],[[205,[95]]]],[[205,75]],[[205,75]],[[[205,[97]],75]],[[[205,[99]],75]],[[[205,[25]],75]],[[[205,[75]],75],[[205,[75]]]],[[[205,[79]],75],[[205,[79]]]],[[205,75]],[[205,75]],[[[205,[101]],75]],[[[205,[100]],75],[[205,[100]]]],[[[205,[27]],75]],[[205,75]],[[205,75]],[[205,75]],[[[205,[99]],75],[[205,[99]]]],[[205,75]],[[205,75]],[[[205,[96]],75]],[[[205,[27]],75],[[205,[27]]]],[[[205,[52]],75]],[[[205,[100]],75]],[[[205,[95]],75]],[[205,75]],[[205,75]],[[205,75]],[[[205,[97]],75],[[205,[97]]]],[[205,75]],[[[205,[98]],75],[[205,[98]]]],[[205,75]],[[[206,[99]],75],[[206,[99]]]],[[[206,[99]],75]],[[[206,[98]],75]],[[[206,[100]],75]],[[206,75]],[[206,75]],[[206,75]],[[206,75]],[[[206,[95]],75]],[[[206,[25]],75],[[206,[25]]]],[[206,75]],[[206,75]],[[206,75]],[[206,75]],[[206,75]],[[206,75]],[[[206,[27]],75]],[[[206,[79]],75]],[[206,75]],[[[206,[101]],75]],[[206,75]],[[206,75]],[[[206,[52]],75]],[[[206,[75]],75]],[[[206,[52]],75],[[206,[52]]]],[[206,75]],[[[206,[100]],75],[[206,[100]]]],[[206,75]],[[[206,[25]],75]],[[206,75]],[[[206,[97]],75],[[206,[97]]]],[[[206,[27]],75],[[206,[27]]]],[[[206,[96]],75]],[[206,75]],[[206,75]],[[206,75]],[[[206,[98]],75],[[206,[98]]]],[[206,75]],[[206,75]],[[206,75]],[[[206,[101]],75],[[206,[101]]]],[[[206,[79]],75],[[206,[79]]]],[[[206,[95]],75],[[206,[95]]]],[[[206,[96]],75],[[206,[96]]]],[[206,75]],[[[206,[97]],75]],[[206,75]],[[[206,[75]],75],[[206,[75]]]],[[[205,[101]],75]],[[[205,[79]],75]],[[[205,[97]],75]],[[[205,[99]],75]],[[[205,[96]],75]],[[[205,[95]],75]],[[[205,[27]],75]],[[[205,[98]],75]],[[[205,[101]],75]],[[[205,[79]],75]],[[[205,[52]],75]],[[[205,[75]],75]],[[[205,[96]],75]],[[[205,[100]],75]],[[[205,[98]],75]],[[[205,[27]],75]],[[[205,[97]],75]],[[[205,[99]],75]],[[[205,[75]],75]],[[[205,[25]],75]],[[[205,[52]],75]],[[[205,[25]],75]],[[[205,[95]],75]],[[[205,[100]],75]],[[[206,[52]],75]],[[[206,[95]],75]],[[[206,[97]],75]],[[[206,[97]],75]],[[[206,[100]],75]],[[[206,[96]],75]],[[[206,[96]],75]],[[[206,[75]],75]],[[[206,[25]],75]],[[[206,[75]],75]],[[[206,[27]],75]],[[[206,[99]],75]],[[[206,[79]],75]],[[[206,[101]],75]],[[[206,[98]],75]],[[[206,[79]],75]],[[[206,[100]],75]],[[[206,[98]],75]],[[[206,[95]],75]],[[[206,[52]],75]],[[[206,[25]],75]],[[[206,[101]],75]],[[[206,[27]],75]],[[[206,[99]],75]],[[[205,[95]],75],[[205,[95]]]],[[205,75]],[[[205,[52]],75]],[[205,75]],[[205,75]],[[[205,[75]],75]],[[205,75]],[[[205,[97]],75],[[205,[97]]]],[[205,75]],[[205,75]],[[[205,[98]],75],[[205,[98]]]],[[205,75]],[[[205,[27]],75]],[[[205,[101]],75]],[[205,75]],[[205,75]],[[[205,[100]],75]],[[[205,[99]],75],[[205,[99]]]],[[[205,[98]],75]],[[[205,[96]],75],[[205,[96]]]],[[205,75]],[[[205,[75]],75],[[205,[75]]]],[[205,75]],[[[205,[52]],75],[[205,[52]]]],[[[205,[79]],75],[[205,[79]]]],[[205,75]],[[205,75]],[[205,75]],[[[205,[97]],75]],[[205,75]],[[[205,[99]],75]],[[[205,[79]],75]],[[205,75]],[[[205,[96]],75]],[[205,75]],[[205,75]],[[[205,[100]],75],[[205,[100]]]],[[[205,[101]],75],[[205,[101]]]],[[[205,[25]],75]],[[205,75]],[[205,75]],[[205,75]],[[205,75]],[[205,75]],[[[205,[25]],75],[[205,[25]]]],[[[205,[95]],75]],[[205,75]],[[[205,[27]],75],[[205,[27]]]],[[206,75]],[[[206,[101]],75]],[[206,75]],[[[206,[95]],75]],[[206,75]],[[206,75]],[[206,75]],[[[206,[96]],75],[[206,[96]]]],[[206,75]],[[[206,[100]],75],[[206,[100]]]],[[[206,[25]],75]],[[206,75]],[[[206,[27]],75],[[206,[27]]]],[[206,75]],[[[206,[98]],75]],[[206,75]],[[[206,[96]],75]],[[206,75]],[[[206,[99]],75],[[206,[99]]]],[[206,75]],[[[206,[97]],75]],[[[206,[52]],75]],[[[206,[79]],75]],[[[206,[75]],75],[[206,[75]]]],[[206,75]],[[[206,[99]],75]],[[206,75]],[[206,75]],[[206,75]],[[[206,[97]],75],[[206,[97]]]],[[206,75]],[[206,75]],[[[206,[98]],75],[[206,[98]]]],[[206,75]],[[[206,[101]],75],[[206,[101]]]],[[[206,[75]],75]],[[206,75]],[[[206,[52]],75],[[206,[52]]]],[[206,75]],[[[206,[27]],75]],[[206,75]],[[[206,[95]],75],[[206,[95]]]],[[206,75]],[[206,75]],[[[206,[79]],75],[[206,[79]]]],[[[206,[100]],75]],[[[206,[25]],75],[[206,[25]]]],[[206,75]],[[[205,[96]],75]],[[[205,[96]],75]],[[[205,[27]],75]],[[[205,[101]],75]],[[[205,[25]],75]],[[[205,[27]],75]],[[[205,[79]],75]],[[[205,[79]],75]],[[[205,[95]],75]],[[[205,[98]],75]],[[[205,[99]],75]],[[[205,[95]],75]],[[[205,[100]],75]],[[[205,[75]],75]],[[[205,[100]],75]],[[[205,[52]],75]],[[[205,[99]],75]],[[[205,[52]],75]],[[[205,[98]],75]],[[[205,[97]],75]],[[[205,[97]],75]],[[[205,[25]],75]],[[[205,[101]],75]],[[[205,[75]],75]],[[[206,[100]],75]],[[[206,[75]],75]],[[[206,[95]],75]],[[[206,[25]],75]],[[[206,[27]],75]],[[[206,[97]],75]],[[[206,[96]],75]],[[[206,[101]],75]],[[[206,[79]],75]],[[[206,[52]],75]],[[[206,[52]],75]],[[[206,[25]],75]],[[[206,[100]],75]],[[[206,[97]],75]],[[[206,[27]],75]],[[[206,[79]],75]],[[[206,[99]],75]],[[[206,[96]],75]],[[[206,[101]],75]],[[[206,[99]],75]],[[[206,[75]],75]],[[[206,[98]],75]],[[[206,[98]],75]],[[[206,[95]],75]],[[[205,[97]]],[[205,[97]]]],[[[205,[79]]],[[205,[79]]]],[[[205,[98]]],[[205,[98]]]],[[[205,[95]]],[[205,[95]]]],[[[205,[99]]],[[205,[99]]]],[[[205,[96]]],[[205,[96]]]],[[[206,[99]]],[[206,[99]]]],[[[206,[98]]],[[206,[98]]]],[[[206,[96]]],[[206,[96]]]],[[[206,[79]]],[[206,[79]]]],[[[206,[97]]],[[206,[97]]]],[[[206,[95]]],[[206,[95]]]],[207,75],[208,75],[209,75],[210,75],[211,75],[199,75],[200,75],[201,75],[202,75],[203,75],[[[205,[100]],[205,[100]]],[[205,[100]]]],[[[205,[52]],205]],[[205,205]],[[205,205]],[[205,[205,[97]]]],[[205,205]],[[205,205]],[[205,[205,[52]]]],[[[205,[101]],[205,[101]]],[[205,[101]]]],[[[205,[25]],205]],[[[205,[95]],205]],[[[205,[25]],[205,[25]]],[[205,[25]]]],[[[205,[99]],205]],[[[205,[75]],[205,[75]]],[[205,[75]]]],[[[205,[101]],205]],[[205,[205,[75]]]],[[205,[205,[99]]]],[[205,205]],[[205,[205,[100]]]],[[[205,[79]],[205,[79]]],[[205,[79]]]],[[205,205]],[[205,[205,[25]]]],[[205,[205,[96]]]],[[[205,[98]],[205,[98]]],[[205,[98]]]],[[[205,[97]],205]],[[205,205]],[[[205,[52]],[205,[52]]],[[205,[52]]]],[[205,[205,[95]]]],[[[205,[27]],205]],[[[205,[75]],205]],[[205,205]],[[205,205]],[[[205,[96]],[205,[96]]],[[205,[96]]]],[[[205,[98]],205]],[[[205,[79]],205]],[[[205,[99]],[205,[99]]],[[205,[99]]]],[[205,[205,[27]]]],[[[205,[97]],[205,[97]]],[[205,[97]]]],[[205,[205,[98]]]],[[205,205]],[[[205,[27]],[205,[27]]],[[205,[27]]]],[[[205,[95]],[205,[95]]],[[205,[95]]]],[[205,[205,[79]]]],[[205,205]],[[[205,[100]],205]],[[205,[205,[101]]]],[[[205,[96]],205]],[[205,205]],[[206,206]],[[[206,[79]],[206,[79]]],[[206,[79]]]],[[[206,[98]],206]],[[206,206]],[[206,[206,[98]]]],[[[206,[96]],206]],[[206,[206,[97]]]],[[206,[206,[25]]]],[[[206,[75]],206]],[[[206,[52]],206]],[[206,206]],[[206,[206,[27]]]],[[206,[206,[95]]]],[[206,[206,[101]]]],[[[206,[96]],[206,[96]]],[[206,[96]]]],[[[206,[97]],[206,[97]]],[[206,[97]]]],[[[206,[25]],206]],[[206,206]],[[[206,[27]],206]],[[206,206]],[[[206,[75]],[206,[75]]],[[206,[75]]]],[[206,[206,[96]]]],[[[206,[99]],[206,[99]]],[[206,[99]]]],[[206,206]],[[206,[206,[79]]]],[[206,[206,[100]]]],[[206,206]],[[[206,[99]],206]],[[[206,[95]],206]],[[206,206]],[[[206,[52]],[206,[52]]],[[206,[52]]]],[[[206,[95]],[206,[95]]],[[206,[95]]]],[[[206,[79]],206]],[[[206,[25]],[206,[25]]],[[206,[25]]]],[[206,[206,[52]]]],[[206,[206,[99]]]],[[[206,[97]],206]],[[[206,[101]],206]],[[[206,[27]],[206,[27]]],[[206,[27]]]],[[206,206]],[[206,[206,[75]]]],[[206,206]],[[[206,[101]],[206,[101]]],[[206,[101]]]],[[206,206]],[[[206,[100]],206]],[[[206,[98]],[206,[98]]],[[206,[98]]]],[[206,206]],[[[206,[100]],[206,[100]]],[[206,[100]]]],[[[205,[27]],27]],[[[205,[25]],25]],[[[205,[97]],205]],[[[205,[52]],[205,[52]]]],[[[205,[95]],205]],[[[205,[95]],[205,[95]]]],[[[205,[101]],101]],[[[205,[25]],[205,[25]]]],[[[205,[95]],95]],[[[205,[100]],100]],[[[205,[27]],205]],[[[205,[75]],205]],[[[205,[75]],[205,[75]]]],[[[205,[79]],79]],[[[205,[100]],100]],[[[205,[97]],97]],[[[205,[52]],52]],[[[205,[101]],205]],[[[205,[98]],98]],[[[205,[75]],75]],[[[205,[95]],95]],[[[205,[52]],205]],[[[205,[98]],98]],[[[205,[99]],[205,[99]]]],[[[205,[96]],96]],[[[205,[27]],[205,[27]]]],[[[205,[25]],205]],[[[205,[99]],99]],[[[205,[97]],[205,[97]]]],[[[205,[96]],205]],[[[205,[96]],[205,[96]]]],[[[205,[96]],96]],[[[205,[99]],205]],[[[205,[97]],97]],[[[205,[101]],101]],[[[205,[25]],25]],[[[205,[75]],75]],[[[205,[100]],205]],[[[205,[79]],[205,[79]]]],[[[205,[98]],[205,[98]]]],[[[205,[79]],79]],[[[205,[79]],205]],[[[205,[52]],52]],[[[205,[100]],[205,[100]]]],[[[205,[101]],[205,[101]]]],[[[205,[27]],27]],[[[205,[99]],99]],[[[205,[98]],205]],[[[206,[99]],[206,[99]]]],[[[206,[98]],206]],[[[206,[99]],99]],[[[206,[100]],100]],[[[206,[96]],[206,[96]]]],[[[206,[27]],27]],[[[206,[52]],206]],[[[206,[97]],97]],[[[206,[101]],101]],[[[206,[99]],99]],[[[206,[100]],[206,[100]]]],[[[206,[79]],79]],[[[206,[75]],206]],[[[206,[101]],[206,[101]]]],[[[206,[75]],[206,[75]]]],[[[206,[97]],[206,[97]]]],[[[206,[27]],[206,[27]]]],[[[206,[25]],25]],[[[206,[27]],206]],[[[206,[79]],79]],[[[206,[98]],98]],[[[206,[52]],[206,[52]]]],[[[206,[101]],206]],[[[206,[27]],27]],[[[206,[95]],[206,[95]]]],[[[206,[95]],95]],[[[206,[79]],206]],[[[206,[100]],100]],[[[206,[96]],96]],[[[206,[25]],[206,[25]]]],[[[206,[95]],206]],[[[206,[52]],52]],[[[206,[95]],95]],[[[206,[98]],[206,[98]]]],[[[206,[52]],52]],[[[206,[97]],206]],[[[206,[101]],101]],[[[206,[97]],97]],[[[206,[25]],25]],[[[206,[75]],75]],[[[206,[79]],[206,[79]]]],[[[206,[98]],98]],[[[206,[99]],206]],[[[206,[25]],206]],[[[206,[96]],206]],[[[206,[100]],206]],[[[206,[75]],75]],[[[206,[96]],96]],[[],[[206,[101]]]],[[],[[206,[96]]]],[[],[[206,[99]]]],[[],[[206,[97]]]],[[],[[206,[98]]]],[[],[[206,[95]]]],[[],[[206,[52]]]],[[],[[206,[75]]]],[[],[[206,[27]]]],[[],[[206,[75]]]],[[],[[206,[25]]]],[[],[[206,[99]]]],[[],[[206,[95]]]],[[],[[206,[100]]]],[[],[[206,[25]]]],[[],[[206,[98]]]],[[],[[206,[27]]]],[[],[[206,[101]]]],[[],[[206,[97]]]],[[],[[206,[52]]]],[[],[[206,[96]]]],[[],[[206,[100]]]],[[],[[206,[79]]]],[[],[[206,[79]]]],[[[205,[99]]],[[205,[99]]]],[[[205,[95]]],[[205,[95]]]],[[[205,[27]]],[[205,[27]]]],[[[205,[98]]],[[205,[98]]]],[[[205,[101]]],[[205,[101]]]],[[[205,[25]]],[[205,[25]]]],[[[205,[97]]],[[205,[97]]]],[[[205,[96]]],[[205,[96]]]],[[[205,[100]]],[[205,[100]]]],[[[205,[52]]],[[205,[52]]]],[[[205,[79]]],[[205,[79]]]],[[[205,[75]]],[[205,[75]]]],[[[206,[99]]],[[206,[99]]]],[[[206,[97]]],[[206,[97]]]],[[[206,[79]]],[[206,[79]]]],[[[206,[27]]],[[206,[27]]]],[[[206,[96]]],[[206,[96]]]],[[[206,[75]]],[[206,[75]]]],[[[206,[100]]],[[206,[100]]]],[[[206,[101]]],[[206,[101]]]],[[[206,[25]]],[[206,[25]]]],[[[206,[95]]],[[206,[95]]]],[[[206,[52]]],[[206,[52]]]],[[[206,[98]]],[[206,[98]]]],[[[205,[79]]],[[205,[79]]]],[[[205,[97]]],[[205,[97]]]],[[[205,[100]]],[[205,[100]]]],[[[205,[52]]],[[205,[52]]]],[[[205,[99]]],[[205,[99]]]],[[[205,[75]]],[[205,[75]]]],[[[205,[96]]],[[205,[96]]]],[[[205,[27]]],[[205,[27]]]],[[[205,[25]]],[[205,[25]]]],[[[205,[98]]],[[205,[98]]]],[[[205,[101]]],[[205,[101]]]],[[[205,[95]]],[[205,[95]]]],[[[206,[52]]],[[206,[52]]]],[[[206,[100]]],[[206,[100]]]],[[[206,[25]]],[[206,[25]]]],[[[206,[27]]],[[206,[27]]]],[[[206,[101]]],[[206,[101]]]],[[[206,[98]]],[[206,[98]]]],[[[206,[79]]],[[206,[79]]]],[[[206,[99]]],[[206,[99]]]],[[[206,[75]]],[[206,[75]]]],[[[206,[95]]],[[206,[95]]]],[[[206,[96]]],[[206,[96]]]],[[[206,[97]]],[[206,[97]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[[205,[79]]],[[205,[79]]]],[[[205,[98]]],[[205,[98]]]],[[[205,[95]]],[[205,[95]]]],[[[205,[99]]],[[205,[99]]]],[[[205,[52]]],[[205,[52]]]],[[[205,[97]]],[[205,[97]]]],[[[205,[101]]],[[205,[101]]]],[[[205,[25]]],[[205,[25]]]],[[[205,[100]]],[[205,[100]]]],[[[205,[27]]],[[205,[27]]]],[[[205,[75]]],[[205,[75]]]],[[[205,[96]]],[[205,[96]]]],[[[206,[100]]],[[206,[100]]]],[[[206,[97]]],[[206,[97]]]],[[[206,[96]]],[[206,[96]]]],[[[206,[99]]],[[206,[99]]]],[[[206,[98]]],[[206,[98]]]],[[[206,[27]]],[[206,[27]]]],[[[206,[75]]],[[206,[75]]]],[[[206,[25]]],[[206,[25]]]],[[[206,[95]]],[[206,[95]]]],[[[206,[79]]],[[206,[79]]]],[[[206,[52]]],[[206,[52]]]],[[[206,[101]]],[[206,[101]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[207,25],[208,25],[209,25],[210,25],[211,25],[212,25],[199,25],[200,25],[201,25],[202,25],[203,25],[204,25],[[[205,[101]]],25],[[[205,[79]]],25],[[[205,[52]]],25],[[[205,[27]]],25],[[[205,[95]]],25],[[[205,[97]]],25],[[[205,[75]]],25],[[[205,[96]]],25],[[[205,[98]]],25],[[[205,[100]]],25],[[[205,[99]]],25],[[[205,[25]]],25],[[[206,[98]]],25],[[[206,[75]]],25],[[[206,[52]]],25],[[[206,[100]]],25],[[[206,[99]]],25],[[[206,[79]]],25],[[[206,[95]]],25],[[[206,[97]]],25],[[[206,[96]]],25],[[[206,[27]]],25],[[[206,[25]]],25],[[[206,[101]]],25],[[],24],[[],24],[[],24],[[],24],[199,[[24,[207]]]],[27,[[24,[207]]]],[202,[[24,[207]]]],[[],24],[204,[[24,[207]]]],[212,[[24,[207]]]],[210,[[24,[207]]]],[211,[[24,[207]]]],[201,[[24,[207]]]],[208,[[24,[207]]]],[209,[[24,[207]]]],[203,[[24,[207]]]],[200,[[24,[207]]]],[199,[[24,[208]]]],[200,[[24,[208]]]],[204,[[24,[208]]]],[201,[[24,[208]]]],[101,[[24,[208]]]],[210,[[24,[208]]]],[209,[[24,[208]]]],[203,[[24,[208]]]],[202,[[24,[208]]]],[[],24],[211,[[24,[208]]]],[212,[[24,[208]]]],[202,[[24,[209]]]],[201,[[24,[209]]]],[210,[[24,[209]]]],[199,[[24,[209]]]],[204,[[24,[209]]]],[211,[[24,[209]]]],[200,[[24,[209]]]],[203,[[24,[209]]]],[[],24],[25,[[24,[209]]]],[212,[[24,[209]]]],[212,[[24,[210]]]],[204,[[24,[210]]]],[52,[[24,[210]]]],[201,[[24,[210]]]],[202,[[24,[210]]]],[200,[[24,[210]]]],[211,[[24,[210]]]],[199,[[24,[210]]]],[[],24],[203,[[24,[210]]]],[204,[[24,[211]]]],[200,[[24,[211]]]],[100,[[24,[211]]]],[[],24],[201,[[24,[211]]]],[212,[[24,[211]]]],[202,[[24,[211]]]],[199,[[24,[211]]]],[203,[[24,[211]]]],[199,[[24,[212]]]],[204,[[24,[212]]]],[75,[[24,[212]]]],[200,[[24,[212]]]],[202,[[24,[212]]]],[209,[[24,[212]]]],[210,[[24,[212]]]],[201,[[24,[212]]]],[203,[[24,[212]]]],[[],24],[211,[[24,[212]]]],[98,[[24,[199]]]],[208,[[24,[199]]]],[210,[[24,[199]]]],[203,[[24,[199]]]],[212,[[24,[199]]]],[202,[[24,[199]]]],[209,[[24,[199]]]],[211,[[24,[199]]]],[207,[[24,[199]]]],[[],24],[200,[[24,[199]]]],[201,[[24,[199]]]],[204,[[24,[199]]]],[211,[[24,[200]]]],[209,[[24,[200]]]],[201,[[24,[200]]]],[210,[[24,[200]]]],[202,[[24,[200]]]],[96,[[24,[200]]]],[204,[[24,[200]]]],[203,[[24,[200]]]],[[],24],[212,[[24,[200]]]],[208,[[24,[200]]]],[[],24],[212,[[24,[201]]]],[210,[[24,[201]]]],[209,[[24,[201]]]],[203,[[24,[201]]]],[202,[[24,[201]]]],[204,[[24,[201]]]],[211,[[24,[201]]]],[79,[[24,[201]]]],[204,[[24,[202]]]],[[],24],[211,[[24,[202]]]],[97,[[24,[202]]]],[212,[[24,[202]]]],[210,[[24,[202]]]],[203,[[24,[202]]]],[212,[[24,[203]]]],[204,[[24,[203]]]],[[],24],[95,[[24,[203]]]],[211,[[24,[203]]]],[210,[[24,[204]]]],[211,[[24,[204]]]],[209,[[24,[204]]]],[99,[[24,[204]]]],[202,[[24,[204]]]],[203,[[24,[204]]]],[201,[[24,[204]]]],[[],24],[212,[[24,[204]]]],[208,[[24,[204]]]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[207,27],207],[[208,101],208],[[209,25],209],[[210,52],210],[[211,100],211],[[212,75],212],[[207,207],207],[[208,208],208],[[209,209],209],[[210,210],210],[[211,211],211],[[212,212],212],[[199,199],199],[[200,200],200],[[201,201],201],[[202,202],202],[[203,203],203],[[204,204],204],[199,207],[200,208],[201,209],[202,210],[203,211],[204,212],[207],[208],[209],[210],[211],[199],[200],[201],[202],[203],[199,199],[200,200],[201,201],[202,202],[203,203],[204,204],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[219,75],[[24,[75]]]],[[219,75],[[24,[75]]]],[220,220],[220,220],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],221],[221,221],[221,37],[[]],[[]],[[]],[221,221],[91,91],[222,222],[219,219],[223,223],[224,224],[225,225],[226,226],[220,220],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[220,220],[[91,91],21],[[],29],[219,29],[223,29],[224,29],[225,29],[226,29],[221,37],[[],[[24,[219,23]]]],[[],[[24,[225,23]]]],[[],[[24,[23]]]],[[],[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[[],222],[[],219],[[]],[[]],[[],[[24,[219]]]],[[],[[24,[225]]]],[[],[[24,[220]]]],[[]],[[]],[[]],[219,[[28,[27,42]]]],[225,[[28,[27,42]]]],[225],0,0,0,[[],220],[222,220],[219,220],[219,220],[223,220],[223,220],[224,220],[224,220],[225,220],[225,220],[226,220],[226,220],[[221,221],29],[[91,91],29],[[222,222],29],[[219,219],29],[[223,223],29],[[224,224],29],[[225,225],29],[[226,226],29],[[220,220],29],[[221,32],[[24,[33]]]],[[91,32],[[24,[33]]]],[[222,32],[[24,[33]]]],[[219,32],[[24,[33]]]],[[223,32],[[24,[33]]]],[[224,32],[[24,[33]]]],[[225,32],[[24,[33]]]],[[226,32],[[24,[33]]]],[[220,32],[[24,[33]]]],[[227,32],[[24,[33]]]],[225],[[]],[[]],[[]],[228,[[219,[229]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],221],[[]],[[[221,[218]]],221],[222,37],[222,37],[[222,38],37],[[[219,[75]]],37],[[[219,[75]]],37],[[[219,[75]],38],37],[[[223,[75]],38],37],[[[223,[75]]],37],[[[223,[75]]],37],[[[224,[75]]],37],[[[224,[75]]],37],[[[224,[75]],38],37],[[[225,[75]],38],37],[[[225,[75]]],37],[[[225,[75]]],37],[[[226,[75]],38],37],[[[226,[75]]],37],[[[226,[75]]],37],[[222,38],37],[222,37],[222,37],[[[219,[75]],38],37],[[[219,[75]]],37],[[[219,[75]]],37],[[[223,[75]]],37],[[[223,[75]]],37],[[[223,[75]],38],37],[[[224,[75]]],37],[[[224,[75]]],37],[[[224,[75]],38],37],[[[225,[75]]],37],[[[225,[75]]],37],[[[225,[75]],38],37],[[[226,[75]]],37],[[[226,[75]]],37],[[[226,[75]],38],37],[222],[222],[[222,38]],[[[219,[75]]]],[[[219,[75]]]],[[[219,[75]],38]],[[[223,[75]],38]],[[[223,[75]]]],[[[223,[75]]]],[[[224,[75]],38]],[[[224,[75]]]],[[[224,[75]]]],[[[225,[75]]]],[[[225,[75]],38]],[[[225,[75]]]],[[[226,[75]]]],[[[226,[75]]]],[[[226,[75]],38]],[222],[[222,38]],[222],[[[219,[75]],38]],[[[219,[75]]]],[[[219,[75]]]],[[[223,[75]]]],[[[223,[75]],38]],[[[223,[75]]]],[[[224,[75]]]],[[[224,[75]]]],[[[224,[75]],38]],[[[225,[75]]]],[[[225,[75]],38]],[[[225,[75]]]],[[[226,[75]]]],[[[226,[75]]]],[[[226,[75]],38]],[91],[222],[219],[223],[224],[225],[226],[220],[[]],[222],[222],[[222,38]],[[[219,[75]]]],[[[219,[75]]]],[[[219,[75]],38]],[[[223,[75]]]],[[[223,[75]],38]],[[[223,[75]]]],[[[224,[75]]]],[[[224,[75]]]],[[[224,[75]],38]],[[[225,[75]]]],[[[225,[75]]]],[[[225,[75]],38]],[[[226,[75]]]],[[[226,[75]],38]],[[[226,[75]]]],[[]],[[222,38]],[222],[222],[[[219,[75]]]],[[[219,[75]]]],[[[219,[75]],38]],[[[223,[75]]]],[[[223,[75]]]],[[[223,[75]],38]],[[[224,[75]]]],[[[224,[75]]]],[[[224,[75]],38]],[[[225,[75]],38]],[[[225,[75]]]],[[[225,[75]]]],[[[226,[75]]]],[[[226,[75]]]],[[[226,[75]],38]],[[],[[37,[[219,[75]]]]]],[[],[[37,[[219,[75]]]]]],[[],[[37,[[219,[75]]]]]],[[],[[37,[[219,[75]]]]]],[[],[[37,[[219,[75]]]]]],[[],[[37,[[219,[75]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[225],[[]],[[]],[[]],[221,29],[221,29],[219,29],[225,29],[219,29],[225,29],[219,37],[225,37],[220,220],[221,221],[221,221],[219,37],[225,37],[219,37],[225,37],[[]],[[]],[[]],[[],225],[219,37],[223,37],[225,37],[219,37],[225,37],[[[230,[[37,[75]]]],[230,[[37,[75]]]]],[[219,[75]]]],[[[230,[[37,[75]]]],[230,[[37,[75]]]]],[[219,[75]]]],[[[230,[[37,[75]]]],[230,[[37,[75]]]]],[[219,[75]]]],[[[230,[[37,[75]]]],[230,[[37,[75]]]]],[[219,[75]]]],[[[230,[[37,[75]]]],[230,[[37,[75]]]]],[[219,[75]]]],[[[230,[[37,[75]]]],[230,[[37,[75]]]]],[[219,[75]]]],[[]],[[219,75],37],[[223,75],37],[[225,75],37],[[219,75],37],[[225,75],37],[[91,91],[[37,[21]]]],[[]],[[]],[86,91],[225],[219,24],[225,24],[220,24],[[]],[[]],[[]],[[]],[219,75],[219],[223],[225,75],[225],[225],0,0,[[],220],[222,220],[219,220],[219,220],[223,220],[223,220],[224,220],[224,220],[225,220],[225,220],[226,220],[226,220],[[]],[[]],[[],[[28,[27,42]]]],[[],[[28,[27,42]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[225],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[225],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],12],[[],12],[[],[[37,[[219,[75]]]]]],[[],[[37,[[219,[75]]]]]],[[],[[37,[[219,[75]]]]]],[[],[[37,[[219,[75]]]]]],[[],[[37,[[219,[75]]]]]],[[],[[37,[[219,[75]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[43,38],43],[[43,38]],[[],66],[[],66],[[]],[[]],[43],[231],[43,38],[43,38],[43,28],[232,38],[232],[43,38],[43,68],[43],[43,67],[[],[[24,[69]]]],[[],[[24,[69]]]],[232,38],[43,38],[[]],[[]],[43,38],[[]],[[]],[[]],[43,38],[[]],[[]],[[]],[43,75],[43],[43,43],[231,231],[[43,43]],[[]],[[]],[[43,43],21],[[],[[24,[43,23]]]],[[],[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[[],43],[43,38],[43,38],[231,38],[233,38],[[],[[24,[43]]]],[43,232],[232],[[],[[28,[27,42]]]],[[]],[[43,43],29],[[43,38],29],[[43,65],29],[[43,38],29],[[231,231],29],[43],[43],[43],[43],[43],[43],[43],[[43,43]],[[43,188]],[[43,[65,[38]]]],[[43,38]],[[43,188]],[[43,75]],[[43,75]],[[232,32],[[24,[33]]]],[[43,32],[[24,[33]]]],[[43,32],[[24,[33]]]],[[231,32],[[24,[33]]]],[[231,32],[[24,[33]]]],[[233,32],[[24,[33]]]],[[233,32],[[24,[33]]]],[[]],[43,43],[38,43],[[]],[38,43],[[[65,[38]]],43],[[[77,[38,42]]],43],[188,43],[[]],[[]],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[27,75,75],43],[38,[[24,[43]]]],[[],[[24,[43,233]]]],[[],43],[[[28,[27,42]]],[[24,[43,231]]]],[[],[[65,[38]]]],[[[28,[27,42]]],43],[43],[[43,[223,[75]]],38],[[43,[225,[75]]],38],[[43,222],38],[[43,[219,[75]]],38],[[43,[224,[75]]],38],[[43,[226,[75]]],38],[[43,[219,[75]]],38],[[43,[224,[75]]],38],[[43,[226,[75]]],38],[[43,222],38],[[43,[223,[75]]],38],[[43,[225,[75]]],38],[[43,75,188]],[[43,75,38]],[[]],[[]],[[]],[[]],[43,[[77,[38,42]]]],[43,[[28,[27,42]]]],[231,[[28,[27,42]]]],[43,234],[[]],[43],[[43,38]],[[43,38],29],[43,29],[[43,38],29],[[43,38],29],[232,[[37,[188]]]],[43,75],[[43,43],29],[[43,65],29],[[43,38],29],[[43,38],29],[[],43],[232,[[37,[188]]]],[232,[[37,[188]]]],[[43,43],[[37,[21]]]],[43,[[37,[188]]]],[[43,188]],[[43,38]],[[43,75],188],[43],[[43,38]],[[43,75]],[[43,75]],[43],[43,24],[[43,75]],[43],[232],[[],75],[[43,75],43],[[43,38],[[37,[38]]]],[[43,38],[[37,[38]]]],[[],[[28,[27,42]]]],[[]],[[]],[43,[[24,[[236,[235,42]],83]]]],[[],43],[[],43],[43,43],[[],43],[[],43],[[43,75]],[[],[[24,[66,76]]]],[[],[[24,[66,76]]]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[43,75],[[24,[110]]]],[[43,75],[[24,[110]]]],[[],40],[[],40],[[],40],[[],40],[[],12],[[]],[231,237],[75,43],[[43,188],[[24,[33]]]],[[43,38],[[24,[33]]]],0,0,0,0,0,[[236,75],[[24,[75]]]],[[236,75],[[24,[75]]]],[238],[236],[28],[239],[[]],[[28,28]],[[[28,[27,42]]],[[24,[[28,[27,42]],23]]]],[[],66],[[],66],[[],66],[[]],[[]],[[]],[28,28],[28],[[],66],[[]],[28],[236],[28],[[],[[24,[69]]]],[28],[238],[236],[28],[28,28],[238],[236],[28],[[],[[24,[69]]]],[[],[[24,[69]]]],[[],[[24,[69]]]],[[]],[[]],[28],[[]],[[]],[[]],[[]],[[]],[28],[[]],[[]],[[]],[28,75],[28],[236,236],[28,28],[[28,28]],[[]],[[]],[[28,28],21],[236,75],[[],[[24,[[28,[42]],23]]]],[[],[[24,[23]]]],[25,[[24,[23]]]],[25,[[24,[23]]]],[28],[28],[28],[[],[[28,[42]]]],[28],[28],[[],[[24,[[28,[42]]]]]],[28,238],[28,239],[238],[236],[28],[239],[240],[[],[[28,[27,42]]]],[[]],[[28,28],29],[28,29],[28,29],[28,29],[28,29],[28,29],[28],[28],[28],[28],[28],[28],[[28,75]],[[28,75]],[[[28,[27]]],[[24,[83]]]],[[238,32],[[24,[33]]]],[[236,32],[[24,[33]]]],[[28,32],[[24,[33]]]],[[239,32],[[24,[33]]]],[[240,32],[[24,[33]]]],[[]],[[]],[77,28],[43,[[28,[27,42]]]],[104,[[28,[42]]]],[[]],[72,[[28,[27,42]]]],[[],[[28,[42]]]],[103,28],[241,[[28,[42]]]],[65,[[28,[42]]]],[38,[[28,[27,42]]]],[[],[[28,[42]]]],[[],[[28,[42]]]],[[]],[[]],[[],[[28,[42]]]],[[75,75],[[28,[42]]]],[[75,75],28],[28],[28],[28],[[28,75]],[[]],[[]],[[]],[[]],[[]],[28,77],[[[28,[42]]]],[28,28],[[]],[[]],[28,236],[28,242],[28,243],[[]],[[]],[28],[28],[238,29],[236,29],[28,29],[[[28,[27]]],29],[28],[[],[[24,[75,23]]]],[28,75],[28,29],[28,29],[28,29],[28,29],[[28,28],29],[28,29],[[],[[28,[42]]]],[[],28],[238,37],[236,37],[239,37],[240,37],[238,37],[236,37],[240,37],[236,[[24,[244]]]],[[28,28],[[37,[21]]]],[28,37],[28],[[28,75]],[[28,75]],[[28,75]],[[28,75]],[[28,75]],[28],[28],[[[28,[42]]],24],[[28,75]],[[28,75]],[28],[238],[236],[[],75],[239],[240],[28],[28,240],[28],[[28,75],28],[[28,75]],[[],[[28,[27,42]]]],[[]],[[]],[[28,75]],[[],[[24,[66,76]]]],[[],[[24,[66,76]]]],[[],[[24,[66,76]]]],[[],[[24,[66,76]]]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[28,75],[[24,[110]]]],[[28,75],[[24,[110]]]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],12],[[]],[75,[[28,[42]]]],[75,28],[[]],[[[28,[27]]],[[24,[75,83]]]],[[[28,[27]]],[[24,[83]]]],[[[28,[27]]],[[24,[75,83]]]]],"p":[[3,"TypeDefBitSequence"],[3,"FieldBuilder"],[3,"TypeBuilder"],[3,"MetaType"],[8,"Clone"],[8,"Form"],[3,"TypeDefComposite"],[3,"Field"],[3,"Path"],[3,"TypeDefVariant"],[3,"Variant"],[3,"Type"],[3,"TypeParameter"],[4,"TypeDef"],[4,"TypeDefPrimitive"],[3,"TypeDefArray"],[3,"TypeDefTuple"],[3,"TypeDefSequence"],[3,"TypeDefCompact"],[3,"PortableRegistry"],[4,"Ordering"],[8,"Ord"],[3,"Error"],[4,"Result"],[15,"u32"],[3,"Registry"],[15,"u8"],[3,"Vec"],[15,"bool"],[8,"PartialEq"],[4,"PathError"],[3,"Formatter"],[3,"Error"],[8,"Debug"],[6,"Result"],[4,"PortableForm"],[4,"Option"],[15,"str"],[8,"PartialOrd"],[3,"TypeId"],[3,"UntrackedSymbol"],[3,"Global"],[3,"String"],[4,"MetaForm"],[8,"FnOnce"],[4,"TypeNotAssigned"],[4,"TypeAssigned"],[4,"PathAssigned"],[3,"FieldsBuilder"],[3,"Variants"],[3,"VariantBuilder"],[15,"u64"],[4,"NamedFields"],[4,"UnnamedFields"],[4,"IndexAssigned"],[4,"IndexNotAssigned"],[4,"NameNotAssigned"],[4,"NameAssigned"],[4,"PathNotAssigned"],[4,"NoFields"],[3,"Symbol"],[3,"Interner"],[8,"Any"],[3,"Demand"],[4,"Cow"],[3,"BitSlice"],[3,"OsStr"],[3,"Path"],[4,"Error"],[3,"PathBuf"],[3,"OsString"],[3,"CString"],[3,"CStr"],[3,"CowStrDeserializer"],[15,"usize"],[4,"BitSpanError"],[3,"Box"],[3,"BorrowedFd"],[15,"i32"],[19,"MaybeUninit"],[8,"Error"],[3,"ThinBox"],[3,"Error"],[15,"never"],[3,"BitBox"],[3,"Pin"],[3,"CharPredicateSearcher"],[3,"Context"],[4,"Poll"],[3,"ReadBuf"],[4,"GeneratorState"],[4,"SeekFrom"],[3,"AllocError"],[3,"Arguments"],[15,"i128"],[15,"i16"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[3,"Reverse"],[3,"VecDeque"],[3,"BinaryHeap"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"LinkedList"],[3,"HashSet"],[3,"HashMap"],[3,"TryReserveError"],[4,"TryReserveErrorKind"],[3,"Cursor"],[3,"CursorMut"],[3,"Difference"],[3,"Difference"],[3,"Drain"],[3,"Drain"],[3,"Drain"],[3,"Drain"],[3,"DrainFilter"],[3,"DrainFilter"],[3,"DrainFilter"],[3,"DrainFilter"],[3,"DrainFilter"],[3,"DrainSorted"],[4,"Entry"],[4,"Entry"],[3,"OccupiedEntry"],[3,"RandomState"],[3,"LayoutError"],[3,"Intersection"],[3,"Intersection"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"IterMut"],[3,"Iter"],[3,"IntoIter"],[3,"IntoIterSorted"],[3,"IntoKeys"],[3,"IntoKeys"],[3,"IntoValues"],[3,"IntoValues"],[3,"Keys"],[3,"Keys"],[3,"PeekMut"],[3,"Range"],[3,"Range"],[3,"RangeMut"],[3,"RawEntryBuilder"],[3,"RawEntryBuilderMut"],[8,"FnMut"],[3,"SymmetricDifference"],[3,"SymmetricDifference"],[3,"OccupiedError"],[3,"OccupiedError"],[3,"Union"],[3,"Union"],[3,"Values"],[3,"Values"],[3,"ValuesMut"],[3,"ValuesMut"],[3,"VacantEntry"],[4,"RawEntryMut"],[3,"DefaultHasher"],[3,"RawOccupiedEntryMut"],[3,"RawVacantEntryMut"],[3,"OccupiedEntry"],[3,"VacantEntry"],[4,"Alignment"],[3,"DebugList"],[3,"DebugMap"],[3,"DebugSet"],[3,"DebugStruct"],[3,"DebugTuple"],[15,"char"],[15,"f32"],[15,"f64"],[8,"Write"],[3,"BuildHasherDefault"],[3,"SipHasher"],[3,"PhantomData"],[3,"PhantomPinned"],[3,"Discriminant"],[3,"ManuallyDrop"],[3,"Assume"],[3,"NonZeroI8"],[3,"NonZeroI16"],[3,"NonZeroI32"],[3,"NonZeroI64"],[3,"NonZeroI128"],[3,"NonZeroIsize"],[3,"Saturating"],[3,"Wrapping"],[3,"NonZeroU8"],[3,"NonZeroU16"],[3,"NonZeroU32"],[3,"NonZeroU64"],[3,"NonZeroU128"],[3,"NonZeroUsize"],[3,"ParseFloatError"],[3,"TryFromIntError"],[3,"ParseIntError"],[4,"IntErrorKind"],[4,"FpCategory"],[4,"Infallible"],[3,"Range"],[4,"Bound"],[4,"ControlFlow"],[3,"RangeFull"],[3,"RangeFrom"],[3,"RangeTo"],[3,"RangeInclusive"],[3,"RangeToInclusive"],[3,"Yeet"],[3,"BitPtrRange"],[3,"BitPtr"],[8,"Into"],[3,"FromUtf8Error"],[3,"Drain"],[3,"FromUtf16Error"],[3,"StringDeserializer"],[4,"SocketAddr"],[3,"IntoIter"],[3,"Utf8Error"],[3,"Drain"],[3,"DrainFilter"],[3,"Splice"],[3,"BitVec"],[3,"IterMut"],[3,"Iter"],[3,"IntoIter"],[8,"TypeInfo"],[8,"IntoPortable"],[13,"InvalidIdentifier"],[13,"Composite"],[13,"Variant"],[13,"Sequence"],[13,"Array"],[13,"Tuple"],[13,"Primitive"],[13,"Compact"],[13,"BitSequence"],[4,"Fields"],[8,"Provider"],[8,"ToOwned"],[8,"Borrow"],[8,"BorrowMut"],[13,"Borrowed"],[13,"Owned"],[13,"Included"],[13,"Excluded"],[13,"AllocError"],[13,"Vacant"],[13,"Occupied"],[13,"Occupied"],[13,"Vacant"],[13,"Occupied"],[13,"Vacant"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[8,"BuildHasher"],[8,"Hasher"],[8,"Hash"],[8,"DiscriminantKind"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"Index"],[8,"Try"],[8,"Generator"],[8,"Deref"],[8,"Residual"],[8,"AddAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"Fn"],[8,"RangeBounds"],[8,"DerefMut"],[8,"DivAssign"],[8,"Drop"],[8,"FromResidual"],[8,"IndexMut"],[8,"MulAssign"],[8,"RemAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"SubAssign"],[13,"Continue"],[13,"Break"],[13,"Yielded"],[13,"Complete"],[8,"ToString"]],"a":{"!":[6730],"!=":[1193,1201],"%":[6754,6755],"%=":[6755],"&":[6698],"&*":[6711],"&=":[6699],"*":[6711,6712,6727,6728],"*=":[6728],"+":[6695,6696],"+=":[6696],"-":[6729,6763,6764],"-=":[6764],"..":[6747,6749,6750,6752],"..=":[6751,6753],"/":[6714,6715],"/=":[6715],"<":[1198,1203],"<<":[6759],"<<=":[6760],"<=":[1198,1203],"==":[1193,1201],">":[1198,1203],">=":[1198,1203],">>":[6761],">>=":[6762],"?":[6766],"[":[6725,6726],"[]":[6725,6726],"]":[6725,6726],"^":[6702],"^=":[6703],"popcnt":[4429,4430,4431,4432,4433,4434,4435,4436,4437,4438,4439,4440,4441,4442,4443,4444,4445,4446,4447,4448,4449,4450,4451,4452],"popcount":[4429,4430,4431,4432,4433,4434,4435,4436,4437,4438,4439,4440,4441,4442,4443,4444,4445,4446,4447,4448,4449,4450,4451,4452],"{:?}":[2907],"{}":[2914],"|":[6700],"|=":[6701]}},\
"scale_info_derive":{"doc":"","t":[24],"n":["TypeInfo"],"q":["scale_info_derive"],"d":[""],"i":[0],"f":[0],"p":[]},\
"secp256k1":{"doc":"Rust bindings for Pieter Wuille’s secp256k1 library, …","t":[4,3,8,18,4,13,18,13,13,3,13,13,13,13,13,13,13,13,3,3,13,17,13,4,3,7,3,3,4,3,6,8,8,8,4,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,10,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,7,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6],"n":["All","AllPreallocated","Context","DESCRIPTION","Error","Even","FLAGS","IncorrectSignature","InvalidMessage","InvalidParityValue","InvalidParityValue","InvalidPublicKey","InvalidPublicKeySum","InvalidRecoveryId","InvalidSecretKey","InvalidSharedSecret","InvalidSignature","InvalidTweak","KeyPair","Message","NotEnoughMemory","ONE_KEY","Odd","Parity","PublicKey","SECP256K1","Secp256k1","SecretKey","SignOnly","SignOnlyPreallocated","Signature","Signing","ThirtyTwoByteHash","Verification","VerifyOnly","VerifyOnlyPreallocated","XOnlyPublicKey","add_assign","add_exp_assign","as_c_ptr","as_c_ptr","as_c_ptr","as_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ref","as_ref","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","combine","combine_keys","constants","ctx","deallocate","deallocate","deallocate","deallocate","deallocate","deallocate","deallocate","default","display_secret","display_secret","drop","ecdh","ecdsa","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","ffi","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i32","from_keypair","from_keypair","from_keypair","from_raw_all","from_raw_signining_only","from_raw_verification_only","from_seckey_slice","from_seckey_str","from_seckey_str_global","from_secret_key","from_secret_key","from_secret_key_global","from_slice","from_slice","from_slice","from_slice","from_str","from_str","from_str","from_str","from_u8","gen_new","global","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","index","index","index","index","index","index","index","index","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_32","is_empty","is_empty","len","len","mul_assign","mul_assign","negate_assign","negate_assign","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","preallocate_signing_size","preallocate_size","preallocate_size_gen","preallocate_verification_size","preallocated_gen_new","preallocated_new","preallocated_signing_only","preallocated_verification_only","public_key","recover","recover_ecdsa","schnorr","schnorrsig","schnorrsig_sign_no_aux_rand","schnorrsig_sign_with_aux_rand","schnorrsig_verify","secret_bytes","secret_bytes","seeded_randomize","serialize","serialize","serialize_uncompressed","sign","sign_ecdsa","sign_ecdsa","sign_ecdsa_grind_r","sign_ecdsa_low_r","sign_ecdsa_recoverable","sign_grind_r","sign_low_r","sign_recoverable","sign_schnorr_no_aux_rand","sign_schnorr_with_aux_rand","signing_only","to_i32","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_u8","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tweak_add_assign","tweak_add_assign","tweak_add_check","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verification_only","verify","verify_ecdsa","verify_schnorr","0","COMPACT_SIGNATURE_SIZE","CURVE_ORDER","FIELD_SIZE","GENERATOR_X","GENERATOR_Y","KEY_PAIR_SIZE","MAX_SIGNATURE_SIZE","MESSAGE_SIZE","PUBLIC_KEY_SIZE","SCHNORRSIG_PUBLIC_KEY_SIZE","SCHNORRSIG_SIGNATURE_SIZE","SCHNORR_PUBLIC_KEY_SIZE","SCHNORR_SIGNATURE_SIZE","SECRET_KEY_SIZE","UNCOMPRESSED_PUBLIC_KEY_SIZE","SharedSecret","as_ref","borrow","borrow","borrow_mut","clone","clone_into","cmp","display_secret","eq","fmt","from","from_bytes","from_slice","from_str","hash","into","new","partial_cmp","secret_bytes","shared_secret_point","to_owned","try_from","try_into","type_id","RecoverableSignature","RecoveryId","SerializedSignature","Signature","as_c_ptr","as_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_ptr","as_mut_ptr","as_ptr","as_ptr","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","deref","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_compact","from_compact","from_der","from_der_lax","from_i32","from_signature","from_str","into","into","into","into","is_empty","len","normalize_s","recover","serialize_compact","serialize_compact","serialize_der","to_i32","to_owned","to_owned","to_owned","to_owned","to_signature","to_standard","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify","GlobalContext","SECP256K1","borrow","borrow_mut","clone","clone_into","deref","fmt","from","into","to_owned","try_from","try_into","type_id","Signature","as_c_ptr","as_mut_c_ptr","as_mut_ptr","as_ptr","as_ref","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","fmt","fmt","from","from_slice","from_str","hash","index","index","index","index","index","into","is_empty","len","partial_cmp","to_owned","to_string","try_from","try_into","type_id","KeyPair","PublicKey","Signature"],"q":["secp256ksecp256k1::Error","secp256k1::constants","","","","","","","","","","","","","","","secp256k1::ecdh","","","","","","","","","","","","","","","","","","","","","","","","","secp256k1::ecdsa","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","secp256k1::global","","","","","","","","","","","","","","secp256k1::schnorr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","secp256k1::schnorrsig","",""],"d":["Represents the set of all capabilities.","Represents the set of all capabilities with a user …","A trait for all kinds of contexts that lets you define the …","A constant description of the context.","An ECDSA error","Even parity.","Flags for the ffi.","Signature failed verification","Badly sized message (“messages” are actually …","Error returned when conversion from an integer to <code>Parity</code> …","The only valid parity values are 0 or 1.","Bad public key.","Bad set of public keys.","Bad recovery id.","Bad secret key.","Bad shared secret.","Bad signature.","Invalid tweak for <code>add_*_assign</code> or <code>mul_*_assign</code>.","Opaque data structure that holds a keypair consisting of a …","A (hashed) message input to an ECDSA signature.","Didn’t pass enough memory to context creation with …","The number 1 encoded as a secret key.","Odd parity.","Represents the parity passed between FFI function calls.","A Secp256k1 public key, used for verification of …","A global static context to avoid repeatedly creating …","The secp256k1 engine, used to execute all signature …","Secret 256-bit key used as <code>x</code> in an ECDSA signature.","Represents the set of capabilities needed for signing.","Represents the set of capabilities needed for signing with …","backwards compatible re-export of ecdsa signatures","Marker trait for indicating that an instance of <code>Secp256k1</code> …","Trait describing something that promises to be a 32-byte …","Marker trait for indicating that an instance of <code>Secp256k1</code> …","Represents the set of capabilities needed for verification.","Represents the set of capabilities needed for verification …","An x-only public key, used for verification of Schnorr …","Adds one secret key to another, modulo the curve order.","Adds the <code>other</code> public key to <code>self</code> in place.","","","","","","","","","Converts the object to a mutable raw pointer for FFI …","Converts the object to a mutable raw pointer for FFI …","Obtains a raw mutable pointer suitable for use with FFI …","Obtains a raw mutable pointer suitable for use with FFI …","Obtains a raw mutable pointer suitable for use with FFI …","Converts the object to a raw pointer for FFI interfacing","Converts the object to a raw pointer for FFI interfacing","Obtains a raw const pointer suitable for use with FFI …","Obtains a raw const pointer suitable for use with FFI …","Obtains a raw const pointer suitable for use with FFI …","Gets a reference to the underlying array","Gets a reference to the underlying array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds a second key to this one, returning the sum.","Adds the keys in the provided slice together, returning …","Constants related to the API and the underlying curve.","Getter for the raw pointer to the underlying secp256k1 …","A function to deallocate the memory when the context is …","","","","","","","","Formats the explicit byte value of the secret key kept …","Formats the explicit byte value of the secret key kept …","","Support for shared secret computations.","Structs and functionality related to the ECDSA signature …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts a 32-byte hash directly to a message without …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Constructs a <code>Parity</code> from a signed integer.","Creates a new secret key using data from BIP-340 <code>KeyPair</code>.","Creates a new compressed public key using data from …","Creates a new Schnorr public key from a Schnorr key pair.","Create a context from a raw context.","Create a context from a raw context.","Create a context from a raw context.","Creates a Schnorr <code>KeyPair</code> directly from a secret key slice.","Creates a Schnorr <code>KeyPair</code> directly from a secret key …","Creates a Schnorr <code>KeyPair</code> directly from a secret key …","Creates a new public key from a <code>SecretKey</code>.","Creates a Schnorr <code>KeyPair</code> directly from generic Secp256k1 …","Creates a new public key from a <code>SecretKey</code> and the global …","Converts a <code>SECRET_KEY_SIZE</code>-byte slice to a secret key.","<strong>If you just want to sign an arbitrary message use </strong>…","Creates a public key directly from a slice.","Creates a Schnorr public key directly from a slice.","","","","","Constructs a <code>Parity</code> from a byte.","Lets you create a context in a generic manner …","Module implementing a singleton pattern for a global …","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the object into a 32-byte array","Returns whether the object as an array is empty","Returns whether the object as an array is empty","Returns the length of the object as an array","Returns the length of the object as an array","Multiplies one secret key by another, modulo the curve …","Muliplies the public key in place by the scalar <code>other</code>.","Negates one secret key.","Negates the public key in place.","Creates a new Secp256k1 context with all capabilities.","","","","","","","","","","","","","","","Uses the ffi <code>secp256k1_context_preallocated_size</code> to check …","Uses the ffi <code>secp256k1_context_preallocated_size</code> to check …","Returns the required memory for a preallocated context …","Uses the ffi <code>secp256k1_context_preallocated_size</code> to check …","Lets you create a context with preallocated buffer in a …","Creates a new Secp256k1 context with all capabilities","Creates a new Secp256k1 context that can only be used for …","Creates a new Secp256k1 context that can only be used for …","Gets the XOnlyPublicKey for this KeyPair.","Determines the public key for which <code>sig</code> is a valid …","Determines the public key for which <code>sig</code> is a valid …","schnorrsig","Schnorr Signature related methods.","Create a schnorr signature without using any auxiliary …","Create a Schnorr signature using the given auxiliary …","Verify a Schnorr signature.","Returns the secret key as a byte value.","Returns the secret bytes for this key pair.","(Re)randomizes the Secp256k1 context for extra sidechannel …","Serializes the key as a byte-encoded pair of values. In …","Serializes the key as a byte-encoded x coordinate value …","Serializes the key as a byte-encoded pair of values, in …","Constructs a signature for <code>msg</code> using the secret key <code>sk</code> and …","Constructs an ECDSA signature for <code>msg</code> using the global …","Constructs a signature for <code>msg</code> using the secret key <code>sk</code> and …","Constructs a signature for <code>msg</code> using the secret key <code>sk</code>, …","Constructs a signature for <code>msg</code> using the secret key <code>sk</code>, …","Constructs a signature for <code>msg</code> using the secret key <code>sk</code> and …","Constructs a signature for <code>msg</code> using the secret key <code>sk</code>, …","Constructs a signature for <code>msg</code> using the secret key <code>sk</code>, …","Constructs a signature for <code>msg</code> using the secret key <code>sk</code> and …","Create a schnorr signature without using any auxiliary …","Create a Schnorr signature using the given auxiliary …","Creates a new Secp256k1 context that can only be used for …","Converts parity into an integer value.","","","","","","","","","","","","","","","","","","","","","Converts parity into an integer (byte) value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tweaks a keypair by adding the given tweak to the secret …","Tweaks an x-only PublicKey by adding the generator …","Verifies that a tweak produced by …","","","","","","","","","","","","","","","","Creates a new Secp256k1 context that can only be used for …","Checks that <code>sig</code> is a valid ECDSA signature for <code>msg</code> using …","Checks that <code>sig</code> is a valid ECDSA signature for <code>msg</code> using …","Verify a Schnorr signature.","","The maximum size of a compact signature.","The order of the secp256k1 curve.","The Prime for the secp256k1 field element.","The X coordinate of the generator.","The Y coordinate of the generator.","The size of a key pair.","The maximum size of a signature.","The size (in bytes) of a message.","The size (in bytes) of a serialized public key.","The size of a Schnorr public key.","The size of a Schnorr signature.","The size of a Schnorr public key.","The size of a Schnorr signature.","The size (in bytes) of a secret key.","The size (in bytes) of an serialized uncompressed public …","Enables two parties to create a shared secret without …","","","","","","","","Formats the explicit byte value of the shared secret kept …","","","Returns the argument unchanged.","Creates a shared secret from <code>bytes</code> array.","Creates a shared secret from <code>bytes</code> slice.","","","Calls <code>U::from(self)</code>.","Creates a new shared secret from a pubkey and secret key.","","Returns the shared secret as a byte value.","Creates a shared point from public key and secret key.","","","","","An ECDSA signature with a recovery ID for pubkey recovery.","A tag used for recovering the public key from a compact …","A DER serialized Signature","An ECDSA signature","","","","","Obtains a raw mutable pointer suitable for use with FFI …","Obtains a raw mutable pointer suitable for use with FFI …","Obtains a raw pointer suitable for use with FFI functions.","Obtains a raw pointer suitable for use with FFI functions","","","","","","","","","","Get the capacity of the underlying data buffer.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Converts a compact-encoded byte slice to a signature. This …","Converts a 64-byte compact-encoded byte slice to a …","Converts a DER-encoded byte slice to a signature","Converts a “lax DER”-encoded byte slice to a …","Allows library users to create valid recovery IDs from i32.","Create a SerializedSignature from a Signature. (this DER …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if the space is zero.","Get the len of the used data.","Normalizes a signature to a “low S” form. In ECDSA, …","Determines the public key for which this <code>Signature</code> is …","Serializes the recoverable signature in compact format.","Serializes the signature in compact format","Serializes the signature in DER format","Allows library users to convert recovery IDs to i32.","","","","","Convert the serialized signature into the Signature struct.","Converts a recoverable signature to a non-recoverable one …","","","","","","","","","","","","","","","Verifies an ECDSA signature for <code>msg</code> using <code>pk</code> and the …","Proxy struct for global <code>SECP256K1</code> context.","A global static context to avoid repeatedly creating …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Represents a Schnorr signature.","","","Converts the object to a mutable raw pointer for FFI …","Converts the object to a raw pointer for FFI interfacing","Gets a reference to the underlying array","","","","","","","","","","Returns the argument unchanged.","Creates a Signature directly from a slice","","","","","","","","Calls <code>U::from(self)</code>.","Returns whether the object as an array is empty","Returns the length of the object as an array","","","","","","","backwards compatible re-export of keypair","backwards compatible re-export of xonly key","backwards compatible re-export of schnorr signatures"],"i":[0,0,0,16,0,13,16,2,2,0,2,2,2,2,2,2,2,2,0,0,2,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,1,6,4,7,1,6,4,7,1,6,4,10,7,1,6,4,10,7,1,6,13,1,6,5,17,18,19,20,21,22,4,10,7,13,23,2,1,6,5,17,18,19,20,21,22,4,10,7,13,23,2,2,1,6,5,17,18,19,20,21,22,4,10,7,13,23,2,1,6,5,17,18,19,20,21,22,4,10,7,13,23,2,1,6,17,18,19,20,21,22,4,10,7,13,23,2,4,4,0,5,16,17,18,19,20,21,22,5,1,10,5,0,0,1,6,5,17,18,19,20,21,22,4,10,7,13,23,2,0,1,6,6,6,5,17,18,19,20,21,22,4,4,4,10,7,7,7,13,23,23,2,2,1,1,1,6,6,5,17,18,19,20,21,22,4,4,4,4,10,7,7,7,13,23,2,2,13,1,4,7,5,5,5,10,10,10,4,10,4,1,6,4,7,1,4,10,7,13,5,0,1,6,17,18,19,20,21,22,4,10,7,13,23,2,1,1,1,1,1,6,6,6,6,6,1,6,5,17,18,19,20,21,22,4,10,7,13,23,2,31,1,6,1,6,1,4,1,4,5,1,6,17,18,19,20,21,22,4,10,7,13,23,2,5,5,5,5,5,5,5,5,10,5,5,0,0,5,5,5,1,10,5,4,7,4,5,1,5,5,5,5,5,5,5,5,5,5,13,1,6,5,17,18,19,20,21,22,4,10,7,13,23,2,6,4,7,23,2,13,1,6,5,17,18,19,20,21,22,4,10,7,13,23,2,1,6,5,17,18,19,20,21,22,4,10,7,13,23,2,10,7,7,1,6,5,17,18,19,20,21,22,4,10,7,13,23,2,5,5,5,5,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,46,46,46,46,0,0,0,0,40,43,40,43,40,43,40,43,49,50,40,43,49,50,40,43,49,49,50,40,43,49,50,40,43,49,49,49,50,40,43,49,50,40,43,43,49,49,50,40,40,43,43,49,40,43,43,43,50,49,43,50,40,43,49,49,49,43,40,40,43,43,50,50,40,43,49,49,40,43,49,50,40,43,49,50,40,43,49,50,40,43,49,43,0,0,51,51,51,51,51,51,51,51,51,51,51,51,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[3,[2]]]],[[4,5],[[3,[2]]]],[1],[6],[4],[7],[1],[6],[4],[7],[1,8],[6,8],[4,9],[10,11],[7,12],[1,8],[6,8],[4,9],[10,11],[7,12],[1],[6],[[13,13]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,[[15,[14]]]],[1,1],[6,6],[[[5,[16]]],[[5,[16]]]],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[4,4],[10,10],[7,7],[13,13],[23,23],[2,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],24],[[6,6],24],[[17,17],24],[[18,18],24],[[19,19],24],[[20,20],24],[[21,21],24],[[22,22],24],[[4,4],24],[[10,10],24],[[7,7],24],[[13,13],24],[[23,23],24],[[2,2],24],[[4,4],[[3,[4,2]]]],[[],[[3,[4,2]]]],0,[[[5,[16]]],25],[[8,26]],[[8,26]],[[8,26]],[[8,26]],[[8,26]],[[8,26]],[[8,26]],[[],[[5,[22]]]],0,0,[[[5,[16]]]],0,0,[[1,1],27],[[6,6],27],[[[5,[16]],5],27],[[17,17],27],[[18,18],27],[[19,19],27],[[20,20],27],[[21,21],27],[[22,22],27],[[4,4],27],[[10,10],27],[[7,7],27],[[13,13],27],[[23,23],27],[[2,2],27],0,[[1,28],29],[[6,28],29],[[6,28],29],[[6,28],29],[[[5,[16]],28],29],[[17,28],29],[[18,28],29],[[19,28],29],[[20,28],29],[[21,28],29],[[22,28],29],[[4,28],29],[[4,28],29],[[4,28],29],[[10,28],29],[[7,28],29],[[7,28],29],[[7,28],29],[[13,28],29],[[23,28],29],[[23,28],29],[[2,28],29],[[2,28],[[3,[30]]]],[10,1],[10,1],[[]],[[]],[31,6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[10,4],[[]],[9,4],[10,4],[[]],[12,7],[4,7],[[]],[[]],[[]],[23,2],[[]],[32,[[3,[13,23]]]],[10,1],[10,4],[10,7],[25,[[33,[[5,[19]]]]]],[25,[[33,[[5,[17]]]]]],[25,[[33,[[5,[18]]]]]],[5,[[3,[10,2]]]],[[5,34],[[3,[10,2]]]],[34,[[3,[10,2]]]],[[5,1],4],[[5,1],10],[1,4],[[],[[3,[1,2]]]],[[],[[3,[6,2]]]],[[],[[3,[4,2]]]],[[],[[3,[7,2]]]],[34,[[3,[1,2]]]],[34,[[3,[4,2]]]],[34,[[3,[10]]]],[34,[[3,[7,2]]]],[8,[[3,[13,23]]]],[[],[[5,[16]]]],0,[1],[6],[17],[18],[19],[20],[21],[22],[4],[10],[7],[13],[23],[2],[[1,26],8],[[1,[35,[26]]]],[[1,[36,[26]]]],[[1,[37,[26]]]],[[1,38]],[[6,26],8],[[6,[36,[26]]]],[[6,[35,[26]]]],[[6,[37,[26]]]],[[6,38]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,27],[6,27],[1,26],[6,26],[1,[[3,[2]]]],[[4,5],[[3,[2]]]],[1],[[4,5]],[[],[[5,[22]]]],[[1,1],[[15,[24]]]],[[6,6],[[15,[24]]]],[[17,17],[[15,[24]]]],[[18,18],[[15,[24]]]],[[19,19],[[15,[24]]]],[[20,20],[[15,[24]]]],[[21,21],[[15,[24]]]],[[22,22],[[15,[24]]]],[[4,4],[[15,[24]]]],[[10,10],[[15,[24]]]],[[7,7],[[15,[24]]]],[[13,13],[[15,[24]]]],[[23,23],[[15,[24]]]],[[2,2],[[15,[24]]]],[[],26],[[],26],[[],26],[[],26],[[],[[3,[[5,[16]],2]]]],[[],[[3,[[5,[19]],2]]]],[[],[[3,[[5,[17]],2]]]],[[],[[3,[[5,[18]],2]]]],[10,7],[[[5,[39]],6,40],[[3,[4,2]]]],[[[5,[39]],6,40],[[3,[4,2]]]],0,0,[[[5,[41]],6,10],42],[[[5,[41]],6,10],42],[[[5,[39]],42,6,7],[[3,[2]]]],[1],[10],[[[5,[16]]]],[4],[7],[4],[[[5,[41]],6,1],43],[[1,6],43],[[[5,[41]],6,1],43],[[[5,[41]],6,1,26],43],[[[5,[41]],6,1],43],[[[5,[41]],6,1],40],[[[5,[41]],6,1,26],43],[[[5,[41]],6,1],43],[[[5,[41]],6,1],40],[[[5,[41]],6,10],42],[[[5,[41]],6,10],42],[[],[[5,[20]]]],[13,32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],44],[[],44],[[],44],[[],44],[[],44],[13,8],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[10,5],[[3,[2]]]],[[7,5],[[3,[13,2]]]],[[7,5,7,13],27],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],[[5,[21]]]],[[[5,[39]],6,43,4],[[3,[2]]]],[[[5,[39]],6,43,4],[[3,[2]]]],[[[5,[39]],42,6,7],[[3,[2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[46],[46],[[]],[[]],[46,46],[[]],[[46,46],24],0,[[46,46],27],[[46,28],29],[[]],[[],46],[[],[[3,[46,2]]]],[34,[[3,[46,2]]]],[46],[[]],[[4,1],46],[[46,46],[[15,[24]]]],[46],[[4,1]],[[]],[[],3],[[],3],[[],45],0,0,0,0,[40],[43],[40],[43],[40,47],[43,48],[40,47],[43,48],[49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[49,26],[50,50],[40,40],[43,43],[49,49],[[]],[[]],[[]],[[]],[[],49],[49],[[50,50],27],[[40,40],27],[[43,43],27],[[49,49],27],[[50,28],29],[[40,28],29],[[43,28],29],[[43,28],29],[[49,28],29],[[49,28],29],[[]],[47,40],[[]],[[]],[48,43],[[]],[50,[[3,[40,2]]]],[[],[[3,[43,2]]]],[[],[[3,[43,2]]]],[[],[[3,[43,2]]]],[32,[[3,[50,2]]]],[43,49],[34,[[3,[43,2]]]],[[]],[[]],[[]],[[]],[49,27],[49,26],[43],[[40,6],[[3,[4,2]]]],[40],[43],[43,49],[50,32],[[]],[[]],[[]],[[]],[49,[[3,[43,2]]]],[40,43],[[],44],[[],44],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],45],[[],45],[[],45],[[],45],[[43,6,4],[[3,[2]]]],0,0,[[]],[[]],[51,51],[[]],[51],[[51,28],29],[[]],[[]],[[]],[[],3],[[],3],[[],45],0,[42],[42],[42,8],[42,8],[42],[[]],[[]],[42,42],[[]],[[42,42],24],[[42,42],27],[[42,28],29],[[42,28],29],[[42,28],29],[[]],[[],[[3,[42,2]]]],[34,[[3,[42,2]]]],[42],[[42,26],8],[[42,[35,[26]]]],[[42,[36,[26]]]],[[42,[37,[26]]]],[[42,38]],[[]],[42,27],[42,26],[[42,42],[[15,[24]]]],[[]],[[],44],[[],3],[[],3],[[],45],0,0,0],"p":[[3,"SecretKey"],[4,"Error"],[4,"Result"],[3,"PublicKey"],[3,"Secp256k1"],[3,"Message"],[3,"XOnlyPublicKey"],[15,"u8"],[3,"PublicKey"],[3,"KeyPair"],[3,"KeyPair"],[3,"XOnlyPublicKey"],[4,"Parity"],[8,"Error"],[4,"Option"],[8,"Context"],[3,"SignOnlyPreallocated"],[3,"VerifyOnlyPreallocated"],[3,"AllPreallocated"],[4,"SignOnly"],[4,"VerifyOnly"],[4,"All"],[3,"InvalidParityValue"],[4,"Ordering"],[3,"Context"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Error"],[8,"ThirtyTwoByteHash"],[15,"i32"],[3,"ManuallyDrop"],[15,"str"],[3,"RangeTo"],[3,"Range"],[3,"RangeFrom"],[3,"RangeFull"],[8,"Verification"],[3,"RecoverableSignature"],[8,"Signing"],[3,"Signature"],[3,"Signature"],[3,"String"],[3,"TypeId"],[3,"SharedSecret"],[3,"RecoverableSignature"],[3,"Signature"],[3,"SerializedSignature"],[3,"RecoveryId"],[3,"GlobalContext"],[13,"InvalidParityValue"]]},\
"secp256k1_sys":{"doc":"secp256k1-sys FFI bindings","t":[8,3,6,3,6,3,17,17,17,17,17,6,3,3,16,3,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,5,5,5,5,5,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,5,5,5,5,5,5,5,5,5,5,5,5,7,7,7,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,11,11,11,11,3,18,11,11,11,11,6,6,6,6,4,11,11,11,11,11,11,11,11,6,11,11,11,11,11,11,11,11],"n":["CPtr","Context","EcdhHashFn","KeyPair","NonceFn","PublicKey","SECP256K1_SER_COMPRESSED","SECP256K1_SER_UNCOMPRESSED","SECP256K1_START_NONE","SECP256K1_START_SIGN","SECP256K1_START_VERIFY","SchnorrNonceFn","SchnorrSigExtraParams","Signature","Target","XOnlyPublicKey","as_c_ptr","as_c_ptr","as_c_ptr","as_c_ptr","as_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","ecdsa_signature_parse_der_lax","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_array_unchecked","from_array_unchecked","from_array_unchecked","from_array_unchecked","hash","hash","hash","hash","impl_array_newtype","impl_raw_debug","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","into","into","into","into","into","into","is_empty","is_empty","is_empty","is_empty","len","len","len","len","new","new","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","recovery","rustsecp256k1_v0_5_0_context_create","rustsecp256k1_v0_5_0_context_destroy","rustsecp256k1_v0_5_0_default_error_callback_fn","rustsecp256k1_v0_5_0_default_illegal_callback_fn","secp256k1_context_create","secp256k1_context_destroy","secp256k1_context_no_precomp","secp256k1_context_preallocated_clone","secp256k1_context_preallocated_clone_size","secp256k1_context_preallocated_create","secp256k1_context_preallocated_destroy","secp256k1_context_preallocated_size","secp256k1_context_randomize","secp256k1_ec_privkey_negate","secp256k1_ec_privkey_tweak_add","secp256k1_ec_privkey_tweak_mul","secp256k1_ec_pubkey_combine","secp256k1_ec_pubkey_create","secp256k1_ec_pubkey_negate","secp256k1_ec_pubkey_parse","secp256k1_ec_pubkey_serialize","secp256k1_ec_pubkey_tweak_add","secp256k1_ec_pubkey_tweak_mul","secp256k1_ec_seckey_negate","secp256k1_ec_seckey_tweak_add","secp256k1_ec_seckey_tweak_mul","secp256k1_ec_seckey_verify","secp256k1_ecdh","secp256k1_ecdh_hash_function_default","secp256k1_ecdsa_sign","secp256k1_ecdsa_signature_normalize","secp256k1_ecdsa_signature_parse_compact","secp256k1_ecdsa_signature_parse_der","secp256k1_ecdsa_signature_serialize_compact","secp256k1_ecdsa_signature_serialize_der","secp256k1_ecdsa_verify","secp256k1_keypair_create","secp256k1_keypair_pub","secp256k1_keypair_sec","secp256k1_keypair_xonly_pub","secp256k1_keypair_xonly_tweak_add","secp256k1_nonce_function_bip340","secp256k1_nonce_function_default","secp256k1_nonce_function_rfc6979","secp256k1_schnorrsig_sign","secp256k1_schnorrsig_sign_custom","secp256k1_schnorrsig_verify","secp256k1_xonly_pubkey_from_pubkey","secp256k1_xonly_pubkey_parse","secp256k1_xonly_pubkey_serialize","secp256k1_xonly_pubkey_tweak_add","secp256k1_xonly_pubkey_tweak_add_check","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","types","underlying_bytes","underlying_bytes","underlying_bytes","underlying_bytes","RecoverableSignature","as_c_ptr","as_mut_c_ptr","as_mut_ptr","as_ptr","as_ref","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","hash","index","index","index","index","index","into","is_empty","len","new","partial_cmp","secp256k1_ecdsa_recover","secp256k1_ecdsa_recoverable_signature_convert","secp256k1_ecdsa_recoverable_signature_parse_compact","secp256k1_ecdsa_recoverable_signature_serialize_compact","secp256k1_ecdsa_sign_recoverable","to_owned","try_from","try_into","type_id","AlignedType","ZERO","borrow","borrow","borrow_mut","borrow_mut","c_char","c_int","c_uchar","c_uint","c_void","clone","clone_into","default","fmt","from","from","into","into","size_t","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","zeroed"],"q":["secp256k1_syssecp256k1_sys::recovery","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","secp256k1_sys::types","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A trait for producing pointers that will always be valid …","A Secp256k1 context, containing various precomputed values …","Hash function to use to post-process an ECDH point to get …","","A nonce generation function. Ordinary users of the library …","Library-internal representation of a Secp256k1 public key","Flag for keys to indicate compressed serialization format","Flag for keys to indicate uncompressed serialization format","Flag for context to enable no precomputation","Flag for context to enable signing precomputation","Flag for context to enable verification precomputation","Same as secp256k1_nonce function with the exception of …","Data structure that contains additional arguments for …","Library-internal representation of a Secp256k1 signature","","","","","","","","","","","","","Converts the object to a mutable raw pointer for FFI …","Converts the object to a mutable raw pointer for FFI …","Converts the object to a mutable raw pointer for FFI …","Converts the object to a mutable raw pointer for FFI …","Converts the object to a raw pointer for FFI interfacing","Converts the object to a raw pointer for FFI interfacing","Converts the object to a raw pointer for FFI interfacing","Converts the object to a raw pointer for FFI interfacing","Gets a reference to the underlying array","Gets a reference to the underlying array","Gets a reference to the underlying array","Gets a reference to the underlying array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new public key usable for the FFI interface from …","Create a new signature usable for the FFI interface from …","Create a new x-only public key usable for the FFI …","Create a new keypair usable for the FFI interface from raw …","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether the object as an array is empty","Returns whether the object as an array is empty","Returns whether the object as an array is empty","Returns whether the object as an array is empty","Returns the length of the object as an array","Returns the length of the object as an array","Returns the length of the object as an array","Returns the length of the object as an array","Create a new SchnorrSigExtraParams properly initialized.","Creates an “uninitialized” FFI public key which is …","Creates an “uninitialized” FFI signature which is …","Creates an “uninitialized” FFI x-only public key which …","Creates an “uninitialized” FFI keypair which is zeroed …","","","","","FFI of the recovery module","A reimplementation of the C function …","A reimplementation of the C function …","<strong>This function is an override for the C function, this is </strong>…","<strong>This function is an override for the C function, this is </strong>…","","","","","","","","","","","","","","","","","","","","","","","","","Default ECDH hash function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the underlying FFI opaque representation of the …","Returns the underlying FFI opaque representation of the …","Returns the underlying FFI opaque representation of the …","Returns the underlying FFI opaque representation of the …","Library-internal representation of a Secp256k1 signature + …","","","Converts the object to a mutable raw pointer for FFI …","Converts the object to a raw pointer for FFI interfacing","Gets a reference to the underlying array","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Returns whether the object as an array is empty","Returns the length of the object as an array","Create a new (zeroed) signature usable for the FFI …","","","","","","","","","","","A type that is as aligned as the biggest alignment for …","A static zeroed out AlignedType for use in static …","","","","","This might not match C’s <code>c_char</code> exactly. The way we use …","","","","This is an exact copy of …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,26,1,2,3,4,26,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,18,1,2,3,4,6,18,1,2,3,4,6,1,2,3,4,6,1,2,3,4,6,1,2,3,4,0,1,2,3,4,1,2,3,4,6,18,1,2,3,4,6,1,2,3,4,1,2,3,4,0,0,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,18,1,2,3,4,6,1,2,3,4,1,2,3,4,18,1,2,3,4,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,6,18,1,2,3,4,6,18,1,2,3,4,6,18,1,2,3,4,6,0,1,2,3,4,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,0,0,0,0,24,24,24,24,0,25,17,25,17,25,0,0,0,0,0,25,25,25,17,17,25,17,25,0,25,17,25,17,25,17,25,25],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[1],[2],[3],[4],[[]],[1],[2],[3],[4],[1,5],[2,5],[3,5],[4,5],[1,5],[2,5],[3,5],[4,5],[1],[2],[3],[4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[6,6],[[]],[[]],[[]],[[]],[[]],[[1,1],7],[[2,2],7],[[3,3],7],[[4,4],7],0,[[1,1],8],[[2,2],8],[[3,3],8],[[4,4],8],[[1,9],10],[[2,9],10],[[3,9],10],[[4,9],10],[[6,9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[[],4],[1],[2],[3],[4],0,0,[[1,[12,[11]]]],[[1,[13,[11]]]],[[1,11],5],[[1,[14,[11]]]],[[1,15]],[[2,[12,[11]]]],[[2,15]],[[2,[13,[11]]]],[[2,11],5],[[2,[14,[11]]]],[[3,[13,[11]]]],[[3,11],5],[[3,[12,[11]]]],[[3,15]],[[3,[14,[11]]]],[[4,15]],[[4,[14,[11]]]],[[4,[12,[11]]]],[[4,[13,[11]]]],[[4,11],5],[[]],[[]],[[]],[[]],[[]],[[]],[1,8],[2,8],[3,8],[4,8],[1,11],[2,11],[3,11],[4,11],[[16,17],18],[[],1],[[],2],[[],3],[[],4],[[1,1],[[19,[7]]]],[[2,2],[[19,[7]]]],[[3,3],[[19,[7]]]],[[4,4],[[19,[7]]]],0,[20,6],[6],[[21,17]],[[21,17]],[20,6],[6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],0,[1],[2],[3],[4],0,[24],[24],[24,5],[24,5],[24],[[]],[[]],[24,24],[[]],[[24,24],7],[[],24],[[24,24],8],[[24,9],10],[[]],[24],[[24,[14,[11]]]],[[24,15]],[[24,11],5],[[24,[13,[11]]]],[[24,[12,[11]]]],[[]],[24,8],[24,11],[[],24],[[24,24],[[19,[7]]]],0,0,0,0,0,[[]],[[],22],[[],22],[[],23],0,0,[[]],[[]],[[]],[[]],0,0,0,0,0,[25,25],[[]],[[],25],[[17,9],10],[[]],[[]],[[]],[[]],0,[[]],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],25]],"p":[[3,"PublicKey"],[3,"Signature"],[3,"XOnlyPublicKey"],[3,"KeyPair"],[6,"c_uchar"],[3,"Context"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"usize"],[3,"RangeTo"],[3,"Range"],[3,"RangeFrom"],[3,"RangeFull"],[6,"SchnorrNonceFn"],[4,"c_void"],[3,"SchnorrSigExtraParams"],[4,"Option"],[6,"c_uint"],[6,"c_char"],[4,"Result"],[3,"TypeId"],[3,"RecoverableSignature"],[3,"AlignedType"],[8,"CPtr"]]},\
"serde":{"doc":"Serde","t":[8,8,16,16,16,8,16,16,16,16,16,16,16,8,11,11,11,0,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,14,11,11,0,14,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,13,13,13,8,8,8,8,16,13,8,8,16,16,16,16,16,8,13,3,8,13,8,13,13,13,13,13,8,13,2,13,13,13,4,13,13,13,16,16,16,8,8,11,11,11,11,11,11,11,11,10,11,10,10,11,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,11,11,10,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,10,11,11,11,10,11,10,11,11,10,11,11,11,11,11,11,11,10,11,11,10,11,11,0,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,16,16,16,16,16,16,16,3,16,16,16,16,16,16,16,16,8,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,2,11,11,11,11,11,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,11,11,11,10,10,10,10,10,10,11,11,11,11,11,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,11,11,11,11,11,11],"n":["Deserialize","Deserializer","Error","Error","Ok","Serialize","SerializeMap","SerializeSeq","SerializeStruct","SerializeStructVariant","SerializeTuple","SerializeTupleStruct","SerializeTupleVariant","Serializer","collect_map","collect_seq","collect_str","de","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","forward_to_deserialize_any","is_human_readable","is_human_readable","ser","serde_if_integer128","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","Bool","Bytes","Char","Deserialize","DeserializeOwned","DeserializeSeed","Deserializer","Deserializer","Enum","EnumAccess","Error","Error","Error","Error","Error","Error","Expected","Float","IgnoredAny","IntoDeserializer","Map","MapAccess","NewtypeStruct","NewtypeVariant","Option","Other","Seq","SeqAccess","Signed","StdError","Str","StructVariant","TupleVariant","Unexpected","Unit","UnitVariant","Unsigned","Value","Value","Variant","VariantAccess","Visitor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","custom","default","deserialize","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","duplicate_field","eq","expecting","expecting","fmt","fmt","fmt","fmt","fmt","fmt","from","from","into","into","into_deserializer","invalid_length","invalid_type","invalid_value","is_human_readable","missing_field","newtype_variant","newtype_variant_seed","next_element","next_element_seed","next_entry","next_entry_seed","next_key","next_key_seed","next_value","next_value_seed","size_hint","size_hint","struct_variant","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","tuple_variant","type_id","type_id","unit_variant","unknown_field","unknown_variant","value","variant","variant_seed","visit_bool","visit_bool","visit_borrowed_bytes","visit_borrowed_str","visit_byte_buf","visit_bytes","visit_bytes","visit_char","visit_enum","visit_enum","visit_f32","visit_f64","visit_f64","visit_i128","visit_i128","visit_i16","visit_i32","visit_i64","visit_i64","visit_i8","visit_map","visit_map","visit_newtype_struct","visit_newtype_struct","visit_none","visit_none","visit_seq","visit_seq","visit_some","visit_some","visit_str","visit_str","visit_string","visit_u128","visit_u128","visit_u16","visit_u32","visit_u64","visit_u64","visit_u8","visit_unit","visit_unit","0","0","0","0","0","0","0","0","BoolDeserializer","BorrowedBytesDeserializer","BorrowedStrDeserializer","BytesDeserializer","CharDeserializer","CowStrDeserializer","Error","F32Deserializer","F64Deserializer","I128Deserializer","I16Deserializer","I32Deserializer","I64Deserializer","I8Deserializer","IsizeDeserializer","MapAccessDeserializer","MapDeserializer","SeqAccessDeserializer","SeqDeserializer","StrDeserializer","StringDeserializer","U128Deserializer","U16Deserializer","U32Deserializer","U64Deserializer","U8Deserializer","UnitDeserializer","UsizeDeserializer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","custom","custom","description","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","end","end","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next_element_seed","next_element_seed","next_entry_seed","next_key_seed","next_value_seed","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","Error","Error","Error","Error","Error","Error","Error","Error","Error","Impossible","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Serialize","SerializeMap","SerializeMap","SerializeSeq","SerializeSeq","SerializeStruct","SerializeStruct","SerializeStructVariant","SerializeStructVariant","SerializeTuple","SerializeTuple","SerializeTupleStruct","SerializeTupleStruct","SerializeTupleVariant","SerializeTupleVariant","Serializer","StdError","borrow","borrow_mut","collect_map","collect_seq","collect_str","custom","end","end","end","end","end","end","end","end","end","end","end","end","end","end","from","into","is_human_readable","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_element","serialize_element","serialize_entry","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","serialize_value","skip_field","skip_field","try_from","try_into","type_id"],"q":["serde","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde::deserde::de::Unexpected","","","","","","","","serde::de::valueserde::ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A <strong>data structure</strong> that can be deserialized from any data …","A <strong>data format</strong> that can deserialize any data structure …","The error type that can be returned if some error occurs …","The error type when some error occurs during serialization.","The output type produced by this <code>Serializer</code> during …","A <strong>data structure</strong> that can be serialized into any data …","Type returned from <code>serialize_map</code> for serializing the …","Type returned from <code>serialize_seq</code> for serializing the …","Type returned from <code>serialize_struct</code> for serializing the …","Type returned from <code>serialize_struct_variant</code> for …","Type returned from <code>serialize_tuple</code> for serializing the …","Type returned from <code>serialize_tuple_struct</code> for serializing …","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Generic data structure deserialization framework.","Deserialize this value from the given Serde deserializer.","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Helper macro when implementing the <code>Deserializer</code> part of a …","Determine whether <code>Deserialize</code> implementations should …","Determine whether <code>Serialize</code> implementations should …","Generic data structure serialization framework.","Conditional compilation depending on whether Serde is …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","The input contained a boolean value that was not expected.","The input contained a <code>&amp;[u8]</code> or <code>Vec&lt;u8&gt;</code> that was not …","The input contained a <code>char</code> that was not expected.","A <strong>data structure</strong> that can be deserialized from any data …","A data structure that can be deserialized without …","<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …","A <strong>data format</strong> that can deserialize any data structure …","The type of the deserializer being converted into.","The input contained an enum that was not expected.","Provides a <code>Visitor</code> access to the data of an enum in the …","The <code>Error</code> trait allows <code>Deserialize</code> implementations to …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …","The input contained a floating point <code>f32</code> or <code>f64</code> that was …","An efficient way of discarding data from a deserializer.","Converts an existing value into a <code>Deserializer</code> from which …","The input contained a map that was not expected.","Provides a <code>Visitor</code> access to each entry of a map in the …","The input contained a newtype struct that was not expected.","The input contained a newtype variant that was not …","The input contained an <code>Option&lt;T&gt;</code> that was not expected.","A message stating what uncategorized thing the input …","The input contained a sequence that was not expected.","Provides a <code>Visitor</code> access to each element of a sequence in …","The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …","","The input contained a <code>&amp;str</code> or <code>String</code> that was not expected.","The input contained a struct variant that was not expected.","The input contained a tuple variant that was not expected.","<code>Unexpected</code> represents an unexpected invocation of any one …","The input contained a unit <code>()</code> that was not expected.","The input contained a unit variant that was not expected.","The input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or <code>u64</code>…","The type produced by using this seed.","The value produced by this visitor.","The <code>Visitor</code> that will be used to deserialize the content …","<code>VariantAccess</code> is a visitor that is created by the …","This trait represents a visitor that walks through a …","","","","","","","","","Raised when there is general error when deserializing a …","","Deserialize this value from the given Serde deserializer.","Equivalent to the more common <code>Deserialize::deserialize</code> …","","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Raised when a <code>Deserialize</code> struct type received more than …","","Format a message stating what data this Visitor expects to …","","Format an explanation of what data was being expected. …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this value into a deserializer.","Raised when deserializing a sequence or map and the input …","Raised when a <code>Deserialize</code> receives a type different from …","Raised when a <code>Deserialize</code> receives a value of the right …","Determine whether <code>Deserialize</code> implementations should …","Raised when a <code>Deserialize</code> struct type expected to receive …","Called when deserializing a variant with a single value.","Called when deserializing a variant with a single value.","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns a <code>Ok(value)</code> for the next value in the map.","This returns a <code>Ok(value)</code> for the next value in the map.","Returns the number of elements remaining in the sequence, …","Returns the number of entries remaining in the map, if …","Called when deserializing a struct-like variant.","","","","","","","","Called when deserializing a tuple-like variant.","","","Called when deserializing a variant with no values.","Raised when a <code>Deserialize</code> struct type received a field …","Raised when a <code>Deserialize</code> enum type received a variant …","Building blocks for deserializing basic values using the …","<code>variant</code> is called to identify which variant to deserialize.","<code>variant</code> is called to identify which variant to deserialize.","The input contains a boolean.","","The input contains a byte array that lives at least as …","The input contains a string that lives at least as long as …","The input contains a byte array and ownership of the byte …","The input contains a byte array. The lifetime of the byte …","","The input contains a <code>char</code>.","The input contains an enum.","","The input contains an <code>f32</code>.","The input contains an <code>f64</code>.","","The input contains a <code>i128</code>.","","The input contains an <code>i16</code>.","The input contains an <code>i32</code>.","The input contains an <code>i64</code>.","","The input contains an <code>i8</code>.","The input contains a key-value map.","","The input contains a newtype struct.","","The input contains an optional that is absent.","","The input contains a sequence of elements.","","The input contains an optional that is present.","","The input contains a string. The lifetime of the string is …","","The input contains a string and ownership of the string is …","The input contains a <code>u128</code>.","","The input contains a <code>u16</code>.","The input contains a <code>u32</code>.","The input contains a <code>u64</code>.","","The input contains a <code>u8</code>.","The input contains a unit <code>()</code>.","","","","","","","","","","A deserializer holding a <code>bool</code>.","A deserializer holding a <code>&amp;[u8]</code> with a lifetime tied to …","A deserializer holding a <code>&amp;str</code> with a lifetime tied to …","A deserializer holding a <code>&amp;[u8]</code>. Always calls …","A deserializer holding a <code>char</code>.","A deserializer holding a <code>Cow&lt;str&gt;</code>.","A minimal representation of all possible errors that can …","A deserializer holding an <code>f32</code>.","A deserializer holding an <code>f64</code>.","A deserializer holding an <code>i128</code>.","A deserializer holding an <code>i16</code>.","A deserializer holding an <code>i32</code>.","A deserializer holding an <code>i64</code>.","A deserializer holding an <code>i8</code>.","A deserializer holding an <code>isize</code>.","A deserializer holding a <code>MapAccess</code>.","A deserializer that iterates over a map.","A deserializer holding a <code>SeqAccess</code>.","A deserializer that iterates over a sequence.","A deserializer holding a <code>&amp;str</code>.","A deserializer holding a <code>String</code>.","A deserializer holding a <code>u128</code>.","A deserializer holding a <code>u16</code>.","A deserializer holding a <code>u32</code>.","A deserializer holding a <code>u64</code>.","A deserializer holding a <code>u8</code>.","A deserializer holding a <code>()</code>.","A deserializer holding a <code>usize</codeheck for remaining elements after passing a …","Check for remaining elements after passing a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new borrowed deserializer from the given string.","","","Create a new deserializer from the given bytes.","Create a new borrowed deserializer from the given borrowed …","Construct a new <code>MapDeserializer&lt;I, E&gt;</code>.","","","","","","","","","","","","","","","","Construct a new <code>SeqDeserializer&lt;I, E&gt;</code>.","Construct a new <code>SeqAccessDeserializer&lt;A&gt;</code>.","Construct a new <code>MapAccessDeserializer&lt;A&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait used by <code>Serialize</code> implementations to generically …","The error type when some error occurs during serialization.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Helper type for implementing a <code>Serializer</code> that does not …","The output type produced by this <code>Serializer</code> during …","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","A <strong>data structure</strong> that can be serialized into any data …","Returned from <code>Serializer::serialize_map</code>.","Type returned from <code>serialize_map</code> for serializing the …","Returned from <code>Serializer::serialize_seq</code>.","Type returned from <code>serialize_seq</code> for serializing the …","Returned from <code>Serializer::serialize_struct</code>.","Type returned from <code>serialize_struct</code> for serializing the …","Returned from <code>Serializer::serialize_struct_variant</code>.","Type returned from <code>serialize_struct_variant</code> for …","Returned from <code>Serializer::serialize_tuple</code>.","Type returned from <code>serialize_tuple</code> for serializing the …","Returned from <code>Serializer::serialize_tuple_struct</code>.","Type returned from <code>serialize_tuple_struct</code> for serializing …","Returned from <code>Serializer::serialize_tuple_variant</code>.","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","","","","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Used when a <code>Serialize</code> implementation encounters any error …","Finish serializing a sequence.","Finish serializing a tuple.","Finish serializing a tuple struct.","Finish serializing a tuple variant.","Finish serializing a map.","Finish serializing a struct.","Finish serializing a struct variant.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Determine whether <code>Serialize</code> implementations should …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize a sequence element.","Serialize a tuple element.","","","Serialize a map entry consisting of a key and a value.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize a tuple struct field.","Serialize a tuple variant field.","Serialize a struct field.","Serialize a struct variant field.","","","","","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Serialize a map key.","","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","Serialize a map value.","","Indicate that a struct field has been skipped.","Indicate that a struct variant field has been skipped.","","",""],"i":[0,0,61,62,62,0,62,62,62,62,62,62,62,0,62,62,62,0,63,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,61,62,0,0,64,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,20,20,20,0,0,0,0,65,20,0,0,61,66,67,68,69,0,20,0,0,20,0,20,20,20,20,20,0,20,0,20,20,20,0,20,20,20,70,71,68,0,0,19,20,19,20,19,20,19,20,72,19,63,70,19,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,72,20,71,19,23,23,19,19,20,20,19,20,19,20,65,72,72,72,61,72,69,69,66,66,67,67,67,67,67,67,66,67,69,19,20,20,19,20,19,20,69,19,20,69,72,72,0,68,68,71,19,71,71,71,71,19,71,71,19,71,71,19,71,19,71,71,71,19,71,71,19,71,19,71,19,71,19,71,19,71,19,71,71,19,71,71,71,19,71,71,19,73,74,75,76,77,78,79,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,37,37,37,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,36,54,37,28,29,30,31,32,33,34,35,36,37,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,36,54,36,36,36,36,36,54,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,37,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,29,30,31,32,33,56,0,62,81,82,83,84,85,86,87,0,62,81,82,83,84,85,86,87,0,0,62,0,62,0,62,0,62,0,62,0,62,0,62,0,0,60,60,62,62,62,88,81,82,83,84,85,86,87,60,60,60,60,60,60,60,60,60,62,64,62,62,62,81,82,60,60,85,62,62,83,84,86,87,60,60,60,60,62,62,62,62,62,85,60,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,85,60,86,87,60,60,60],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[2,1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[2,1],[[],1],[[],1],[[],1],[[],1],[2,1],[3,1],[[2,3],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[2,1],0,[[],4],[[],4],0,0,[[],1],[4,1],[[],1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1],[11,1],[12,1],[[[13,[3]]],1],[2,1],[[2,14,2],1],[[],1],[[[13,[3]]],1],[[],1],[2,1],[[2,3],1],[[2,14,2,3],1],[3,1],[[2,3],1],[[2,14,2,3],1],[15,1],[16,1],[14,1],[17,1],[18,1],[[],1],[2,1],[[2,14,2],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[19,19],[20,20],[[]],[[]],[[]],[[],19],[[],1],[[],1],[[],[[1,[19]]]],[[],1],[[],1],[[],1],[[],1],[[],1],[2,1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[2,1],[[],1],[[],1],[[],1],[[],1],[2,1],[3,1],[[2,3],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[2,1],[2],[[20,20],4],[21,22],[[19,21],22],[21,22],[[23,21],22],[21,[[1,[24]]]],[[19,21],22],[[20,21],22],[[20,21],22],[[]],[[]],[[]],[[]],[[]],[[3,23]],[[20,23]],[[20,23]],[[],4],[2],[[],1],[[],1],[[],[[1,[13]]]],[[],[[1,[13]]]],[[],[[1,[13]]]],[[],[[1,[13]]]],[[],[[1,[13]]]],[[],[[1,[13]]]],[[],1],[[],1],[[],[[13,[3]]]],[[],[[13,[3]]]],[[],1],[[]],[[]],[[],25],[[],1],[[],1],[[],1],[[],1],[3,1],[[],26],[[],26],[[],1],[2],[2],0,[[],1],[[],1],[4,1],[[19,4],1],[[],1],[2,1],[[[27,[18]]],1],[[],1],[19,1],[5,1],[[],1],[19,1],[6,1],[7,1],[[19,7],1],[8,1],[[19,8],1],[9,1],[10,1],[11,1],[[19,11],1],[12,1],[[],1],[19,1],[[],1],[19,1],[[],1],[19,1],[[],1],[19,1],[[],1],[19,1],[2,1],[[19,2],1],[25,1],[15,1],[[19,15],1],[16,1],[14,1],[17,1],[[19,17],1],[18,1],[[],1],[19,1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[[[54,[53,53]]],[[54,[53,53]]]],[[[55,[53]]],[[55,[53]]]],[[[56,[53]]],[[56,[53]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],37],[[],37],[37,2],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[[28,2],1],[[29,2],1],[[30,2],1],[[31,2],1],[[32,2],1],[[33,2],1],[[34,2],1],[[35,2],1],[[36,2],1],[[38,2],1],[[39,2],1],[[40,2],1],[[41,2],1],[[42,2],1],[[43,2],1],[[44,2],1],[[45,2],1],[[46,2],1],[[47,2],1],[[48,2],1],[[49,2],1],[[50,2],1],[[51,2],1],[[52,2],1],[[54,2],1],[[55,2],1],[[56,2],1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[[28,2],1],[[29,2],1],[[30,2],1],[[31,2],1],[[32,2],1],[[33,2],1],[[34,2],1],[[35,2],1],[[36,2],1],[[38,2],1],[[39,2],1],[[40,2],1],[[41,2],1],[[42,2],1],[[43,2],1],[[44,2],1],[[45,2],1],[[46,2],1],[[47,2],1],[[48,2],1],[[49,2],1],[[50,2],1],[[51,2],1],[[52,2],1],[[54,2],1],[[55,2],1],[[56,2],1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[[28,2],1],[[29,2],1],[[30,2],1],[[31,2],1],[[32,2],1],[[33,2],1],[[34,2],1],[[35,2],1],[[36,2],1],[[38,2],1],[[39,2],1],[[40,2],1],[[41,2],1],[[42,2],1],[[43,2],1],[[44,2],1],[[45,2],1],[[46,2],1],[[47,2],1],[[48,2],1],[[49,2],1],[[50,2],1],[[51,2],1],[[52,2],1],[[54,2],1],[[55,2],1],[[56,2],1],[[28,3],1],[[29,3],1],[[30,3],1],[[31,3],1],[[32,3],1],[[33,3],1],[[34,3],1],[[35,3],1],[[36,3],1],[[38,3],1],[[39,3],1],[[40,3],1],[[41,3],1],[[42,3],1],[[43,3],1],[[44,3],1],[[45,3],1],[[46,3],1],[[47,3],1],[[48,3],1],[[49,3],1],[[50,3],1],[[51,3],1],[[52,3],1],[[54,3],1],[[55,3],1],[[56,3],1],[[28,2,3],1],[[29,2,3],1],[[30,2,3],1],[[31,2,3],1],[[32,2,3],1],[[33,2,3],1],[[34,2,3],1],[[35,2,3],1],[[36,2,3],1],[[38,2,3],1],[[39,2,3],1],[[40,2,3],1],[[41,2,3],1],[[42,2,3],1],[[43,2,3],1],[[44,2,3],1],[[45,2,3],1],[[46,2,3],1],[[47,2,3],1],[[48,2,3],1],[[49,2,3],1],[[50,2,3],1],[[51,2,3],1],[[52,2,3],1],[[54,2,3],1],[[55,2,3],1],[[56,2,3],1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[[28,2],1],[[29,2],1],[[30,2],1],[[31,2],1],[[32,2],1],[[33,2],1],[[34,2],1],[[35,2],1],[[36,2],1],[[38,2],1],[[39,2],1],[[40,2],1],[[41,2],1],[[42,2],1],[[43,2],1],[[44,2],1],[[45,2],1],[[46,2],1],[[47,2],1],[[48,2],1],[[49,2],1],[[50,2],1],[[51,2],1],[[52,2],1],[[54,2],1],[[55,2],1],[[56,2],1],[36,1],[54,1],[[37,37],4],[[28,21],22],[[29,21],22],[[30,21],22],[[31,21],22],[[32,21],22],[[33,21],22],[[34,21],22],[[35,21],22],[[36,21],22],[[37,21],22],[[37,21],22],[[38,21],22],[[39,21],22],[[40,21],22],[[41,21],22],[[42,21],22],[[43,21],22],[[44,21],22],[[45,21],22],[[46,21],22],[[47,21],22],[[48,21],22],[[49,21],22],[[50,21],22],[[51,21],22],[[52,21],22],[[54,21],22],[[[55,[57]],21],22],[[[56,[57]],21],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],28],[14,29],[2,30],[2,31],[25,32],[[[58,[2]]],33],[[],34],[[],35],[[],36],[4,38],[12,39],[9,40],[10,41],[11,42],[59,43],[18,44],[16,45],[17,46],[3,47],[6,48],[7,49],[5,50],[8,51],[15,52],[[],54],[[],55],[[],56],[36,[[1,[13]]]],[54,[[1,[13]]]],[36,[[1,[13]]]],[36,[[1,[13]]]],[36,1],[36,[[13,[3]]]],[36,[[13,[3]]]],[54,[[13,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],25],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[29,1],[30,1],[31,1],[32,1],[33,1],[56,1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],1],[[],1],[[],1],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[[]],[[]],[[],4],[[],1],[4,1],[[],1],[5,1],[[],1],[[],1],[60,1],[60,1],[[],1],[6,1],[7,1],[[],1],[[],1],[2,1],[2,1],[[60,2],1],[60,1],[60,1],[[60,2],1],[8,1],[9,1],[10,1],[11,1],[12,1],[[],1],[60,1],[[[13,[3]]],1],[2,1],[[2,14,2],1],[[],1],[[[13,[3]]],1],[[],1],[2,1],[[2,3],1],[[2,14,2,3],1],[3,1],[[2,3],1],[[2,14,2,3],1],[15,1],[16,1],[14,1],[17,1],[18,1],[[],1],[2,1],[[2,14,2],1],[[],1],[60,1],[2,1],[2,1],[[],1],[[],1],[[],26]],"p":[[4,"Result"],[15,"str"],[15,"usize"],[15,"bool"],[15,"char"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[4,"Option"],[15,"u32"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[3,"IgnoredAny"],[4,"Unexpected"],[3,"Formatter"],[6,"Result"],[8,"Expected"],[3,"Error"],[3,"String"],[3,"TypeId"],[3,"Vec"],[3,"UnitDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BytesDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"MapDeserializer"],[3,"Error"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[8,"Clone"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapAccessDeserializer"],[8,"Debug"],[4,"Cow"],[15,"isize"],[3,"Impossible"],[8,"Deserializer"],[8,"Serializer"],[8,"Deserialize"],[8,"Serialize"],[8,"IntoDeserializer"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"DeserializeSeed"],[8,"Visitor"],[8,"Error"],[13,"Bool"],[13,"Unsigned"],[13,"Signed"],[13,"Float"],[13,"Char"],[13,"Str"],[13,"Bytes"],[13,"Other"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[8,"Error"]]},\
"serde_derive":{"doc":"This crate provides Serde’s two derive macros.","t":[24,24],"n":["Deserialize","Serialize"],"q":["serde_derive",""],"d":["",""],"i":[0,0],"f":[0,0],"p":[]},\
"sha2":{"doc":"An implementation of the SHA-2 cryptographic hash …","t":[8,6,6,3,6,6,3,6,6,11,11,11,11,10,11,11,11,11,2,10,10,10,10,10,11,11,11,11,11,11,11,11,10,11,11,10,10,10,11,11,11,11,11,11,11,11,10,11,11,11,11],"n":["Digest","Sha224","Sha256","Sha256VarCore","Sha384","Sha512","Sha512VarCore","Sha512_224","Sha512_256","borrow","borrow","borrow_mut","borrow_mut","chain_update","clone","clone","clone_into","clone_into","digest","digest","finalize","finalize_into","finalize_into_reset","finalize_reset","finalize_variable_core","finalize_variable_core","fmt","fmt","from","from","into","into","new","new","new","new_with_prefix","output_size","reset","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","update_blocks","update_blocks","write_alg_name","write_alg_name"],"q":["sha2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Convinience wrapper trait covering functionality of …","SHA-224 hasher.","SHA-256 hasher.","Core block-level SHA-256 hasher with variable output size.","SHA-384 hasher.","SHA-512 hasher.","Core block-level SHA-512 hasher with variable output size.","SHA-512/224 hasher.","SHA-512/256 hasher.","","","","","Process input data in a chained manner.","","","","","","Compute hash of <code>data</code>.","Retrieve result and consume hasher instance.","Write result into provided array and consume the hasher …","Write result into provided array and reset the hasher …","Retrieve result and reset hasher instance.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create new hasher instance.","","","Create new hasher instance which has processed the …","Get output size of the hasher","Reset hasher instance to its initial state.","","","","","","","","","Process data, updating the internal state.","","","",""],"i":[0,0,0,0,0,0,0,0,0,2,3,2,3,14,2,3,2,3,0,14,14,14,14,14,2,3,2,3,2,3,2,3,14,2,3,14,14,14,2,3,2,3,2,3,2,3,14,2,3,2,3],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1],[2,2],[3,3],[[]],[[]],0,[1,[[5,[4]]]],[[],[[5,[4]]]],[5],[5],[[],[[5,[4]]]],[[2,6,7]],[[3,6,7]],[[2,8],9],[[3,8],9],[[]],[[]],[[]],[[]],[[]],[10,[[12,[2,11]]]],[10,[[12,[3,11]]]],[1],[[],10],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[1],[2],[3],[8,9],[8,9]],"p":[[8,"AsRef"],[3,"Sha256VarCore"],[3,"Sha512VarCore"],[15,"u8"],[3,"GenericArray"],[6,"Buffer"],[6,"Output"],[3,"Formatter"],[6,"Result"],[15,"usize"],[3,"InvalidOutputSize"],[4,"Result"],[3,"TypeId"],[8,"Digest"]]},\
"sha3":{"doc":"An implementation of the SHA-3 cryptographic hash …","t":[8,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,10,10,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Digest","Keccak224","Keccak224Core","Keccak256","Keccak256Core","Keccak256Full","Keccak256FullCore","Keccak384","Keccak384Core","Keccak512","Keccak512Core","Sha3_224","Sha3_224Core","Sha3_256","Sha3_256Core","Sha3_384","Sha3_384Core","Sha3_512","Sha3_512Core","Shake128","Shake128Core","Shake128Reader","Shake128ReaderCore","Shake256","Shake256Core","Shake256Reader","Shake256ReaderCore","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain_update","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","digest","digest","finalize","finalize_fixed_core","finalize_fixed_core","finalize_fixed_core","finalize_fixed_core","finalize_fixed_core","finalize_fixed_core","finalize_fixed_core","finalize_fixed_core","finalize_fixed_core","finalize_into","finalize_into_reset","finalize_reset","finalize_xof_core","finalize_xof_core","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","new","new_with_prefix","output_size","read_block","read_block","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update_blocks","update_blocks","update_blocks","update_blocks","update_blocks","update_blocks","update_blocks","update_blocks","update_blocks","update_blocks","update_blocks","write_alg_name","write_alg_name","write_alg_name","write_alg_name","write_alg_name","write_alg_name","write_alg_name","write_alg_name","write_alg_name","write_alg_name","write_alg_name"],"q":["shad":["Convinience wrapper trait covering functionality of …","Keccak-224 hasher state.","Core  Keccak-224 hasher state.","Keccak-256 hasher state.","Core  Keccak-256 hasher state.","SHA-3 CryptoNight variant hasher state.","Core  SHA-3 CryptoNight variant hasher state.","Keccak-384 hasher state.","Core  Keccak-384 hasher state.","Keccak-512 hasher state.","Core  Keccak-512 hasher state.","SHA-3-224 hasher state.","Core  SHA-3-224 hasher state.","SHA-3-256 hasher state.","Core  SHA-3-256 hasher state.","SHA-3-384 hasher state.","Core  SHA-3-384 hasher state.","SHA-3-512 hasher state.","Core  SHA-3-512 hasher state.","SHAKE128 hasher state.","Core  SHAKE128 hasher state.","SHAKE128 reader state.","Core  SHAKE128 reader state.","SHAKE256 hasher state.","Core  SHAKE256 hasher state.","SHAKE256 reader state.","Core  SHAKE256 reader state.","","","","","","","","","","","","","","","","","","","","","","","","","","","Process input data in a chained manner.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compute hash of <code>data</code>.","Retrieve result and consume hasher instance.","","","","","","","","","","Write result into provided array and consume the hasher …","Write result into provided array and reset the hasher …","Retrieve result and reset hasher instance.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create new hasher instance.","Create new hasher instance which has processed the …","Get output size of the hasher","","","Reset hasher instance to its initial state.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Process data, updating the internal state.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,4,5,6,7,8,9,10,11,12,13,14,2,3,4,5,6,7,8,9,10,11,12,13,14,25,2,3,4,5,6,7,8,9,10,11,12,13,14,2,3,4,5,6,7,8,9,10,11,12,13,14,2,3,4,5,6,7,8,9,10,11,13,0,25,25,2,3,4,5,6,7,8,9,10,25,25,25,11,13,2,3,4,5,6,7,8,9,10,11,13,2,3,4,5,6,7,8,9,10,11,12,13,14,2,3,4,5,6,7,8,9,10,11,12,13,14,25,25,25,12,14,25,2,3,4,5,6,7,8,9,10,11,13,2,3,4,5,6,7,8,9,10,11,12,13,14,2,3,4,5,6,7,8,9,10,11,12,13,14,2,3,4,5,6,7,8,9,10,11,12,13,14,2,3,4,5,6,7,8,9,10,11,12,13,14,25,2,3,4,5,6,7,8,9,10,11,13,2,3,4,5,6,7,8,9,10,11,13],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[[],9],[[],10],[[],11],[[],13],0,[1,[[16,[15]]]],[[],[[16,[15]]]],[[2,17,18]],[[3,17,18]],[[4,17,18]],[[5,17,18]],[[6,17,18]],[[7,17,18]],[[8,17,18]],[[9,17,18]],[[10,17,18]],[16],[16],[[],[[16,[15]]]],[[11,17]],[[13,17]],[[2,19],20],[[3,19],20],[[4,19],20],[[5,19],20],[[6,19],20],[[7,19],20],[[8,19],20],[[9,19],20],[[10,19],20],[[11,19],20],[[13,19],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[[],21],[12,[[22,[12]]]],[14,[[22,[14]]]],[[]],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[13],[19,20],[19,20],[19,20],[19,20],[19,20],[19,20],[19,20],[19,20],[19,20],[19,20],[19,20]],"p":[[8,"AsRef"],[3,"Keccak224Core"],[3,"Keccak256Core"],[3,"Keccak384Core"],[3,"Keccak512Core"],[3,"Keccak256FullCore"],[3,"Sha3_224Core"],[3,"Sha3_256Core"],[3,"Sha3_384Core"],[3,"Sha3_512Core"],[3,"Shake128Core"],[3,"Shake128ReaderCore"],[3,"Shake256Core"],[3,"Shake256ReaderCore"],[15,"u8"],[3,"GenericArray"],[6,"Buffer"],[6,"Output"],[3,"Formatter"],[6,"Result"],[15,"usize"],[6,"Block"],[4,"Result"],[3,"TypeId"],[8,"Digest"]]},\
"static_assertions":{"doc":"Banner","t":[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"n":["assert_cfg","assert_eq_align","assert_eq_size","assert_eq_size_ptr","assert_eq_size_val","assert_fields","assert_impl_all","assert_impl_any","assert_impl_one","assert_not_impl_all","assert_not_impl_any","assert_obj_safe","assert_trait_sub_all","assert_trait_super_all","assert_type_eq_all","assert_type_ne_all","const_assert","const_assert_eq","const_assert_ne"],"q":["static_assertions","","","","","","","","","","","","","","","","","",""],"d":["Asserts that a given configuration is set.","Asserts that types are equal in alignment.","Asserts that types are equal in size.","Asserts that values pointed to are equal in size.","Asserts that values are equal in size.","Asserts that the type has the given fields.","Asserts that the type implements <em>all</em> of the given traits.","Asserts that the type implements <em>any</em> of the given traits.","Asserts that the type implements exactly one in a set of …","Asserts that the type does <strong>not</strong> implement <em>all</em> of the given …","Asserts that the type does <strong>not</strong> implement <em>any</em> of the given …","Asserts that the traits support dynamic dispatch (…","Asserts that the trait is a child of all of the other …","Asserts that the trait is a parent of all of the other …","Asserts that <em>all</em> types in a list are equal to each other.","Asserts that <em>all</em> types are <strong>not</strong> equal to each other.","Asserts that constant expressions evaluate to <code>true</code>.","Asserts that constants are equal in value.","Asserts that constants are <strong>not</strong> equal in value."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[]},\
"subtle":{"doc":"subtle   ","t":[3,8,8,8,8,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Choice","ConditionallyNegatable","ConditionallySelectable","ConstantTimeEq","ConstantTimeGreater","ConstantTimeLess","CtOption","and_then","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","conditional_assign","conditional_negate","conditional_select","conditional_select","conditional_select","conditional_swap","ct_eq","ct_eq","ct_eq","ct_gt","ct_lt","fmt","fmt","from","from","from","into","into","is_none","is_some","map","new","not","or_else","try_from","try_from","try_into","try_into","type_id","type_id","unwrap","unwrap_or","unwrap_or_else","unwrap_u8"],"q":["subtle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The <code>Choice</code> struct represents a choice for use in …","A type which can be conditionally negated in constant time.","A type which can be conditionally selected in constant …","An <code>Eq</code>-like trait that produces a <code>Choice</code> instead of a <code>bool</code>.","A type which can be compared in some manner and be …","A type which can be compared in some manner and be …","The <code>CtOption&lt;T&gt;</code> type represents an optional value similar …","Returns a <code>None</code> value if the option is <code>None</code>, otherwise …","","","","","","","","","","","","","Conditionally assign <code>other</code> to <code>self</code>, according to <code>choice</code>.","Negate <code>self</code> if <code>choice == Choice(1)</code>; otherwise, leave it …","Select <code>a</code> or <code>b</code> according to <code>choice</code>.","","","Conditionally swap <code>self</code> and <code>other</code> if <code>choice == 1</code>; …","Determine if two items are equal.","","Two <code>CtOption&lt;T&gt;</code>s are equal if they are both <code>Some</code> and their …","Determine whether <code>self &gt; other</code>.","Determine whether <code>self &lt; other</code>.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a true <code>Choice</code> if this value is <code>None</code>.","Returns a true <code>Choice</code> if this value is <code>Some</code>.","Returns a <code>None</code> value if the option is <code>None</code>, otherwise …","This method is used to construct a new <code>CtOption&lt;T&gt;</code> and …","","Returns <code>self</code> if it contains a value, and otherwise returns …","","","","","","","This returns the underlying value but panics if it is not …","This returns the underlying value if it is <code>Some</code> or the …","This returns the underlying value if it is <code>Some</code> or the …","Unwrap the <code>Choice</code> wrapper to reveal the underlying <code>u8</code>."],"i":[0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,1,2,1,2,1,4,12,4,2,1,4,5,2,1,13,14,2,1,2,2,1,2,1,1,1,1,1,2,1,2,1,2,1,2,1,1,1,1,2],"f":[0,0,0,0,0,0,0,[1,1],[[2,2],2],[[2,2]],[[2,2],2],[[2,2]],[[2,2],2],[[2,2]],[[]],[[]],[[]],[[]],[2,2],[[[1,[3]]],[[1,[3]]]],[2],[2],[2],[[2,2,2],2],[[[1,[4]],[1,[4]],2],[[1,[4]]]],[2],[[],2],[[2,2],2],[[[1,[5]],1],2],[[],2],[[],2],[[2,6],7],[[[1,[8]],6],7],[[]],[9,2],[[]],[[]],[[]],[1,2],[1,2],[1,1],[2,1],[2,2],[1,1],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[1],[1],[1],[2,9]],"p":[[3,"CtOption"],[3,"Choice"],[8,"Clone"],[8,"ConditionallySelectable"],[8,"ConstantTimeEq"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"u8"],[4,"Result"],[3,"TypeId"],[8,"ConditionallyNegatable"],[8,"ConstantTimeGreater"],[8,"ConstantTimeLess"]]},\
"syn":{"doc":"github crates-io docs-rs","tn":["Abi","Add","AddEq","And","AngleBracketed","AngleBracketedGenericArguments","Arm","Array","Array","Assign","AssignOp","Async","AttrStyle","Attribute","AttributeArgs","Await","BareFn","BareFnArg","BinOp","Binary","Binding","Binding","BitAnd","BitAndEq","BitOr","BitOrEq","BitXor","BitXorEq","Block","Block","Bool","BoundLifetimes","Box","Box","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closed","Closure","Const","Const","Const","Const","Const","Const","ConstParam","Constraint","Constraint","Continue","Cooked","Crate","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivEq","Enum","Enum","Eq","Eq","Error","Expr","Expr","ExprArray","ExprAssign","ExprAssignOp","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBox","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprType","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","ExternCrate","Field","Field","FieldPat","FieldValue","Fields","FieldsNamed","FieldsUnnamed","File","Float","Fn","Fn","FnArg","ForLoop","ForeignItem","ForeignItemFn","ForeignItemMacro","ForeignItemStatic","ForeignItemType","ForeignMod","Ge","GenericArgument","GenericMethodArgument","GenericParam","Generics","Glob","Group","Group","Group","Gt","HalfOpen","Ident","Ident","If","Impl","ImplGenerics","ImplItem","ImplItemConst","ImplItemMacro","ImplItemMethod","ImplItemType","ImplTrait","Index","Index","Infer","Inherited","Inner","Int","Item","Item","ItemConst","ItemEnum","ItemExternCrate","ItemFn","ItemForeignMod","ItemImpl","ItemMacro","ItemMacro2","ItemMod","ItemStatic","ItemStruct","ItemTrait","ItemTraitAlias","ItemType","ItemUnion","ItemUse","Label","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeDef","List","Lit","Lit","Lit","Lit","LitBool","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","Local","Local","Loop","Lt","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro2","MacroDelimiter","Match","Maybe","Member","Meta","Meta","MetaList","MetaNameValue","Method","Method","MethodCall","MethodTurbofish","Mod","Mul","MulEq","Name","NameValue","Named","Named","Ne","Neg","NestedMeta","Never","None","None","Not","Or","Or","Outer","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Pat","PatBox","PatIdent","PatLit","PatMacro","PatOr","PatPath","PatRange","PatReference","PatRest","PatSlice","PatStruct","PatTuple","PatTupleStruct","PatType","PatWild","Path","Path","Path","Path","Path","Path","PathArguments","PathSegment","PredicateEq","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Range","RangeLimits","Raw","Receiver","Receiver","Reference","Reference","Reference","Rem","RemEq","Rename","Repeat","Rest","Restricted","Result","Return","ReturnType","Semi","Shl","ShlEq","Shr","ShrEq","Signature","Slice","Slice","Static","Static","Stmt","Str","StrStyle","Struct","Struct","Struct","Struct","Sub","SubEq","Token","Trait","Trait","TraitAlias","TraitBound","TraitBoundModifier","TraitItem","TraitItemConst","TraitItemMacro","TraitItemMethod","TraitItemType","TraitObject","Try","TryBlock","Tuple","Tuple","Tuple","TupleStruct","Turbofish","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","Typed","UnOp","Unary","Union","Union","Unit","Unnamed","Unnamed","Unsafe","Use","UseGlob","UseGroup","UseName","UsePath","UseRename","UseTree","Variadic","Variant","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","VisCrate","VisPublic","VisRestricted","Visibility","WhereClause","WherePredicate","While","Wild","Yield","abi","abi","abi","and_token","and_token","and_token","apostrophe","args","args","args","args","arguments","arms","as_token","as_token","as_token","as_turbofish","async_token","asyncness","asyncness","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","auto_token","await_token","bang_token","bang_token","base","base","base10_digits","base10_digits","base10_parse","base10_parse","block","block","block","block","block","block","body","body","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","box_token","box_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","break_token","buffer","by_ref","capture","capture","cases","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon2_token","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","comma","cond","cond","const_params","const_params_mut","const_token","const_token","const_token","const_token","const_token","constness","content","continue_token","crate_token","crate_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","default","default","default","defaultness","defaultness","defaultness","defaultness","delimiter","discriminant","dot2_token","dot2_token","dot2_token","dot_token","dot_token","dot_token","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","elems","elems","elems","elems","else_branch","enum_token","enum_token","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","ext","extern_token","extern_token","fat_arrow_token","fields","fields","fields","fields","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","fn_token","fold","for_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","get_ident","group_token","group_token","gt_token","gt_token","gt_token","gt_token","gt_token","guard","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hi","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","if_token","impl_token","impl_token","in_token","in_token","index","index","init","inputs","inputs","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_empty","is_ident","items","items","items","items","items","iter","iter_mut","label","label","label","label","label","label","leading_colon","leading_colon","leading_vert","left","left","left","len","len","len","let_token","let_token","lhs_ty","lifetime","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","limits","limits","lit","lit","lo","loop_token","lt_token","lt_token","lt_token","lt_token","lt_token","mac","mac","mac","mac","mac","mac","mac","macro_token","make_where_clause","match_token","member","member","member","method","mod_token","modifier","movability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","name","name","name","named","nested","new","new","new","new","new","new","new","new","new","new","new","new_raw","op","op","op","or1_token","or2_token","output","output","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args_with","parse_body","parse_body_with","parse_file","parse_inner","parse_macro_input","parse_meta","parse_mod_style","parse_named","parse_outer","parse_quote","parse_quote_spanned","parse_str","parse_unnamed","parse_with","parse_within","parse_without_eager_brace","partial_cmp","partial_cmp","pat","pat","pat","pat","pat","pat","pat","pat","pat","path","path","path","path","path","path","path","path","path","path","path","path","path","position","pound_token","predicates","pub_token","pub_token","punctuated","qself","qself","qself","question_token","raw","receiver","receiver","reference","rename","rename","rest","return_token","rhs_ty","right","right","right","rules","segments","self_token","self_ty","semi","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","shebang","sig","sig","sig","sig","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","star_token","static_token","static_token","stmts","struct_token","struct_token","style","subpat","suffix","suffix","suffix","suffix","suffix","suffix","suffix","supertraits","then_branch","to","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","token","token","token","token","token","token","token","tokens","tokens","trait_","trait_token","trait_token","tree","tree","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_token","turbofish","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","type_token","type_token","type_token","type_token","underscore_token","underscore_token","union_token","union_token","unnamed","unraw","unsafe_token","unsafety","unsafety","unsafety","unsafety","use_token","value","value","value","value","value","value","variadic","variadic","variants","variants","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","visit","visit_mut","where_clause","where_token","while_token","without_plus","without_plus","without_plus","without_plus","yield_tokenursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","drop","empty","eof","eq","from","from","group","ident","into","into","lifetime","literal","new","new2","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","Fold","fold_abi","fold_abi","fold_abi","fold_angle_bracketed_generic_arguments","fold_angle_bracketed_generic_arguments","fold_angle_bracketed_generic_arguments","fold_arm","fold_arm","fold_arm","fold_attr_style","fold_attr_style","fold_attr_style","fold_attribute","fold_attribute","fold_attribute","fold_bare_fn_arg","fold_bare_fn_arg","fold_bare_fn_arg","fold_bin_op","fold_bin_op","fold_bin_op","fold_binding","fold_binding","fold_binding","fold_block","fold_block","fold_block","fold_bound_lifetimes","fold_bound_lifetimes","fold_bound_lifetimes","fold_const_param","fold_const_param","fold_const_param","fold_constraint","fold_constraint","fold_constraint","fold_data","fold_data","fold_data","fold_data_enum","fold_data_enum","fold_data_enum","fold_data_struct","fold_data_struct","fold_data_struct","fold_data_union","fold_data_union","fold_data_union","fold_derive_input","fold_derive_input","fold_derive_input","fold_expr","fold_expr","fold_expr","fold_expr_array","fold_expr_array","fold_expr_array","fold_expr_assign","fold_expr_assign","fold_expr_assign","fold_expr_assign_op","fold_expr_assign_op","fold_expr_assign_op","fold_expr_async","fold_expr_async","fold_expr_async","fold_expr_await","fold_expr_await","fold_expr_await","fold_expr_binary","fold_expr_binary","fold_expr_binary","fold_expr_block","fold_expr_block","fold_expr_block","fold_expr_box","fold_expr_box","fold_expr_box","fold_expr_break","fold_expr_break","fold_expr_break","fold_expr_call","fold_expr_call","fold_expr_call","fold_expr_cast","fold_expr_cast","fold_expr_cast","fold_expr_closure","fold_expr_closure","fold_expr_closure","fold_expr_continue","fold_expr_continue","fold_expr_continue","fold_expr_field","fold_expr_field","fold_expr_field","fold_expr_for_loop","fold_expr_for_loop","fold_expr_for_loop","fold_expr_group","fold_expr_group","fold_expr_group","fold_expr_if","fold_expr_if","fold_expr_if","fold_expr_index","fold_expr_index","fold_expr_index","fold_expr_let","fold_expr_let","fold_expr_let","fold_expr_lit","fold_expr_lit","fold_expr_lit","fold_expr_loop","fold_expr_loop","fold_expr_loop","fold_expr_macro","fold_expr_macro","fold_expr_macro","fold_expr_match","fold_expr_match","fold_expr_match","fold_expr_method_call","fold_expr_method_call","fold_expr_method_call","fold_expr_paren","fold_expr_paren","fold_expr_paren","fold_expr_path","fold_expr_path","fold_expr_path","fold_expr_range","fold_expr_range","fold_expr_range","fold_expr_reference","fold_expr_reference","fold_expr_reference","fold_expr_repeat","fold_expr_repeat","fold_expr_repeat","fold_expr_return","fold_expr_return","fold_expr_return","fold_expr_struct","fold_expr_struct","fold_expr_struct","fold_expr_try","fold_expr_try","fold_expr_try","fold_expr_try_block","fold_expr_try_block","fold_expr_try_block","fold_expr_tuple","fold_expr_tuple","fold_expr_tuple","fold_expr_type","fold_expr_type","fold_expr_type","fold_expr_unary","fold_expr_unary","fold_expr_unary","fold_expr_unsafe","fold_expr_unsafe","fold_expr_unsafe","fold_expr_while","fold_expr_while","fold_expr_while","fold_expr_yield","fold_expr_yield","fold_expr_yield","fold_field","fold_field","fold_field","fold_field_pat","fold_field_pat","fold_field_pat","fold_field_value","fold_field_value","fold_field_value","fold_fields","fold_fields","fold_fields","fold_fields_named","fold_fields_named","fold_fields_named","fold_fields_unnamed","fold_fields_unnamed","fold_fields_unnamed","fold_file","fold_file","fold_file","fold_fn_arg","fold_fn_arg","fold_fn_arg","fold_foreign_item","fold_foreign_item","fold_foreign_item","fold_foreign_item_fn","fold_foreign_item_fn","fold_foreign_item_fn","fold_foreign_item_macro","fold_foreign_item_macro","fold_foreign_item_macro","fold_foreign_item_static","fold_foreign_item_static","fold_foreign_item_static","fold_foreign_item_type","fold_foreign_item_type","fold_foreign_item_type","fold_generic_argument","fold_generic_argument","fold_generic_argument","fold_generic_method_argument","fold_generic_method_argument","fold_generic_method_argument","fold_generic_param","fold_generic_param","fold_generic_param","fold_generics","fold_generics","fold_generics","fold_ident","fold_ident","fold_ident","fold_impl_item","fold_impl_item","fold_impl_item","fold_impl_item_const","fold_impl_item_const","fold_impl_item_const","fold_impl_item_macro","fold_impl_item_macro","fold_impl_item_macro","fold_impl_item_method","fold_impl_item_method","fold_impl_item_method","fold_impl_item_type","fold_impl_item_type","fold_impl_item_type","fold_index","fold_index","fold_index","fold_item","fold_item","fold_item","fold_item_const","fold_item_const","fold_item_const","fold_item_enum","fold_item_enum","fold_item_enum","fold_item_extern_crate","fold_item_extern_crate","fold_item_extern_crate","fold_item_fn","fold_item_fn","fold_item_fn","fold_item_foreign_mod","fold_item_foreign_mod","fold_item_foreign_mod","fold_item_impl","fold_item_impl","fold_item_impl","fold_item_macro","fold_item_macro","fold_item_macro","fold_item_macro2","fold_item_macro2","fold_item_macro2","fold_item_mod","fold_item_mod","fold_item_mod","fold_item_static","fold_item_static","fold_item_static","fold_item_struct","fold_item_struct","fold_item_struct","fold_item_trait","fold_item_trait","fold_item_trait","fold_item_trait_alias","fold_item_trait_alias","fold_item_trait_alias","fold_item_type","fold_item_type","fold_item_type","fold_item_union","fold_item_union","fold_item_union","fold_item_use","fold_item_use","fold_item_use","fold_label","fold_label","fold_label","fold_lifetime","fold_lifetime","fold_lifetime","fold_lifetime_def","fold_lifetime_def","fold_lifetime_def","fold_lit","fold_lit","fold_lit","fold_lit_bool","fold_lit_bool","fold_lit_bool","fold_lit_byte","fold_lit_byte","fold_lit_byte","fold_lit_byte_str","fold_lit_byte_str","fold_lit_byte_str","fold_lit_char","fold_lit_char","fold_lit_char","fold_lit_float","fold_lit_float","fold_lit_float","fold_lit_int","fold_lit_int","fold_lit_int","fold_lit_str","fold_lit_str","fold_lit_str","fold_local","fold_local","fold_local","fold_macro","fold_macro","fold_macro","fold_macro_delimiter","fold_macro_delimiter","fold_macro_delimiter","fold_member","fold_member","fold_member","fold_meta","fold_meta","fold_meta","fold_meta_list","fold_meta_list","fold_meta_list","fold_meta_name_value","fold_meta_name_value","fold_meta_name_value","fold_method_turbofish","fold_method_turbofish","fold_method_turbofish","fold_nested_meta","fold_nested_meta","fold_nested_meta","fold_parenthesized_generic_arguments","fold_parenthesized_generic_arguments","fold_parenthesized_generic_arguments","fold_pat","fold_pat","fold_pat","fold_pat_box","fold_pat_box","fold_pat_box","fold_pat_ident","fold_pat_ident","fold_pat_ident","fold_pat_lit","fold_pat_lit","fold_pat_lit","fold_pat_macro","fold_pat_macro","fold_pat_macro","fold_pat_or","fold_pat_or","fold_pat_or","fold_pat_path","fold_pat_path","fold_pat_path","fold_pat_range","fold_pat_range","fold_pat_range","fold_pat_reference","fold_pat_reference","fold_pat_reference","fold_pat_rest","fold_pat_rest","fold_pat_rest","fold_pat_slice","fold_pat_slice","fold_pat_slice","fold_pat_struct","fold_pat_struct","fold_pat_struct","fold_pat_tuple","fold_pat_tuple","fold_pat_tuple","fold_pat_tuple_struct","fold_pat_tuple_struct","fold_pat_tuple_struct","fold_pat_type","fold_pat_type","fold_pat_type","fold_pat_wild","fold_pat_wild","fold_pat_wild","fold_path","fold_path","fold_path","fold_path_arguments","fold_path_arguments","fold_path_arguments","fold_path_segment","fold_path_segment","fold_path_segment","fold_predicate_eq","fold_predicate_eq","fold_predicate_eq","fold_predicate_lifetime","fold_predicate_lifetime","fold_predicate_lifetime","fold_predicate_type","fold_predicate_type","fold_predicate_type","fold_qself","fold_qself","fold_qself","fold_range_limits","fold_range_limits","fold_range_limits","fold_receiver","fold_receiver","fold_receiver","fold_return_type","fold_return_type","fold_return_type","fold_signature","fold_signature","fold_signature","fold_span","fold_span","fold_span","fold_stmt","fold_stmt","fold_stmt","fold_trait_bound","fold_trait_bound","fold_trait_bound","fold_trait_bound_modifier","fold_trait_bound_modifier","fold_trait_bound_modifier","fold_trait_item","fold_trait_item","fold_trait_item","fold_trait_item_const","fold_trait_item_const","fold_trait_item_const","fold_trait_item_macro","fold_trait_item_macro","fold_trait_item_macro","fold_trait_item_method","fold_trait_item_method","fold_trait_item_method","fold_trait_item_type","fold_trait_item_type","fold_trait_item_type","fold_type","fold_type","fold_type","fold_type_array","fold_type_array","fold_type_array","fold_type_bare_fn","fold_type_bare_fn","fold_type_bare_fn","fold_type_group","fold_type_group","fold_type_group","fold_type_impl_trait","fold_type_impl_trait","fold_type_impl_trait","fold_type_infer","fold_type_infer","fold_type_infer","fold_type_macro","fold_type_macro","fold_type_macro","fold_type_never","fold_type_never","fold_type_never","fold_type_param","fold_type_param","fold_type_param","fold_type_param_bound","fold_type_param_bound","fold_type_param_bound","fold_type_paren","fold_type_paren","fold_type_paren","fold_type_path","fold_type_path","fold_type_path","fold_type_ptr","fold_type_ptr","fold_type_ptr","fold_type_reference","fold_type_reference","fold_type_reference","fold_type_slice","fold_type_slice","fold_type_slice","fold_type_trait_object","fold_type_trait_object","fold_type_trait_object","fold_type_tuple","fold_type_tuple","fold_type_tuple","fold_un_op","fold_un_op","fold_un_op","fold_use_glob","fold_use_glob","fold_use_glob","fold_use_group","fold_use_group","fold_use_group","fold_use_name","fold_use_name","fold_use_name","fold_use_path","fold_use_path","fold_use_path","fold_use_rename","fold_use_rename","fold_use_rename","fold_use_tree","fold_use_tree","fold_use_tree","fold_variadic","fold_variadic","fold_variadic","fold_variant","fold_variant","fold_variant","fold_vis_crate","fold_vis_crate","fold_vis_crate","fold_vis_public","fold_vis_public","fold_vis_public","fold_vis_restricted","fold_vis_restricted","fold_vis_restricted","fold_visibility","fold_visibility","fold_visibility","fold_where_clause","fold_where_clause","fold_where_clause","fold_where_predicate","fold_where_predicate","fold_where_predicate","Error","Lookahead1","Nothing","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","combine","cursor","deref","discouraged","drop","eq","error","error","error","extend","fmt","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","hash","into","into","into","into","into","into_compile_error","into_iter","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_str","parse_terminated","peek","peek","peek2","peek3","span","span","step","to_compile_error","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Speculative","advance_to","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","empty_or_trailing","eq","extend","extend","first","first_mut","fmt","from","from","from","from","from","from","from","from","from_iter","from_iter","hash","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","punct","punct_mut","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","0","0","1","Spanned","span","Abstract","Add","AddEq","And","AndAnd","AndEq","As","Async","At","Auto","Await","Bang","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Colon2","Comma","Const","Continue","Crate","Default","Div","DivEq","Do","Dollar","Dot","Dot2","Dot3","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Mod","Move","MulEq","Mut","Ne","Or","OrEq","OrOr","Override","Paren","Pound","Priv","Pub","Question","RArrow","Ref","Rem","RemEq","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Star","Static","Struct","Sub","SubEq","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Visit","visit_abi","visit_abi","visit_abi","visit_angle_bracketed_generic_arguments","visit_angle_bracketed_generic_arguments","visit_angle_bracketed_generic_arguments","visit_arm","visit_arm","visit_arm","visit_attr_style","visit_attr_style","visit_attr_style","visit_attribute","visit_attribute","visit_attribute","visit_bare_fn_arg","visit_bare_fn_arg","visit_bare_fn_arg","visit_bin_op","visit_bin_op","visit_bin_op","visit_binding","visit_binding","visit_binding","visit_block","visit_block","visit_block","visit_bound_lifetimes","visit_bound_lifetimes","visit_bound_lifetimes","visit_const_param","visit_const_param","visit_const_param","visit_constraint","visit_constraint","visit_constraint","visit_data","visit_data","visit_data","visit_data_enum","visit_data_enum","visit_data_enum","visit_data_struct","visit_data_struct","visit_data_struct","visit_data_union","visit_data_union","visit_data_union","visit_derive_input","visit_derive_input","visit_derive_input","visit_expr","visit_expr","visit_expr","visit_expr_array","visit_expr_array","visit_expr_array","visit_expr_assign","visit_expr_assign","visit_expr_assign","visit_expr_assign_op","visit_expr_assign_op","visit_expr_assign_op","visit_expr_async","visit_expr_async","visit_expr_async","visit_expr_await","visit_expr_await","visit_expr_await","visit_expr_binary","visit_expr_binary","visit_expr_binary","visit_expr_block","visit_expr_block","visit_expr_block","visit_expr_box","visit_expr_box","visit_expr_box","visit_expr_break","visit_expr_break","visit_expr_break","visit_expr_call","visit_expr_call","visit_expr_call","visit_expr_cast","visit_expr_cast","visit_expr_cast","visit_expr_closure","visit_expr_closure","visit_expr_closure","visit_expr_continue","visit_expr_continue","visit_expr_continue","visit_expr_field","visit_expr_field","visit_expr_field","visit_expr_for_loop","visit_expr_for_loop","visit_expr_for_loop","visit_expr_group","visit_expr_group","visit_expr_group","visit_expr_if","visit_expr_if","visit_expr_if","visit_expr_index","visit_expr_index","visit_expr_index","visit_expr_let","visit_expr_let","visit_expr_let","visit_expr_lit","visit_expr_lit","visit_expr_lit","visit_expr_loop","visit_expr_loop","visit_expr_loop","visit_expr_macro","visit_expr_macro","visit_expr_macro","visit_expr_match","visit_expr_match","visit_expr_match","visit_expr_method_call","visit_expr_method_call","visit_expr_method_call","visit_expr_paren","visit_expr_paren","visit_expr_paren","visit_expr_path","visit_expr_path","visit_expr_path","visit_expr_range","visit_expr_range","visit_expr_range","visit_expr_reference","visit_expr_reference","visit_expr_reference","visit_expr_repeat","visit_expr_repeat","visit_expr_repeat","visit_expr_return","visit_expr_return","visit_expr_return","visit_expr_struct","visit_expr_struct","visit_expr_struct","visit_expr_try","visit_expr_try","visit_expr_try","visit_expr_try_block","visit_expr_try_block","visit_expr_try_block","visit_expr_tuple","visit_expr_tuple","visit_expr_tuple","visit_expr_type","visit_expr_type","visit_expr_type","visit_expr_unary","visit_expr_unary","visit_expr_unary","visit_expr_unsafe","visit_expr_unsafe","visit_expr_unsafe","visit_expr_while","visit_expr_while","visit_expr_while","visit_expr_yield","visit_expr_yield","visit_expr_yield","visit_field","visit_field","visit_field","visit_field_pat","visit_field_pat","visit_field_pat","visit_field_value","visit_field_value","visit_field_value","visit_fields","visit_fields","visit_fields","visit_fields_named","visit_fields_named","visit_fields_named","visit_fields_unnamed","visit_fields_unnamed","visit_fields_unnamed","visit_file","visit_file","visit_file","visit_fn_arg","visit_fn_arg","visit_fn_arg","visit_foreign_item","visit_foreign_item","visit_foreign_item","visit_foreign_item_fn","visit_foreign_item_fn","visit_foreign_item_fn","visit_foreign_item_macro","visit_foreign_item_macro","visit_foreign_item_macro","visit_foreign_item_static","visit_foreign_item_static","visit_foreign_item_static","visit_foreign_item_type","visit_foreign_item_type","visit_foreign_item_type","visit_generic_argument","visit_generic_argument","visit_generic_argument","visit_generic_method_argument","visit_generic_method_argument","visit_generic_method_argument","visit_generic_param","visit_generic_param","visit_generic_param","visit_generics","visit_generics","visit_generics","visit_ident","visit_ident","visit_ident","visit_impl_item","visit_impl_item","visit_impl_item","visit_impl_item_const","visit_impl_item_const","visit_impl_item_const","visit_impl_item_macro","visit_impl_item_macro","visit_impl_item_macro","visit_impl_item_method","visit_impl_item_method","visit_impl_item_method","visit_impl_item_type","visit_impl_item_type","visit_impl_item_type","visit_index","visit_index","visit_index","visit_item","visit_item","visit_item","visit_item_const","visit_item_const","visit_item_const","visit_item_enum","visit_item_enum","visit_item_enum","visit_item_extern_crate","visit_item_extern_crate","visit_item_extern_crate","visit_item_fn","visit_item_fn","visit_item_fn","visit_item_foreign_mod","visit_item_foreign_mod","visit_item_foreign_mod","visit_item_impl","visit_item_impl","visit_item_impl","visit_item_macro","visit_item_macro","visit_item_macro","visit_item_macro2","visit_item_macro2","visit_item_macro2","visit_item_mod","visit_item_mod","visit_item_mod","visit_item_static","visit_item_static","visit_item_static","visit_item_struct","visit_item_struct","visit_item_struct","visit_item_trait","visit_item_trait","visit_item_trait","visit_item_trait_alias","visit_item_trait_alias","visit_item_trait_alias","visit_item_type","visit_item_type","visit_item_type","visit_item_union","visit_item_union","visit_item_union","visit_item_use","visit_item_use","visit_item_use","visit_label","visit_label","visit_label","visit_lifetime","visit_lifetime","visit_lifetime","visit_lifetime_def","visit_lifetime_def","visit_lifetime_def","visit_lit","visit_lit","visit_lit","visit_lit_bool","visit_lit_bool","visit_lit_bool","visit_lit_byte","visit_lit_byte","visit_lit_byte","visit_lit_byte_str","visit_lit_byte_str","visit_lit_byte_str","visit_lit_char","visit_lit_char","visit_lit_char","visit_lit_float","visit_lit_float","visit_lit_float","visit_lit_int","visit_lit_int","visit_lit_int","visit_lit_str","visit_lit_str","visit_lit_str","visit_local","visit_local","visit_local","visit_macro","visit_macro","visit_macro","visit_macro_delimiter","visit_macro_delimiter","visit_macro_delimiter","visit_member","visit_member","visit_member","visit_meta","visit_meta","visit_meta","visit_meta_list","visit_meta_list","visit_meta_list","visit_meta_name_value","visit_meta_name_value","visit_meta_name_value","visit_method_turbofish","visit_method_turbofish","visit_method_turbofish","visit_nested_meta","visit_nested_meta","visit_nested_meta","visit_parenthesized_generic_arguments","visit_parenthesized_generic_arguments","visit_parenthesized_generic_arguments","visit_pat","visit_pat","visit_pat","visit_pat_box","visit_pat_box","visit_pat_box","visit_pat_ident","visit_pat_ident","visit_pat_ident","visit_pat_lit","visit_pat_lit","visit_pat_lit","visit_pat_macro","visit_pat_macro","visit_pat_macro","visit_pat_or","visit_pat_or","visit_pat_or","visit_pat_path","visit_pat_path","visit_pat_path","visit_pat_range","visit_pat_range","visit_pat_range","visit_pat_reference","visit_pat_reference","visit_pat_reference","visit_pat_rest","visit_pat_rest","visit_pat_rest","visit_pat_slice","visit_pat_slice","visit_pat_slice","visit_pat_struct","visit_pat_struct","visit_pat_struct","visit_pat_tuple","visit_pat_tuple","visit_pat_tuple","visit_pat_tuple_struct","visit_pat_tuple_struct","visit_pat_tuple_struct","visit_pat_type","visit_pat_type","visit_pat_type","visit_pat_wild","visit_pat_wild","visit_pat_wild","visit_path","visit_path","visit_path","visit_path_arguments","visit_path_arguments","visit_path_arguments","visit_path_segment","visit_path_segment","visit_path_segment","visit_predicate_eq","visit_predicate_eq","visit_predicate_eq","visit_predicate_lifetime","visit_predicate_lifetime","visit_predicate_lifetime","visit_predicate_type","visit_predicate_type","visit_predicate_type","visit_qself","visit_qself","visit_qself","visit_range_limits","visit_range_limits","visit_range_limits","visit_receiver","visit_receiver","visit_receiver","visit_return_type","visit_return_type","visit_return_type","visit_signature","visit_signature","visit_signature","visit_span","visit_span","visit_span","visit_stmt","visit_stmt","visit_stmt","visit_trait_bound","visit_trait_bound","visit_trait_bound","visit_trait_bound_modifier","visit_trait_bound_modifier","visit_trait_bound_modifier","visit_trait_item","visit_trait_item","visit_trait_item","visit_trait_item_const","visit_trait_item_const","visit_trait_item_const","visit_trait_item_macro","visit_trait_item_macro","visit_trait_item_macro","visit_trait_item_method","visit_trait_item_method","visit_trait_item_method","visit_trait_item_type","visit_trait_item_type","visit_trait_item_type","visit_type","visit_type","visit_type","visit_type_array","visit_type_array","visit_type_array","visit_type_bare_fn","visit_type_bare_fn","visit_type_bare_fn","visit_type_group","visit_type_group","visit_type_group","visit_type_impl_trait","visit_type_impl_trait","visit_type_impl_trait","visit_type_infer","visit_type_infer","visit_type_infer","visit_type_macro","visit_type_macro","visit_type_macro","visit_type_never","visit_type_never","visit_type_never","visit_type_param","visit_type_param","visit_type_param","visit_type_param_bound","visit_type_param_bound","visit_type_param_bound","visit_type_paren","visit_type_paren","visit_type_paren","visit_type_path","visit_type_path","visit_type_path","visit_type_ptr","visit_type_ptr","visit_type_ptr","visit_type_reference","visit_type_reference","visit_type_reference","visit_type_slice","visit_type_slice","visit_type_slice","visit_type_trait_object","visit_type_trait_object","visit_type_trait_object","visit_type_tuple","visit_type_tuple","visit_type_tuple","visit_un_op","visit_un_op","visit_un_op","visit_use_glob","visit_use_glob","visit_use_glob","visit_use_group","visit_use_group","visit_use_group","visit_use_name","visit_use_name","visit_use_name","visit_use_path","visit_use_path","visit_use_path","visit_use_rename","visit_use_rename","visit_use_rename","visit_use_tree","visit_use_tree","visit_use_tree","visit_variadic","visit_variadic","visit_variadic","visit_variant","visit_variant","visit_variant","visit_vis_crate","visit_vis_crate","visit_vis_crate","visit_vis_public","visit_vis_public","visit_vis_public","visit_vis_restricted","visit_vis_restricted","visit_vis_restricted","visit_visibility","visit_visibility","visit_visibility","visit_where_clause","visit_where_clause","visit_where_clause","visit_where_predicate","visit_where_predicate","visit_where_predicate","VisitMut","visit_abi_mut","visit_abi_mut","visit_abi_mut","visit_angle_bracketed_generic_arguments_mut","visit_angle_bracketed_generic_arguments_mut","visit_angle_bracketed_generic_arguments_mut","visit_arm_mut","visit_arm_mut","visit_arm_mut","visit_attr_style_mut","visit_attr_style_mut","visit_attr_style_mut","visit_attribute_mut","visit_attribute_mut","visit_attribute_mut","visit_bare_fn_arg_mut","visit_bare_fn_arg_mut","visit_bare_fn_arg_mut","visit_bin_op_mut","visit_bin_op_mut","visit_bin_op_mut","visit_binding_mut","visit_binding_mut","visit_binding_mut","visit_block_mut","visit_block_mut","visit_block_mut","visit_bound_lifetimes_mut","visit_bound_lifetimes_mut","visit_bound_lifetimes_mut","visit_const_param_mut","visit_const_param_mut","visit_const_param_mut","visit_constraint_mut","visit_constraint_mut","visit_constraint_mut","visit_data_enum_mut","visit_data_enum_mut","visit_data_enum_mut","visit_data_mut","visit_data_mut","visit_data_mut","visit_data_struct_mut","visit_data_struct_mut","visit_data_struct_mut","visit_data_union_mut","visit_data_union_mut","visit_data_union_mut","visit_derive_input_mut","visit_derive_input_mut","visit_derive_input_mut","visit_expr_array_mut","visit_expr_array_mut","visit_expr_array_mut","visit_expr_assign_mut","visit_expr_assign_mut","visit_expr_assign_mut","visit_expr_assign_op_mut","visit_expr_assign_op_mut","visit_expr_assign_op_mut","visit_expr_async_mut","visit_expr_async_mut","visit_expr_async_mut","visit_expr_await_mut","visit_expr_await_mut","visit_expr_await_mut","visit_expr_binary_mut","visit_expr_binary_mut","visit_expr_binary_mut","visit_expr_block_mut","visit_expr_block_mut","visit_expr_block_mut","visit_expr_box_mut","visit_expr_box_mut","visit_expr_box_mut","visit_expr_break_mut","visit_expr_break_mut","visit_expr_break_mut","visit_expr_call_mut","visit_expr_call_mut","visit_expr_call_mut","visit_expr_cast_mut","visit_expr_cast_mut","visit_expr_cast_mut","visit_expr_closure_mut","visit_expr_closure_mut","visit_expr_closure_mut","visit_expr_continue_mut","visit_expr_continue_mut","visit_expr_continue_mut","visit_expr_field_mut","visit_expr_field_mut","visit_expr_field_mut","visit_expr_for_loop_mut","visit_expr_for_loop_mut","visit_expr_for_loop_mut","visit_expr_group_mut","visit_expr_group_mut","visit_expr_group_mut","visit_expr_if_mut","visit_expr_if_mut","visit_expr_if_mut","visit_expr_index_mut","visit_expr_index_mut","visit_expr_index_mut","visit_expr_let_mut","visit_expr_let_mut","visit_expr_let_mut","visit_expr_lit_mut","visit_expr_lit_mut","visit_expr_lit_mut","visit_expr_loop_mut","visit_expr_loop_mut","visit_expr_loop_mut","visit_expr_macro_mut","visit_expr_macro_mut","visit_expr_macro_mut","visit_expr_match_mut","visit_expr_match_mut","visit_expr_match_mut","visit_expr_method_call_mut","visit_expr_method_call_mut","visit_expr_method_call_mut","visit_expr_mut","visit_expr_mut","visit_expr_mut","visit_expr_paren_mut","visit_expr_paren_mut","visit_expr_paren_mut","visit_expr_path_mut","visit_expr_path_mut","visit_expr_path_mut","visit_expr_range_mut","visit_expr_range_mut","visit_expr_range_mut","visit_expr_reference_mut","visit_expr_reference_mut","visit_expr_reference_mut","visit_expr_repeat_mut","visit_expr_repeat_mut","visit_expr_repeat_mut","visit_expr_return_mut","visit_expr_return_mut","visit_expr_return_mut","visit_expr_struct_mut","visit_expr_struct_mut","visit_expr_struct_mut","visit_expr_try_block_mut","visit_expr_try_block_mut","visit_expr_try_block_mut","visit_expr_try_mut","visit_expr_try_mut","visit_expr_try_mut","visit_expr_tuple_mut","visit_expr_tuple_mut","visit_expr_tuple_mut","visit_expr_type_mut","visit_expr_type_mut","visit_expr_type_mut","visit_expr_unary_mut","visit_expr_unary_mut","visit_expr_unary_mut","visit_expr_unsafe_mut","visit_expr_unsafe_mut","visit_expr_unsafe_mut","visit_expr_while_mut","visit_expr_while_mut","visit_expr_while_mut","visit_expr_yield_mut","visit_expr_yield_mut","visit_expr_yield_mut","visit_field_mut","visit_field_mut","visit_field_mut","visit_field_pat_mut","visit_field_pat_mut","visit_field_pat_mut","visit_field_value_mut","visit_field_value_mut","visit_field_value_mut","visit_fields_mut","visit_fields_mut","visit_fields_mut","visit_fields_named_mut","visit_fields_named_mut","visit_fields_named_mut","visit_fields_unnamed_mut","visit_fields_unnamed_mut","visit_fields_unnamed_mut","visit_file_mut","visit_file_mut","visit_file_mut","visit_fn_arg_mut","visit_fn_arg_mut","visit_fn_arg_mut","visit_foreign_item_fn_mut","visit_foreign_item_fn_mut","visit_foreign_item_fn_mut","visit_foreign_item_macro_mut","visit_foreign_item_macro_mut","visit_foreign_item_macro_mut","visit_foreign_item_mut","visit_foreign_item_mut","visit_foreign_item_mut","visit_foreign_item_static_mut","visit_foreign_item_static_mut","visit_foreign_item_static_mut","visit_foreign_item_type_mut","visit_foreign_item_type_mut","visit_foreign_item_type_mut","visit_generic_argument_mut","visit_generic_argument_mut","visit_generic_argument_mut","visit_generic_method_argument_mut","visit_generic_method_argument_mut","visit_generic_method_argument_mut","visit_generic_param_mut","visit_generic_param_mut","visit_generic_param_mut","visit_generics_mut","visit_generics_mut","visit_generics_mut","visit_ident_mut","visit_ident_mut","visit_ident_mut","visit_impl_item_const_mut","visit_impl_item_const_mut","visit_impl_item_const_mut","visit_impl_item_macro_mut","visit_impl_item_macro_mut","visit_impl_item_macro_mut","visit_impl_item_method_mut","visit_impl_item_method_mut","visit_impl_item_method_mut","visit_impl_item_mut","visit_impl_item_mut","visit_impl_item_mut","visit_impl_item_type_mut","visit_impl_item_type_mut","visit_impl_item_type_mut","visit_index_mut","visit_index_mut","visit_index_mut","visit_item_const_mut","visit_item_const_mut","visit_item_const_mut","visit_item_enum_mut","visit_item_enum_mut","visit_item_enum_mut","visit_item_extern_crate_mut","visit_item_extern_crate_mut","visit_item_extern_crate_mut","visit_item_fn_mut","visit_item_fn_mut","visit_item_fn_mut","visit_item_foreign_mod_mut","visit_item_foreign_mod_mut","visit_item_foreign_mod_mut","visit_item_impl_mut","visit_item_impl_mut","visit_item_impl_mut","visit_item_macro2_mut","visit_item_macro2_mut","visit_item_macro2_mut","visit_item_macro_mut","visit_item_macro_mut","visit_item_macro_mut","visit_item_mod_mut","visit_item_mod_mut","visit_item_mod_mut","visit_item_mut","visit_item_mut","visit_item_mut","visit_item_static_mut","visit_item_static_mut","visit_item_static_mut","visit_item_struct_mut","visit_item_struct_mut","visit_item_struct_mut","visit_item_trait_alias_mut","visit_item_trait_alias_mut","visit_item_trait_alias_mut","visit_item_trait_mut","visit_item_trait_mut","visit_item_trait_mut","visit_item_type_mut","visit_item_type_mut","visit_item_type_mut","visit_item_union_mut","visit_item_union_mut","visit_item_union_mut","visit_item_use_mut","visit_item_use_mut","visit_item_use_mut","visit_label_mut","visit_label_mut","visit_label_mut","visit_lifetime_def_mut","visit_lifetime_def_mut","visit_lifetime_def_mut","visit_lifetime_mut","visit_lifetime_mut","visit_lifetime_mut","visit_lit_bool_mut","visit_lit_bool_mut","visit_lit_bool_mut","visit_lit_byte_mut","visit_lit_byte_mut","visit_lit_byte_mut","visit_lit_byte_str_mut","visit_lit_byte_str_mut","visit_lit_byte_str_mut","visit_lit_char_mut","visit_lit_char_mut","visit_lit_char_mut","visit_lit_float_mut","visit_lit_float_mut","visit_lit_float_mut","visit_lit_int_mut","visit_lit_int_mut","visit_lit_int_mut","visit_lit_mut","visit_lit_mut","visit_lit_mut","visit_lit_str_mut","visit_lit_str_mut","visit_lit_str_mut","visit_local_mut","visit_local_mut","visit_local_mut","visit_macro_delimiter_mut","visit_macro_delimiter_mut","visit_macro_delimiter_mut","visit_macro_mut","visit_macro_mut","visit_macro_mut","visit_member_mut","visit_member_mut","visit_member_mut","visit_meta_list_mut","visit_meta_list_mut","visit_meta_list_mut","visit_meta_mut","visit_meta_mut","visit_meta_mut","visit_meta_name_value_mut","visit_meta_name_value_mut","visit_meta_name_value_mut","visit_method_turbofish_mut","visit_method_turbofish_mut","visit_method_turbofish_mut","visit_nested_meta_mut","visit_nested_meta_mut","visit_nested_meta_mut","visit_parenthesized_generic_arguments_mut","visit_parenthesized_generic_arguments_mut","visit_parenthesized_generic_arguments_mut","visit_pat_box_mut","visit_pat_box_mut","visit_pat_box_mut","visit_pat_ident_mut","visit_pat_ident_mut","visit_pat_ident_mut","visit_pat_lit_mut","visit_pat_lit_mut","visit_pat_lit_mut","visit_pat_macro_mut","visit_pat_macro_mut","visit_pat_macro_mut","visit_pat_mut","visit_pat_mut","visit_pat_mut","visit_pat_or_mut","visit_pat_or_mut","visit_pat_or_mut","visit_pat_path_mut","visit_pat_path_mut","visit_pat_path_mut","visit_pat_range_mut","visit_pat_range_mut","visit_pat_range_mut","visit_pat_reference_mut","visit_pat_reference_mut","visit_pat_reference_mut","visit_pat_rest_mut","visit_pat_rest_mut","visit_pat_rest_mut","visit_pat_slice_mut","visit_pat_slice_mut","visit_pat_slice_mut","visit_pat_struct_mut","visit_pat_struct_mut","visit_pat_struct_mut","visit_pat_tuple_mut","visit_pat_tuple_mut","visit_pat_tuple_mut","visit_pat_tuple_struct_mut","visit_pat_tuple_struct_mut","visit_pat_tuple_struct_mut","visit_pat_type_mut","visit_pat_type_mut","visit_pat_type_mut","visit_pat_wild_mut","visit_pat_wild_mut","visit_pat_wild_mut","visit_path_arguments_mut","visit_path_arguments_mut","visit_path_arguments_mut","visit_path_mut","visit_path_mut","visit_path_mut","visit_path_segment_mut","visit_path_segment_mut","visit_path_segment_mut","visit_predicate_eq_mut","visit_predicate_eq_mut","visit_predicate_eq_mut","visit_predicate_lifetime_mut","visit_predicate_lifetime_mut","visit_predicate_lifetime_mut","visit_predicate_type_mut","visit_predicate_type_mut","visit_predicate_type_mut","visit_qself_mut","visit_qself_mut","visit_qself_mut","visit_range_limits_mut","visit_range_limits_mut","visit_range_limits_mut","visit_receiver_mut","visit_receiver_mut","visit_receiver_mut","visit_return_type_mut","visit_return_type_mut","visit_return_type_mut","visit_signature_mut","visit_signature_mut","visit_signature_mut","visit_span_mut","visit_span_mut","visit_span_mut","visit_stmt_mut","visit_stmt_mut","visit_stmt_mut","visit_trait_bound_modifier_mut","visit_trait_bound_modifier_mut","visit_trait_bound_modifier_mut","visit_trait_bound_mut","visit_trait_bound_mut","visit_trait_bound_mut","visit_trait_item_const_mut","visit_trait_item_const_mut","visit_trait_item_const_mut","visit_trait_item_macro_mut","visit_trait_item_macro_mut","visit_trait_item_macro_mut","visit_trait_item_method_mut","visit_trait_item_method_mut","visit_trait_item_method_mut","visit_trait_item_mut","visit_trait_item_mut","visit_trait_item_mut","visit_trait_item_type_mut","visit_trait_item_type_mut","visit_trait_item_type_mut","visit_type_array_mut","visit_type_array_mut","visit_type_array_mut","visit_type_bare_fn_mut","visit_type_bare_fn_mut","visit_type_bare_fn_mut","visit_type_group_mut","visit_type_group_mut","visit_type_group_mut","visit_type_impl_trait_mut","visit_type_impl_trait_mut","visit_type_impl_trait_mut","visit_type_infer_mut","visit_type_infer_mut","visit_type_infer_mut","visit_type_macro_mut","visit_type_macro_mut","visit_type_macro_mut","visit_type_mut","visit_type_mut","visit_type_mut","visit_type_never_mut","visit_type_never_mut","visit_type_never_mut","visit_type_param_bound_mut","visit_type_param_bound_mut","visit_type_param_bound_mut","visit_type_param_mut","visit_type_param_mut","visit_type_param_mut","visit_type_paren_mut","visit_type_paren_mut","visit_type_paren_mut","visit_type_path_mut","visit_type_path_mut","visit_type_path_mut","visit_type_ptr_mut","visit_type_ptr_mut","visit_type_ptr_mut","visit_type_reference_mut","visit_type_reference_mut","visit_type_reference_mut","visit_type_slice_mut","visit_type_slice_mut","visit_type_slice_mut","visit_type_trait_object_mut","visit_type_trait_object_mut","visit_type_trait_object_mut","visit_type_tuple_mut","visit_type_tuple_mut","visit_type_tuple_mut","visit_un_op_mut","visit_un_op_mut","visit_un_op_mut","visit_use_glob_mut","visit_use_glob_mut","visit_use_glob_mut","visit_use_group_mut","visit_use_group_mut","visit_use_group_mut","visit_use_name_mut","visit_use_name_mut","visit_use_name_mut","visit_use_path_mut","visit_use_path_mut","visit_use_path_mut","visit_use_rename_mut","visit_use_rename_mut","visit_use_rename_mut","visit_use_tree_mut","visit_use_tree_mut","visit_use_tree_mut","visit_variadic_mut","visit_variadic_mut","visit_variadic_mut","visit_variant_mut","visit_variant_mut","visit_variant_mut","visit_vis_crate_mut","visit_vis_crate_mut","visit_vis_crate_mut","visit_vis_public_mut","visit_vis_public_mut","visit_vis_public_mut","visit_vis_restricted_mut","visit_vis_restricted_mut","visit_vis_restricted_mut","visit_visibility_mut","visit_visibility_mut","visit_visibility_mut","visit_where_clause_mut","visit_where_clause_mut","visit_where_clause_mut","visit_where_predicate_mut","visit_where_predicate_mut","visit_where_predicate_mut"],"q":["synsyn::AttrStyle","syn::BinOp","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::Data","","","syn::Expr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::Fields","","syn::FnArg","","syn::ForeignItem","","","","","syn::GenericArgument","","","","","syn::GenericMethodArgument","","syn::GenericParam","","","syn::ImplItem","","","","","syn::Item","","","","","","","","","","","","","","","","","syn::Lit","","","","","","","","syn::MacroDelimiter","","","syn::Member","","syn::Meta","","","syn::NestedMeta","","syn::Pat","","","","","","","","","","","","","","","","syn::PathArguments","","syn::RangeLimits","","syn::ReturnType","","syn::Stmt","","","","","syn::StrStyle","syn::TraitBoundModifier","syn::TraitItem","","","","","syn::Type","","","","","","","","","","","","","","","syn::TypeParamBound","","syn::UnOp","","","syn::UseTree","","","","","syn::Visibility","","","syn::WherePredicate","","","syn::buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::ext","","","","syn::foldsyn::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse::discouraged","","syn::punctuated","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::punctuated::Pair","","","syn::spanned","","syn::tokensyn::visitsyn::visit_mutd":["The binary interface of a function: <code>extern &quot;C&quot;</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&amp;&amp;</code> operator (logical and)","The <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.","Angle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …","One arm of a <code>match</code> expression: <code>0...10 =&gt; { return true; }</code>.","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item and …","An attribute like <code>#[repr(transparent)]</code>.","Conventional argument type associated with an invocation …","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","An argument in a function type: the <code>usize</code> in …","A binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A binding (equality constraint) on an associated type: …","A binding (equality constraint) on an associated type: the …","The <code>&amp;</code> operator (bitwise and)","The <code>&amp;=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A braced block containing Rust statements.","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.","A box expression: <code>box f</code>.","A box pattern: <code>box v</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>&#39;a&#39;</code>.","Inclusive at the beginning and end.","A closure expression: <code>|a, b| a + b</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","A constant item: <code>const MAX: u16 = 65535</code>.","An associated constant within the definition of a trait.","An associated constant within an impl block.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","A <code>continue</code>, with an optional label.","An ordinary string like <code>&quot;data&quot;</code>.","A crate-level visibility: <code>crate</code>.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","An enum input to a <code>proc_macro_derive</code> macro.","An equality predicate in a <code>where</code> clause (unsupported).","The <code>==</code> operator (equality)","Error returned when a Syn parser cannot parse the input …","A Rust expression.","Expr without trailing semicolon.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A blocked scope: <code>{ ... }</code>.","A box expression: <code>box f</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A type ascription expression: <code>foo: f64</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A single field in a struct pattern.","A field-value pair in a struct literal.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A complete file of Rust source code.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A free-standing function: …","A foreign function in an <code>extern</code> block.","An argument in a function signature: the <code>n: usize</code> in …","A for loop: <code>for pat in expr { ... }</code>.","An item within an <code>extern</code> block.","A foreign function in an <code>extern</code> block.","A macro invocation within an extern block.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A foreign type in an <code>extern</code> block: <code>type void</code>.","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","The <code>&gt;=</code> operator (greater than or equal to)","An individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.","An individual generic argument to a method, like <code>T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration of …","A glob import in a <code>use</code> item: <code>*</code>.","An expression contained within invisible delimiters.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","A type contained within invisible delimiters.","The <code>&gt;</code> operator (greater than)","Inclusive at the beginning, exclusive at the end.","A word of Rust code, which may be a keyword or legal …","A pattern that binds a new variable: …","An <code>if</code> expression with an optional <code>else</code> block: …","An impl block providing trait or associated items: …","Returned by <code>Generics::split_for_impl</code>.","An item within an impl block.","An associated constant within an impl block.","A macro invocation within an impl block.","A method within an impl block.","An associated type within an impl block.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","Indication that a type should be inferred by the compiler: …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","Things that can appear directly inside of a module or …","An item definition.","A constant item: <code>const MAX: u16 = 65535</code>.","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A free-standing function: …","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","An impl block providing trait or associated items: …","A macro invocation, which includes <code>macro_rules!</code> …","A 2.0-style declarative macro introduced by the <code>macro</code> …","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A type alias: …","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A lifetime labeling a <code>for</code>, <code>while</code>, or <code>loop</code>.","The <code>&lt;=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A Rust lifetime: <code>&#39;a</code>.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A lifetime argument.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","A structured list within an attribute, like …","A Rust literal such as a string or integer or boolean.","A Rust literal, like the <code>&quot;new_name&quot;</code> in …","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A literal pattern: <code>0</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A character literal: <code>&#39;a&#39;</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","A local <code>let</code> binding: <code>let x: u64 = s.parse()?</code>.","A local (let) binding.","Conditionless loop: <code>loop { ... }</code>.","The <code>&lt;</code> operator (less than)","A macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A macro invocation, which includes <code>macro_rules!</code> …","A macro invocation within an extern block.","A macro invocation within the definition of a trait.","A macro invocation within an impl block.","A macro in the type position.","A macro in pattern position.","A 2.0-style declarative macro introduced by the <code>macro</code> …","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured meta item, like the <code>Copy</code> in <code>#[derive(Copy)]</code> …","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A trait method within the definition of a trait.","A method within an impl block.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","The <code>::&lt;&gt;</code> explicit type parameters passed to a method call: …","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","Element of a compile-time attribute list.","The never type: <code>!</code>.","","","The <code>!</code> operator for logical inversion","The <code>||</code> operator (logical or)","A pattern that matches any one of a set of cases.","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized type equivalent to the inner type.","The <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.","Arguments of a function path segment: the <code>(A, B) -&gt; C</code> in …","A pattern in a local binding, function signature, match …","A box pattern: <code>box v</code>.","A pattern that binds a new variable: …","A literal pattern: <code>0</code>.","A macro in pattern position.","A pattern that matches any one of a set of cases.","A path pattern like <code>Color::Red</code>, optionally qualified with a","A range pattern: <code>1..=2</code>.","A reference pattern: <code>&amp;mut var</code>.","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","A type ascription pattern: <code>foo: f64</code>.","A pattern that matches any value: <code>_</code>.","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A path pattern like <code>Color::Red</code>, optionally qualified with a","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","An equality predicate in a <code>where</code> clause (unsupported).","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A range pattern: <code>1..=2</code>.","Limit types of a range, inclusive or exclusive.","A raw string like <code>r##&quot;data&quot;##</code>.","The <code>self</code> argument of an associated method, whether taken …","The <code>self</code> argument of an associated method, whether taken …","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A reference pattern: <code>&amp;mut var</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An renamed identifier imported by a <code>use</code> item: …","An array literal constructed from one repeated element: …","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","Expression with trailing semicolon.","The <code>&lt;&lt;</code> operator (shift left)","The <code>&lt;&lt;=</code> operator","The <code>&gt;&gt;</code> operator (shift right)","The <code>&gt;&gt;=</code> operator","A function signature in a trait or implementation: …","A dynamically sized slice type: <code>[T]</code>.","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A statement, usually ending in a semicolon.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","The style of a string literal, either plain quoted or a …","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A struct input to a <code>proc_macro_derive</code> macro.","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code> …","An item declaration within the definition of a trait.","An associated constant within the definition of a trait.","A macro invocation within the definition of a trait.","A trait method within the definition of a trait.","An associated type within the definition of a trait.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple type: <code>(A, B, C, String)</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A type ascription expression: <code>foo: f64</code>.","A type argument.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A type predicate in a <code>where</code> clause: …","A type alias: …","A foreign type in an <code>extern</code> block: <code>type void</code>.","An associated type within the definition of a trait.","An associated type within an impl block.","A particular type is returned.","A type ascription pattern: <code>foo: f64</code>.","A type argument.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A tuple type: <code>(A, B, C, String)</code>.","A function argument accepted by pattern and type.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","An untagged union input to a <code>proc_macro_derive</code> macro.","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A glob import in a <code>use</code> item: <code>*</code>.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","An renamed identifier imported by a <code>use</code> item: …","A suffix of an import tree in a <code>use</code> item: <code>Type as Renamed</code> …","The variadic argument of a foreign function.","An enum variant.","Tokens in expression position not interpreted by Syn.","Tokens forming an item not interpreted by Syn.","Tokens in an <code>extern</code> block not interpreted by Syn.","Tokens within the definition of a trait not interpreted by …","Tokens within an impl block not interpreted by Syn.","A raw token literal not interpreted by Syn.","Tokens in type position not interpreted by Syn.","Tokens in pattern position not interpreted by Syn.","A crate-level visibility: <code>crate</code>.","A public visibility level: <code>pub</code>.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.","A while loop: <code>while expr { ... }</code>.","A pattern that matches any value: <code>_</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","","","","","","","","","Turn a type’s generics like <code>&lt;X, Y&gt;</code> into a turbofish like …","","","","Attributes tagged on the variant.","Attributes tagged on the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attributes tagged on the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attributes tagged on the whole struct or enum.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses the literal into a selected number typehe type being bounded","","","Trait and lifetime bounds (<code>Clone+Send+&#39;static</code>)","","","","","","","","","","","","","","","","","","","","Parse a set of curly braces and expose their content to …","","","","","","","","Parse a set of square brackets and expose their content to …","","A stably addressed token buffer supporting efficient …he colon in <code>Struct { x: x }</code>. If written in shorthand like …","","","","","","","","","","","","","","","","","","","","Returns an Iterator&lt;Item = &amp;ConstParam&gt; over the constant …","Returns an Iterator&lt;Item = &amp;mut ConstParam&gt; over the …","","","","","","","","","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","Data within the struct or enum.","","","","","","","","","","","","","","Explicit discriminant: <code>Variant = 1</codealue of the field.","","","","","Extension traits to provide parsing methods on foreign …","","","","Content stored in the variantyntax tree traversal to transform the nodes of an owned …","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Generics required to complete the definition.","If this path consists of a single ident, returns the identame of the variant.","Name of the field, if any.","","","","","","The <code>example</code> in <code>macro_rules! example { ... }</code>.","","","","","","","","","","","","","","","","","","","Name of the struct or enum.","","","","","","","","","","","","","","","","<code>(A, B)</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to the …","","","","","","Get an iterator over the borrowed <code>Field</code> items in this …","Get an iterator over the mutably borrowed <code>Field</code> items in …","","","","","","","","","","","","","Returns the number of fields.","","","","","","","","","","Returns an Iterator&lt;Item = &amp;LifetimeDef&gt; over the lifetime …","","The <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator&lt;Item = &amp;mut LifetimeDef&gt; over the …","","","","","","","","","","","","","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","","Name or index of the field.","","","","","","","","","","","","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Panics","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","","","","","","","<code>C</code>","","","","","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a syntax …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","Parse the arguments to the attribute using the given …","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parse the content of a file of Rust code.","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parses the content of the attribute, consisting of the …","Parse a <code>Path</code> containing no path arguments on any of its …","Parses a named (braced struct) field.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","This macro is <code>parse_quote!</code> + <code>quote_spanned!</code>.","Parse a string of Rust code into the chosen syntax tree …","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","Parse the body of a block as zero or more statements, …","An alternative to the primary <code>Expr::parse</code> parser (from the …","","","","","","","","","","","","Returns the identifier that begins this structured meta …","","","","","","","The <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","","","","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","","","","A method’s <code>self</code> receiver, such as <code>&amp;self</code> or …","","","","","","","","","","","","","","The Self type of the impl.","","","","","","","","","","","","","","","","","","","","","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","","","","","","","","","Returns the span of this <code>Ident</codetrait that can provide the <code>Span</code> of the complete contents …","Split a type’s generics into the pieces required for impl…","","","","","Statements in a blockokens representing Rust punctuation, keywords, and …","","","","","","","","","","Trait this impl implementsype of the fieldeturns an Iterator&lt;Item = &amp;TypeParam&gt; over the type …","Returns an Iterator&lt;Item = &amp;mut TypeParam&gt; over the type …","","","","","","","","","","","","","","","","","","","","","","","","","","","Visibility of the field.","","","","","","","","","","","","","","","","","","","","Visibility of the struct or enum.","Syntax tree traversal to walk a shared borrow of a syntax …","Syntax tree traversal to mutate an exclusive borrow of a …","","","","In some positions, types may not contain the <code>+</code> character, …cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple times, …","Creates a cursor referencing the first token in the buffer …","","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the end …","","Returns the argument unchanged.","Returns the argument unchanged.","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","If the cursor is pointing at a <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or <code>Span::call_site()</code>…","","Copies all remaining tokens visible from this cursor into a","If the cursor is pointing at a <code>TokenTree</code>, returns it along …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of an …","Syntax tree traversal to transform the nodes of an owned …rror returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular syntax …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","","Forks a parse stream so that parsing tokens out of either …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Render the error as an invocation of <code>compile_error!</code>.","","","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","Returns the <code>Span</code> of the next token in the parse stream, or …","The source location of the error.","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair&lt;T, P&gt;</code>.","An iterator over borrowed values of type <code>&amp;T</code>.","An iterator over mutably borrowed values of type <code>&amp;mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair&lt;&amp;T, &amp;P&gt;</code>.","An iterator over mutably borrowed pairs of type …","A punctuated sequence of syntax tree nodes of type <code>T</code> …","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it has …","","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Inserts an element at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this punctuated …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and an …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given parse …","Removes the last punctuated pair from this sequence, or …","Borrows the punctuation from this punctuated pair, unless …","Mutably borrows the punctuation from this punctuated pair, …","Appends a syntax tree node onto the end of this punctuated …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this punctuated …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","","","","A trait that can provide the <code>Span</code> of the complete contents …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>+</code>","<code>+=</code>","<code>&amp;</code>","<code>&amp;&amp;</code>","<code>&amp;=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>!</code>","<code>become</code>","<code>box</code>","<code>{...}</code>","<code>[...]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>::</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>/</code>","<code>/=</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=&gt;</code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>&gt;=</code>","None-delimited group","<code>&gt;</code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code>&lt;-</code>","<code>&lt;=</code>","<code>let</code>","<code>loop</code>","<code>&lt;</code>","<code>macro</code>","<code>match</code>","<code>mod</code>","<code>move</code>","<code>*=</code>","<code>mut</code>","<code>!=</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(...)</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-&gt;</code>","<code>ref</code>","<code>%</code>","<code>%=</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code>&lt;&lt;</code>","<code>&lt;&lt;=</code>","<code>&gt;&gt;</code>","<code>&gt;&gt;=</code>","<code>*</code>","<code>static</code>","<code>struct</code>","<code>-</code>","<code>-=</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeyntax tree traversal to walk a shared borrow of a syntax …yntax tree traversal to mutate an exclusive borrow of a …i":[0,142,142,142,185,0,0,25,147,25,25,25,0,0,0,25,147,0,0,25,0,186,142,142,142,142,142,142,0,25,129,0,25,166,136,136,25,129,129,25,25,129,72,25,68,74,87,115,120,186,0,0,186,25,337,21,0,0,0,0,165,143,0,142,142,87,138,83,142,0,0,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,0,25,0,0,0,0,0,0,129,87,110,0,25,0,0,0,0,0,87,142,0,0,0,0,104,25,104,147,142,72,0,166,25,87,0,0,0,0,0,0,147,0,25,147,21,11,129,0,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,25,0,74,79,83,186,0,12,0,15,25,166,0,0,0,0,0,0,0,0,145,25,142,0,25,87,110,115,120,147,166,87,0,25,81,0,0,15,0,0,115,120,25,0,87,142,142,104,12,17,65,142,143,0,147,81,185,143,142,166,11,25,136,147,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,25,104,147,166,0,0,0,0,0,147,21,0,25,166,0,337,0,126,25,147,166,142,142,104,25,166,21,0,25,0,145,142,142,142,142,0,147,166,87,110,0,129,0,25,87,138,166,142,142,0,79,87,87,0,0,0,0,0,0,0,147,25,25,25,147,166,166,0,0,25,68,74,83,87,110,115,120,165,166,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,0,25,87,138,17,17,65,25,87,0,0,0,0,0,0,0,0,25,87,110,115,120,129,147,166,0,0,0,0,0,0,25,166,25,92,125,149,53,158,174,9,35,49,67,187,184,48,36,107,191,1,29,37,125,16,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,69,71,75,76,77,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,111,112,113,114,116,117,118,119,121,122,123,124,127,128,137,146,163,164,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,99,30,135,154,30,39,3,5,3,5,29,32,58,62,91,122,37,40,46,63,71,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,337,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,337,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,84,75,76,84,85,100,118,151,160,189,33,167,18,48,56,89,92,93,99,109,140,144,177,0,10,26,43,54,148,159,176,0,34,0,168,29,37,171,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,9,67,105,187,20,60,69,70,75,76,77,84,85,88,97,99,112,116,118,121,180,182,189,71,42,63,73,73,77,88,116,121,157,125,96,38,23,90,0,0,137,73,78,185,75,77,116,117,118,93,121,122,123,135,16,56,175,177,30,39,49,164,160,148,150,155,157,158,159,26,59,161,176,178,42,89,140,7,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,14,27,44,75,77,86,88,97,100,101,121,123,188,33,34,36,40,41,43,44,48,50,53,54,55,57,60,61,64,69,88,97,121,169,0,90,162,71,16,56,98,102,139,141,177,7,7,7,8,1,2,9,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,65,66,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,3,5,5,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,125,149,0,40,78,7,7,7,7,7,7,7,8,1,2,9,10,11,12,12,12,12,13,14,15,15,15,16,17,17,17,18,19,20,21,21,21,21,22,23,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,65,65,65,66,66,67,68,69,70,71,72,73,74,74,74,74,75,75,76,77,78,79,79,79,80,81,82,83,83,83,83,84,85,86,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,104,104,104,104,104,105,106,107,108,109,110,110,110,110,110,111,112,113,114,115,115,115,115,115,116,117,118,119,120,120,120,120,120,121,122,123,124,125,126,126,126,127,128,129,129,129,129,129,129,129,129,130,131,132,133,3,3,5,5,134,337,135,136,137,137,137,137,138,138,138,138,139,140,141,142,143,144,145,146,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,183,184,184,185,186,187,188,189,190,191,52,35,89,93,98,99,100,101,102,118,123,125,137,183,41,150,67,73,78,187,191,71,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,173,9,16,20,75,77,88,89,90,94,95,96,97,98,99,100,101,102,105,106,107,112,113,116,118,121,123,125,137,168,184,188,189,42,93,151,24,40,43,66,146,37,125,149,190,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,337,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,17,17,17,17,185,183,92,93,99,109,128,17,17,32,34,38,40,46,63,103,183,171,27,28,31,17,54,148,44,146,86,127,76,85,158,73,78,80,84,149,73,52,173,14,45,173,46,67,73,78,187,191,47,94,114,119,124,153,170,95,73,48,39,69,182,49,96,80,37,53,97,112,127,157,158,168,174,70,162,163,18,13,7,9,76,129,130,131,132,133,3,5,134,7,28,31,61,37,37,37,125,149,190,73,13,19,24,35,49,50,59,80,125,149,155,161,178,190,0,0,0,7,9,12,13,14,15,16,18,19,21,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,130,131,132,133,3,5,134,135,137,142,143,144,145,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,183,184,186,187,188,189,190,0,7,10,10,135,135,0,10,0,10,183,20,10,0,0,0,20,130,144,25,7,9,40,44,71,146,167,174,179,180,182,12,10,13,14,24,51,56,80,135,156,172,177,179,191,10,82,22,24,0,51,156,172,57,53,125,49,127,90,107,56,55,86,27,28,31,95,183,127,93,96,54,88,90,94,97,98,100,101,103,111,112,113,114,116,117,118,119,121,123,124,139,146,148,7,9,129,130,131,132,133,3,5,134,128,91,111,117,122,7,7,7,8,1,2,9,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,65,66,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,129,130,130,131,131,132,132,133,133,3,3,5,5,134,134,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,66,134,0,73,108,157,97,112,144,98,139,10,168,129,130,131,132,133,3,5,99,42,52,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,9,3,5,7,8,1,2,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,0,130,131,132,133,3,5,134,10,135,93,99,100,103,105,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,337,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,337,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,58,49,20,36,60,77,88,97,101,112,116,121,123,163,180,188,191,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,337,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,73,73,101,113,118,123,152,181,102,141,19,7,62,93,99,125,149,103,130,131,132,133,134,134,125,149,89,140,20,88,89,90,91,95,96,97,98,99,100,101,102,103,111,112,113,121,122,123,137,0,0,73,82,63,147,151,160,165,64,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,489,490,491,492,493,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,0,0,220,220,221,220,221,221,221,220,221,221,221,220,221,221,221,220,221,221,221,220,220,221,221,221,221,221,220,221,220,221,220,221,0,532,532,532,0,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,533,533,0,0,0,216,0,0,0,0,0,0,0,223,227,223,224,226,225,227,223,224,226,225,223,224,225,224,225,225,223,224,0,223,226,227,223,224,225,223,223,226,225,225,223,227,223,224,226,225,225,226,227,223,224,226,225,225,225,225,223,223,225,225,213,223,216,226,216,216,223,227,223,223,223,223,225,223,225,224,225,223,225,227,223,224,226,225,227,223,224,226,225,227,223,224,226,225,0,534,237,0,0,0,0,0,0,0,0,237,232,234,239,235,236,207,208,237,232,234,239,235,236,207,208,237,232,232,234,235,236,207,237,232,234,235,236,207,237,232,232,232,232,232,232,232,232,232,234,239,235,236,207,208,237,232,232,232,232,232,232,232,234,239,235,236,207,208,237,232,232,232,234,239,235,236,207,208,232,237,237,232,232,232,232,232,232,234,239,235,236,207,208,232,237,234,239,235,236,207,208,234,239,235,236,207,208,232,232,232,232,232,232,232,237,237,232,232,232,234,239,235,236,207,208,232,237,232,234,235,236,207,237,232,237,232,232,234,239,235,236,207,208,237,232,234,239,235,236,207,208,237,232,234,239,235,236,207,208,237,237,237,535,536,535,0,537,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,240,241,242,243,244,245,246,247,248,249,201,250,251,252,253,254,202,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,199,198,273,274,200,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,203,240,241,242,243,244,245,246,247,248,249,201,250,251,252,253,254,202,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,199,198,273,274,200,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,203,240,241,242,243,244,245,246,247,248,249,201,250,251,252,253,254,202,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,199,198,273,274,200,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,203,240,241,242,243,244,245,246,247,248,249,201,250,251,252,253,254,202,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,199,198,273,274,200,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,203,240,241,242,243,244,245,246,247,248,249,201,250,251,252,253,254,202,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,199,198,273,274,200,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,203,287,289,292,293,294,296,298,299,301,302,306,309,311,314,317,318,321,324,329,330,332,203,287,289,292,293,294,296,298,299,301,302,306,309,311,314,317,318,321,324,329,330,332,203,240,241,242,243,244,245,246,247,248,249,201,250,251,252,253,254,202,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,199,198,273,274,200,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,203,240,241,242,243,244,245,246,247,248,249,201,250,251,252,253,254,202,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,199,198,273,274,200,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,203,240,241,242,243,244,245,246,247,248,249,201,250,251,252,253,254,202,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,199,198,273,274,200,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,203,240,241,242,243,244,245,246,247,248,249,201,250,251,252,253,254,202,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,199,198,273,274,200,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,203,240,241,242,243,244,245,246,247,248,249,201,250,251,252,253,254,202,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,199,198,273,274,200,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,203,240,241,242,243,244,245,246,247,248,249,201,250,251,252,253,254,202,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,199,198,273,274,200,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,203,240,241,242,243,244,245,246,247,248,249,201,250,251,252,253,254,202,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,199,198,273,274,200,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,240,241,242,243,244,245,246,247,248,249,201,250,251,252,253,254,202,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,199,198,273,274,200,275,276,277,278,279,280,281,282,283,284,285,286,333,334,335,336,203,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,203,240,241,242,243,244,245,246,247,248,249,201,250,251,252,253,254,202,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,199,198,273,274,200,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,203,240,241,242,243,244,245,246,247,248,249,201,250,251,252,253,254,202,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,199,198,273,274,200,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,203,240,241,242,243,244,245,246,247,248,249,201,250,251,252,253,254,202,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,199,198,273,274,200,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,203,240,241,242,243,244,245,246,247,248,249,201,250,251,252,253,254,202,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,199,198,273,274,200,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,203,240,241,242,243,244,245,246,247,248,249,201,250,251,252,253,254,202,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,199,198,273,274,200,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,0,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539],"fp":[[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitInt"],[15,"str"],[3,"LitFloat"],[6,"Result"],[3,"Ident"],[3,"ImplGenerics"],[3,"Lifetime"],[3,"Attribute"],[4,"AttrStyle"],[4,"Meta"],[3,"MetaList"],[3,"MetaNameValue"],[4,"NestedMeta"],[3,"Variant"],[4,"Fields"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Field"],[4,"Visibility"],[3,"VisPublic"],[3,"VisCrate"],[3,"VisRestricted"],[4,"Expr"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprAsync"],[3,"ExprAwait"],[3,"ExprBinary"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprIndex"],[3,"ExprLet"],[3,"ExprLit"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTryBlock"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnary"],[3,"ExprUnsafe"],[3,"ExprWhile"],[3,"ExprYield"],[4,"Member"],[3,"Index"],[3,"MethodTurbofish"],[4,"GenericMethodArgument"],[3,"FieldValue"],[3,"Label"],[3,"Arm"],[4,"RangeLimits"],[3,"Generics"],[4,"GenericParam"],[3,"TypeParam"],[3,"LifetimeDef"],[3,"ConstParam"],[3,"BoundLifetimes"],[4,"TypeParamBound"],[3,"TraitBound"],[4,"TraitBoundModifier"],[3,"WhereClause"],[4,"WherePredicate"],[3,"PredicateType"],[3,"PredicateLifetime"],[3,"PredicateEq"],[4,"Item"],[3,"ItemConst"],[3,"ItemEnum"],[3,"ItemExternCrate"],[3,"ItemFn"],[3,"ItemForeignMod"],[3,"ItemImpl"],[3,"ItemMacro"],[3,"ItemMacro2"],[3,"ItemMod"],[3,"ItemStatic"],[3,"ItemStruct"],[3,"ItemTrait"],[3,"ItemTraitAlias"],[3,"ItemType"],[3,"ItemUnion"],[3,"ItemUse"],[4,"UseTree"],[3,"UsePath"],[3,"UseName"],[3,"UseRename"],[3,"UseGlob"],[3,"UseGroup"],[4,"ForeignItem"],[3,"ForeignItemFn"],[3,"ForeignItemStatic"],[3,"ForeignItemType"],[3,"ForeignItemMacro"],[4,"TraitItem"],[3,"TraitItemConst"],[3,"TraitItemMethod"],[3,"TraitItemType"],[3,"TraitItemMacro"],[4,"ImplItem"],[3,"ImplItemConst"],[3,"ImplItemMethod"],[3,"ImplItemType"],[3,"ImplItemMacro"],[3,"Signature"],[4,"FnArg"],[3,"Receiver"],[3,"File"],[4,"Lit"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitBool"],[3,"Macro"],[4,"MacroDelimiter"],[3,"DeriveInput"],[4,"Data"],[3,"DataStruct"],[3,"DataEnum"],[3,"DataUnion"],[4,"BinOp"],[4,"UnOp"],[3,"Block"],[4,"Stmt"],[3,"Local"],[4,"Type"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"Abi"],[3,"BareFnArg"],[3,"Variadic"],[4,"ReturnType"],[4,"Pat"],[3,"PatBox"],[3,"PatIdent"],[3,"PatLit"],[3,"PatMacro"],[3,"PatOr"],[3,"PatPath"],[3,"PatRange"],[3,"PatReference"],[3,"PatRest"],[3,"PatSlice"],[3,"PatStruct"],[3,"PatTuple"],[3,"PatTupleStruct"],[3,"PatType"],[3,"PatWild"],[3,"FieldPat"],[3,"Path"],[3,"PathSegment"],[4,"PathArguments"],[4,"GenericArgument"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[3,"QSelf"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[3,"SelfValue"],[3,"SelfType"],[3,"Super"],[3,"Crate"],[3,"Extern"],[3,"Underscore"],[15,"usize"],[3,"Literal"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"Span"],[15,"u8"],[15,"char"],[3,"TokenStream"],[8,"Parse"],[6,"ParseStream"],[3,"TokenStream"],[8,"Parser"],[3,"Vec"],[3,"String"],[3,"TypeId"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Delimiter"],[3,"ParseBuffer"],[3,"StepCursor"],[3,"Error"],[3,"Nothing"],[3,"Lookahead1"],[8,"Display"],[8,"IntoIterator"],[3,"LexError"],[8,"ToTokens"],[3,"Punctuated"],[8,"Peek"],[3,"Pairs"],[3,"IntoPairs"],[3,"IntoIter"],[4,"Pair"],[8,"Debug"],[3,"PairsMut"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Await"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Static"],[3,"Struct"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[4,"StrStyle"],[13,"Inner"],[13,"Add"],[13,"Sub"],[13,"Mul"],[13,"Div"],[13,"Rem"],[13,"And"],[13,"Or"],[13,"BitXor"],[13,"BitAnd"],[13,"BitOr"],[13,"Shl"],[13,"Shr"],[13,"Eq"],[13,"Lt"],[13,"Le"],[13,"Ne"],[13,"Ge"],[13,"Gt"],[13,"AddEq"],[13,"SubEq"],[13,"MulEq"],[13,"DivEq"],[13,"RemEq"],[13,"BitXorEq"],[13,"BitAndEq"],[13,"BitOrEq"],[13,"ShlEq"],[13,"ShrEq"],[13,"Struct"],[13,"Enum"],[13,"Union"],[13,"Array"],[13,"Assign"],[13,"AssignOp"],[13,"Async"],[13,"Await"],[13,"Binary"],[13,"Block"],[13,"Box"],[13,"Break"],[13,"Call"],[13,"Cast"],[13,"Closure"],[13,"Continue"],[13,"Field"],[13,"ForLoop"],[13,"Group"],[13,"If"],[13,"Index"],[13,"Let"],[13,"Lit"],[13,"Loop"],[13,"Macro"],[13,"Match"],[13,"MethodCall"],[13,"Paren"],[13,"Path"],[13,"Range"],[13,"Reference"],[13,"Repeat"],[13,"Return"],[13,"Struct"],[13,"Try"],[13,"TryBlock"],[13,"Tuple"],[13,"Type"],[13,"Unary"],[13,"Unsafe"],[13,"Verbatim"],[13,"While"],[13,"Yield"],[13,"Named"],[13,"Unnamed"],[13,"Receiver"],[13,"Typed"],[13,"Fn"],[13,"Static"],[13,"Type"],[13,"Macro"],[13,"Verbatim"],[13,"Lifetime"],[13,"Type"],[13,"Binding"],[13,"Constraint"],[13,"Const"],[13,"Type"],[13,"Const"],[13,"Type"],[13,"Lifetime"],[13,"Const"],[13,"Const"],[13,"Method"],[13,"Type"],[13,"Macro"],[13,"Verbatim"],[13,"Const"],[13,"Enum"],[13,"ExternCrate"],[13,"Fn"],[13,"ForeignMod"],[13,"Impl"],[13,"Macro"],[13,"Macro2"],[13,"Mod"],[13,"Static"],[13,"Struct"],[13,"Trait"],[13,"TraitAlias"],[13,"Type"],[13,"Union"],[13,"Use"],[13,"Verbatim"],[13,"Str"],[13,"ByteStr"],[13,"Byte"],[13,"Char"],[13,"Int"],[13,"Float"],[13,"Bool"],[13,"Verbatim"],[13,"Paren"],[13,"Brace"],[13,"Bracket"],[13,"Named"],[13,"Unnamed"],[13,"Path"],[13,"List"],[13,"NameValue"],[13,"Meta"],[13,"Lit"],[13,"Box"],[13,"Ident"],[13,"Lit"],[13,"Macro"],[13,"Or"],[13,"Path"],[13,"Range"],[13,"Reference"],[13,"Rest"],[13,"Slice"],[13,"Struct"],[13,"Tuple"],[13,"TupleStruct"],[13,"Type"],[13,"Verbatim"],[13,"Wild"],[13,"AngleBracketed"],[13,"Parenthesized"],[13,"HalfOpen"],[13,"Closed"],[13,"Type"],[13,"Local"],[13,"Item"],[13,"Expr"],[13,"Semi"],[13,"Raw"],[13,"Maybe"],[13,"Const"],[13,"Method"],[13,"Type"],[13,"Macro"],[13,"Verbatim"],[13,"Array"],[13,"BareFn"],[13,"Group"],[13,"ImplTrait"],[13,"Infer"],[13,"Macro"],[13,"Never"],[13,"Paren"],[13,"Path"],[13,"Ptr"],[13,"Reference"],[13,"Slice"],[13,"TraitObject"],[13,"Tuple"],[13,"Verbatim"],[13,"Trait"],[13,"Lifetime"],[13,"Deref"],[13,"Not"],[13,"Neg"],[13,"Path"],[13,"Name"],[13,"Rename"],[13,"Glob"],[13,"Group"],[13,"Public"],[13,"Crate"],[13,"Restricted"],[13,"Type"],[13,"Lifetime"],[13,"Eq"],[8,"IdentExt"],[8,"Fold"],[8,"Speculative"],[13,"Punctuated"],[13,"End"],[8,"Spanned"],[8,"Visit"],[8,"VisitMut"]]},\
"synstructure":{"doc":"This crate provides helper types for matching against enum …","t":[4,4,3,13,13,13,8,13,13,13,13,13,3,3,3,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,10,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11],"n":["AddBounds","BindStyle","BindingInfo","Both","Fields","Generics","MacroResult","Move","MoveMut","None","Ref","RefMut","Structure","VariantAst","VariantInfo","add_bounds","add_impl_generic","add_trait_bounds","add_where_predicate","ast","ast","ast","attrs","bind_with","bind_with","binding","binding_name","binding_name","bindings","bindings_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound_impl","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","construct","decl_attribute","decl_derive","discriminant","each","each","each_variant","eq","eq","eq","eq","eq","eq","fields","filter","filter","filter_variants","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","from","from","from","from","from","from","gen_impl","hash","hash","hash","hash","hash","hash","ident","into","into","into","into","into","into","into_result","into_stream","new","omitted_bindings","omitted_variants","pat","pat","prefix","referenced_ty_params","referenced_ty_params","referenced_ty_params","remove_binding","remove_variant","span","span","style","test_derive","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_new","type_id","type_id","type_id","type_id","type_id","type_id","unbound_impl","underscore_const","unpretty_print","unsafe_bound_impl","unsafe_unbound_impl","variants","variants_mut"],"q":["synstructure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Changes how bounds are added","The type of binding to use when generating a pattern.","Information about a specific binding. This contains both …","Add for fields and generics","Fields only","Generics only","Helper trait describing values which may be returned by …","<code>x</code>","<code>mut x</code>","None","<code>ref x</code>","<code>ref mut x</code>","A wrapper around a <code>syn::DeriveInput</code> which provides …","This type is similar to <code>syn</code>’s <code>Variant</code> type, however each …","A wrapper around a <code>syn::DeriveInput</code>’s variant which …","Specify which bounds should be generated by …","Adds an <code>impl&lt;&gt;</code> generic parameter. This can be used when …","Add trait bounds for a trait with the given path for each …","Specify additional where predicate bounds which should be …","Returns a reference to the underlying <code>syn</code> AST node which …","Returns a <code>VariantAst</code> object which contains references to …","Returns a reference to the underlying <code>syn</code> AST node which …","","Updates the <code>BindStyle</code> for each of the passed-in fields by …","Updates the <code>BindStyle</code> for each of the passed-in fields by …","The name which this BindingInfo will bind to.","Updates the binding name for each fo the passed-in fields …","Updates the binding name for each fo the passed-in fields …","Returns a slice of the bindings in this Variant.","Returns a mut slice of the bindings in this Variant.","","","","","","","","","","","","","NOTE: This methods’ features are superceded by …","","","","","","","","","","","","","Generates the token stream required to construct the …","The <code>decl_attribute!</code> macro declares a custom attribute …","The <code>decl_derive!</code> macro declares a custom derive wrapper. …","","Runs the passed-in function once for each bound field, …","Runs the passed-in function once for each bound field, …","Runs the passed-in function once for each variant, passing …","","","","","","","","Filter the bindings created by this <code>Variant</code> object. This …","Filter the bindings created by this <code>Structure</code> object. This …","Filter the variants matched by this <code>Structure</code> object. This …","","","","","","","Runs the passed-in function once for each bound field, …","Runs the passed-in function once for each bound field, …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Generate an impl block for the given struct. This impl …","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this result into a <code>Result</code> for further processing / …","Convert this result into a <code>proc_macro::TokenStream</code>, ready …","Create a new <code>Structure</code> with the variants and fields from …","True if any bindings were omitted due to a <code>filter</code> call.","True if any variants were omitted due to a <code>filter_variants</code> …","Generates the pattern fragment for this field binding.","Generates the match-arm pattern which could be used to …","","Returns a list of the type parameters which are referenced …","Returns a list of the type parameters which are referenced …","Returns a list of the type parameters which are refrenced …","Remove the binding at the given index.","Remove the variant at the given index.","","","The type of binding which this BindingInfo will create.","Run a test on a custom derive. This macro expands both the …","","","","","","","","","","","","","","","","","","","","","Create a new <code>Structure</code> with the variants and fields from …","","","","","","","NOTE: This methods’ features are superceded by …","Configure whether to use <code>const _</code> instead of a generated …","Dumps an unpretty version of a tokenstream. Takes any type …","NOTE: This methods’ features are superceded by …","NOTE: This methods’ features are superceded by …","Returns a slice of the variants in this Structure.","Returns a mut slice of the variants in this Structure."],"i":[0,0,0,2,2,2,0,14,14,2,14,14,0,0,0,1,1,1,1,7,9,1,10,9,1,7,9,1,9,9,2,14,7,10,9,1,2,14,7,10,9,1,1,2,14,7,10,9,1,2,14,7,10,9,1,9,0,0,10,9,1,1,2,14,7,10,9,1,10,9,1,1,2,14,7,10,9,1,9,1,2,14,7,10,9,1,1,2,14,7,10,9,1,10,2,14,7,10,9,1,28,28,1,9,1,7,9,9,7,9,1,9,1,14,7,7,0,2,14,7,10,9,1,14,7,2,14,7,10,9,1,2,14,7,10,9,1,1,2,14,7,10,9,1,1,1,0,1,1,1,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],[[1,3],1],[[1,4,5,2]],[[1,6],1],[7,8],[9,10],[1,11],0,[9,9],[1,1],0,[9,9],[1,1],[9],[9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,12,12],13],[2,2],[14,14],[7,7],[10,10],[9,9],[1,1],[[]],[[]],[[]],[[]],[[]],[[]],[9,13],0,0,0,[9,13],[1,13],[1,13],[[2,2],15],[[14,14],15],[[7,7],15],[[10,10],15],[[9,9],15],[[1,1],15],0,[9,9],[1,1],[1,1],[[2,16],17],[[14,16],17],[[7,16],17],[[10,16],17],[[9,16],17],[[1,16],17],[9,13],[1,13],[[]],[[]],[[]],[[]],[[]],[[]],[[1,13],13],[2],[14],[7],[10],[9],[1],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],[[18,[13]]]],[[],19],[11,1],[9,15],[1,15],[7,13],[9,13],0,[7,[[21,[20]]]],[9,[[21,[20]]]],[1,[[21,[20]]]],[[9,22],9],[[1,22],1],[[],23],[[],23],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[14,13]],[[7,13]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[11,[[18,[1]]]],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[1,12,12],13],[[1,15],1],[26,27],[[1,12,12],13],[[1,12,12],13],[1],[1]],"p":[[3,"Structure"],[4,"AddBounds"],[4,"GenericParam"],[3,"TraitBound"],[4,"Option"],[4,"WherePredicate"],[3,"BindingInfo"],[3,"Field"],[3,"VariantInfo"],[3,"VariantAst"],[3,"DeriveInput"],[8,"ToTokens"],[3,"TokenStream"],[4,"BindStyle"],[15,"bool"],[3,"Formatter"],[6,"Result"],[6,"Result"],[3,"TokenStream"],[3,"Ident"],[3,"Vec"],[15,"usize"],[3,"Span"],[4,"Result"],[3,"TypeId"],[8,"Display"],[3,"String"],[8,"MacroResult"]]},\
"tap":{"doc":"<code>tap</code> – Syntactical Plumb-Lines","t":[8,16,16,8,8,8,8,8,16,0,11,0,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,10,11,10,11,10,11,11,11,11,11,10,11,10,11,11,8,8,11,11,8,11,11,11,11,11,11,11,11,11,8,16,16,8,8,8,8,8,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,10,11,10,11,10,11,11,11,11,11,10,11,10,11,11,16,16,8,8,8,16,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,10,11,10,11,10,11,11,11,11,11,10,11,10,11],"n":["Conv","Err","Ok","Pipe","Tap","TapFallible","TapOptional","TryConv","Val","conv","conv","pipe","pipe","pipe_as_mut","pipe_as_ref","pipe_borrow","pipe_borrow_mut","pipe_deref","pipe_deref_mut","pipe_ref","pipe_ref_mut","prelude","tap","tap","tap_borrow","tap_borrow_dbg","tap_borrow_mut","tap_borrow_mut_dbg","tap_dbg","tap_deref","tap_deref_dbg","tap_deref_mut","tap_deref_mut_dbg","tap_err","tap_err_dbg","tap_err_mut","tap_err_mut_dbg","tap_mut","tap_mut_dbg","tap_none","tap_none_dbg","tap_ok","tap_ok_dbg","tap_ok_mut","tap_ok_mut_dbg","tap_ref","tap_ref_dbg","tap_ref_mut","tap_ref_mut_dbg","tap_some","tap_some_dbg","tap_some_mut","tap_some_mut_dbg","try_conv","Conv","TryConv","conv","try_conv","Pipe","pipe","pipe_as_mut","pipe_as_ref","pipe_borrow","pipe_borrow_mut","pipe_deref","pipe_deref_mut","pipe_ref","pipe_ref_mut","Conv","Err","Ok","Pipe","Tap","TapFallible","TapOptional","TryConv","Val","conv","pipe","pipe_as_mut","pipe_as_ref","pipe_borrow","pipe_borrow_mut","pipe_deref","pipe_deref_mut","pipe_ref","pipe_ref_mut","tap","tap_borrow","tap_borrow_dbg","tap_borrow_mut","tap_borrow_mut_dbg","tap_dbg","tap_deref","tap_deref_dbg","tap_deref_mut","tap_deref_mut_dbg","tap_err","tap_err_dbg","tap_err_mut","tap_err_mut_dbg","tap_mut","tap_mut_dbg","tap_none","tap_none_dbg","tap_ok","tap_ok_dbg","tap_ok_mut","tap_ok_mut_dbg","tap_ref","tap_ref_dbg","tap_ref_mut","tap_ref_mut_dbg","tap_some","tap_some_dbg","tap_some_mut","tap_some_mut_dbg","try_conv","Err","Ok","Tap","TapFallible","TapOptional","Val","tap","tap_borrow","tap_borrow_dbg","tap_borrow_mut","tap_borrow_mut_dbg","tap_dbg","tap_deref","tap_deref_dbg","tap_deref_mut","tap_deref_mut_dbg","tap_err","tap_err_dbg","tap_err_mut","tap_err_mut_dbg","tap_mut","tap_mut_dbg","tap_none","tap_none_dbg","tap_ok","tap_ok_dbg","tap_ok_mut","tap_ok_mut_dbg","tap_ref","tap_ref_dbg","tap_ref_mut","tap_ref_mut_dbg","tap_some","tap_some_dbg","tap_some_mut","tap_some_mut_dbg"],"q":["tap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tap::conv","","","","tap::pipe","","","","","","","","","","tap::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tap::tap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Wraps <code>Into::&lt;T&gt;::into</code> as a method that can be placed in …","The interior type used to indicate a failed construction.","The interior type used to indicate a successful …","Provides universal suffix-position call syntax for any …","Point-free value inspection and modification.","Fallible tapping, conditional on the optional success of …","Optional tapping, conditional on the optional presence of …","Wraps <code>TryInto::&lt;T&gt;::try_into</code> as a method that can be …","The interior type that the container may or may not carry.","Method-Directed Type Conversion","Converts <code>self</code> into <code>T</code> using <code>Into&lt;T&gt;</code>.","Universal Suffix Calls","Pipes by value. This is generally the method you want to …","Mutably borrows <code>self</code>, then passes <code>self.as_mut()</code> into the …","Borrows <code>self</code>, then passes <code>self.as_ref()</code> into the pipe …","Borrows <code>self</code>, then passes <code>self.borrow()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.borrow_mut()</code> into …","Borrows <code>self</code>, then passes <code>self.deref()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.deref_mut()</code> into …","Borrows <code>self</code> and passes that borrow into the pipe function.","Mutably borrows <code>self</code> and passes that borrow into the pipe …","Reëxports all traits in one place, for easy import.","Point-Free Inspection","Immutable access to a value.","Immutable access to the <code>Borrow&lt;B&gt;</code> of a value.","Calls <code>.tap_borrow()</code> only in debug builds, and is erased in …","Mutable access to the <code>BorrowMut&lt;B&gt;</code> of a value.","Calls <code>.tap_borrow_mut()</code> only in debug builds, and is …","Calls <code>.tap()</code> only in debug builds, and is erased in …","Immutable access to the <code>Deref::Target</code> of a value.","Calls <code>.tap_deref()</code> only in debug builds, and is erased in …","Mutable access to the <code>Deref::Target</code> of a value.","Calls <code>.tap_deref_mut()</code> only in debug builds, and is erased …","Immutably accesses an interior failure value.","Calls <code>.tap_err()</code> only in debug builds, and is erased in …","Mutably accesses an interior failure value.","Calls <code>.tap_err_mut()</code> only in debug builds, and is erased …","Mutable access to a value.","Calls <code>.tap_mut()</code> only in debug builds, and is erased in …","Runs an effect function when the container is empty.","Calls <code>.tap_none()</code> only in debug builds, and is erased in …","Immutably accesses an interior success value.","Calls <code>.tap_ok()</code> only in debug builds, and is erased in …","Mutably accesses an interior success value.","Calls <code>.tap_ok_mut()</code> only in debug builds, and is erased in …","Immutable access to the <code>AsRef&lt;R&gt;</code> view of a value.","Calls <code>.tap_ref()</code> only in debug builds, and is erased in …","Mutable access to the <code>AsMut&lt;R&gt;</code> view of a value.","Calls <code>.tap_ref_mut()</code> only in debug builds, and is erased …","Immutabily accesses an interior value only when it is …","Calls <code>.tap_some()</code> only in debug builds, and is erased in …","Mutably accesses an interor value only when it is present.","Calls <code>.tap_some_mut()</code> only in debug builds, and is erased …","Attempts to convert <code>self</code> into <code>T</code> using <code>TryInto&lt;T&gt;</code>.","Wraps <code>Into::&lt;T&gt;::into</code> as a method that can be placed in …","Wraps <code>TryInto::&lt;T&gt;::try_into</code> as a method that can be …","Converts <code>self</code> into <code>T</code> using <code>Into&lt;T&gt;</code>.","Attempts to convert <code>self</code> into <code>T</code> using <code>TryInto&lt;T&gt;</code>.","Provides universal suffix-position call syntax for any …","Pipes by value. This is generally the method you want to …","Mutably borrows <code>self</code>, then passes <code>self.as_mut()</code> into the …","Borrows <code>self</code>, then passes <code>self.as_ref()</code> into the pipe …","Borrows <code>self</code>, then passes <code>self.borrow()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.borrow_mut()</code> into …","Borrows <code>self</code>, then passes <code>self.deref()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.deref_mut()</code> into …","Borrows <code>self</code> and passes that borrow into the pipe function.","Mutably borrows <code>self</code> and passes that borrow into the pipe …","Wraps <code>Into::&lt;T&gt;::into</code> as a method that can be placed in …","The interior type used to indicate a failed construction.","The interior type used to indicate a successful …","Provides universal suffix-position call syntax for any …","Point-free value inspection and modification.","Fallible tapping, conditional on the optional success of …","Optional tapping, conditional on the optional presence of …","Wraps <code>TryInto::&lt;T&gt;::try_into</code> as a method that can be …","The interior type that the container may or may not carry.","Converts <code>self</code> into <code>T</code> using <code>Into&lt;T&gt;</code>.","Pipes by value. This is generally the method you want to …","Mutably borrows <code>self</code>, then passes <code>self.as_mut()</code> into the …","Borrows <code>self</code>, then passes <code>self.as_ref()</code> into the pipe …","Borrows <code>self</code>, then passes <code>self.borrow()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.borrow_mut()</code> into …","Borrows <code>self</code>, then passes <code>self.deref()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.deref_mut()</code> into …","Borrows <code>self</code> and passes that borrow into the pipe function.","Mutably borrows <code>self</code> and passes that borrow into the pipe …","Immutable access to a value.","Immutable access to the <code>Borrow&lt;B&gt;</code> of a value.","Calls <code>.tap_borrow()</code> only in debug builds, and is erased in …","Mutable access to the <code>BorrowMut&lt;B&gt;</code> of a value.","Calls <code>.tap_borrow_mut()</code> only in debug builds, and is …","Calls <code>.tap()</code> only in debug builds, and is erased in …","Immutable access to the <code>Deref::Target</code> of a value.","Calls <code>.tap_deref()</code> only in debug builds, and is erased in …","Mutable access to the <code>Deref::Target</code> of a value.","Calls <code>.tap_deref_mut()</code> only in debug builds, and is erased …","Immutably accesses an interior failure value.","Calls <code>.tap_err()</code> only in debug builds, and is erased in …","Mutably accesses an interior failure value.","Calls <code>.tap_err_mut()</code> only in debug builds, and is erased …","Mutable access to a value.","Calls <code>.tap_mut()</code> only in debug builds, and is erased in …","Runs an effect function when the container is empty.","Calls <code>.tap_none()</code> only in debug builds, and is erased in …","Immutably accesses an interior success value.","Calls <code>.tap_ok()</code> only in debug builds, and is erased in …","Mutably accesses an interior success value.","Calls <code>.tap_ok_mut()</code> only in debug builds, and is erased in …","Immutable access to the <code>AsRef&lt;R&gt;</code> view of a value.","Calls <code>.tap_ref()</code> only in debug builds, and is erased in …","Mutable access to the <code>AsMut&lt;R&gt;</code> view of a value.","Calls <code>.tap_ref_mut()</code> only in debug builds, and is erased …","Immutabily accesses an interior value only when it is …","Calls <code>.tap_some()</code> only in debug builds, and is erased in …","Mutably accesses an interor value only when it is present.","Calls <code>.tap_some_mut()</code> only in debug builds, and is erased …","Attempts to convert <code>self</code> into <code>T</code> using <code>TryInto&lt;T&gt;</code>.","The interior type used to indicate a failed construction.","The interior type used to indicate a successful …","Point-free value inspection and modification.","Fallible tapping, conditional on the optional success of …","Optional tapping, conditional on the optional presence of …","The interior type that the container may or may not carry.","Immutable access to a value.","Immutable access to the <code>Borrow&lt;B&gt;</code> of a value.","Calls <code>.tap_borrow()</code> only in debug builds, and is erased in …","Mutable access to the <code>BorrowMut&lt;B&gt;</code> of a value.","Calls <code>.tap_borrow_mut()</code> only in debug builds, and is …","Calls <code>.tap()</code> only in debug builds, and is erased in …","Immutable access to the <code>Deref::Target</code> of a value.","Calls <code>.tap_deref()</code> only in debug builds, and is erased in …","Mutable access to the <code>Deref::Target</code> of a value.","Calls <code>.tap_deref_mut()</code> only in debug builds, and is erased …","Immutably accesses an interior failure value.","Calls <code>.tap_err()</code> only in debug builds, and is erased in …","Mutably accesses an interior failure value.","Calls <code>.tap_err_mut()</code> only in debug builds, and is erased …","Mutable access to a value.","Calls <code>.tap_mut()</code> only in debug builds, and is erased in …","Runs an effect function when the container is empty.","Calls <code>.tap_none()</code> only in debug builds, and is erased in …","Immutably accesses an interior success value.","Calls <code>.tap_ok()</code> only in debug builds, and is erased in …","Mutably accesses an interior success value.","Calls <code>.tap_ok_mut()</code> only in debug builds, and is erased in …","Immutable access to the <code>AsRef&lt;R&gt;</code> view of a value.","Calls <code>.tap_ref()</code> only in debug builds, and is erased in …","Mutable access to the <code>AsMut&lt;R&gt;</code> view of a value.","Calls <code>.tap_ref_mut()</code> only in debug builds, and is erased …","Immutabily accesses an interior value only when it is …","Calls <code>.tap_some()</code> only in debug builds, and is erased in …","Mutably accesses an interor value only when it is present.","Calls <code>.tap_some_mut()</code> only in debug builds, and is erased …"],"i":[0,3,3,0,0,0,0,0,4,0,5,0,6,6,6,6,6,6,6,6,6,0,0,7,7,7,7,7,7,7,7,7,7,3,3,3,3,7,7,4,4,3,3,3,3,7,7,7,7,4,4,4,4,8,0,0,5,8,0,6,6,6,6,6,6,6,6,6,0,3,3,0,0,0,0,0,4,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,3,3,3,3,7,7,4,4,3,3,3,3,7,7,7,7,4,4,4,4,8,3,3,0,0,0,4,7,7,7,7,7,7,7,7,7,7,3,3,3,3,7,7,4,4,3,3,3,3,7,7,7,7,4,4,4,4],"f":[0,0,0,0,0,0,0,0,0,0,[[]],0,[1],[1],[1],[1],[1],[1],[1],[1],[1],0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[],2],0,0,[[]],[[],2],0,[1],[1],[1],[1],[1],[1],[1],[1],[1],0,0,0,0,0,0,0,0,0,[[]],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[],2],0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1]],"p":[[8,"FnOnce"],[4,"Result"],[8,"TapFallible"],[8,"TapOptional"],[8,"Conv"],[8,"Pipe"],[8,"Tap"],[8,"TryConv"]]},\
"thiserror":{"doc":"github crates-io docs-rs","t":[24],"n":["Error"],"q":["thiserror"],"d":[""],"i":[0],"f":[0],"p":[]},\
"thiserror_impl":{"doc":"","t":[24],"n":["Error"],"q":["thiserror_impl"],"d":[""],"i":[0],"f":[0],"p":[]},\
"toml":{"doc":"A TOML-parsing library","t":[2,2,3,2,11,11,11,11,11,11,0,11,11,11,11,11,2,2,11,11,11,11,11,0,11,0,11,11,11,11,2,2,2,14,11,11,11,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,3,3,3,3,3,13,3,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,4,13,13,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,5,5,11,11,11,11,11,11,12,6,13,13,13,3,3,13,3,2,13,8,13,2,4,13,6,13,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12],"n":["Deserializer","Serializer","Spanned","Value","borrow","borrow","borrow_mut","clone","clone_into","cmp","de","deserialize","end","eq","fmt","from","from_slice","from_str","get_mut","get_ref","hash","into","into_inner","map","partial_cmp","ser","serialize","span","start","to_owned","to_string","to_string_pretty","to_vec","toml","try_from","try_into","type_id","value","Deserializer","Error","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","custom","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","end","eq","fmt","fmt","from","from","from_slice","from_str","into","into","into_deserializer","line_col","new","set_allow_duplicate_after_longer_table","set_require_newline_after_table","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Entry","IntoIter","Iter","IterMut","Keys","Map","Occupied","OccupiedEntry","Vacant","VacantEntry","Values","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone_into","contains_key","default","deserialize","entry","eq","extend","fmt","from","from","from","from","from","from","from","from","from","from_iter","get","get","get_mut","get_mut","index","index_mut","insert","insert","insert","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_mut","is_empty","iter","iter_mut","key","key","key","keys","len","len","len","len","len","len","new","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","or_insert","or_insert_with","remove","remove","serialize","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","with_capacity","0","0","Custom","DateInvalid","Error","KeyNotString","NumberInvalid","Serializer","UnsupportedNone","UnsupportedType","ValueAfterTable","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","custom","eq","fmt","fmt","from","from","into","into","new","pretty","pretty_array","pretty_array_indent","pretty_array_trailing_comma","pretty_string","pretty_string_literal","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","tables_last","to_owned","to_string","to_string","to_string_pretty","to_vec","try_from","try_from","try_into","try_into","type_id","type_id","0","Array","Array","Boolean","Custom","Date","Datetime","Datetime","DatetimeParseError","Entry","Float","Index","Integer","Map","Offset","String","Table","Table","Time","Value","Z","as_array","as_array_mut","as_bool","as_datetime","as_float","as_integer","as_str","as_table","as_table_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","date","day","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","get","get_mut","hour","index","index_mut","into","into","into","into","into","into","into_deserializer","is_array","is_bool","is_datetime","is_float","is_integer","is_str","is_table","minute","month","nanosecond","offset","same_type","second","serialize","serialize","time","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_str","year","hours","minutes","0","0","0","0","0","0","0"],"q":["toml","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","toml::de","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","toml::map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","toml::map::Entry","","toml::ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","toml::ser::Error","toml::valuetoml::value::Offset","","toml::value::Value","","","","","",""],"d":["","","A spanned value, indicating the range at which it is …","","","","","","","","Deserializing TOML into Rust structures.","","Access the end of the span of the contained value.","","","Returns the argument unchanged.","","","Returns a mutable reference to the contained value.","Returns a reference to the contained value.","","Calls <code>U::from(self)</code>.","Consumes the spanned value and returns the contained value.","A map of String to toml::Value.","","Serializing Rust structures into TOML.","","Get the span of the contained value.","Access the start of the span of the contained value.","","","","","Construct a <code>toml::Value</code> from TOML syntax.","","","","Definition of a TOML value","Deserialization implementation for TOML.","Errors that can occur when deserializing a type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>Deserializer::end</code> method should be called after a …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Deserializes a byte slice into a type.","Deserializes a string into a type.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Produces a (line, column) pair of the position of the …","Creates a new deserializer which will be deserializing the …","Historical versions of toml-rs accidentally allowed a …","Historical versions of toml-rs accidentally allowed a …","","","","","","","","","A view into a single entry in a map, which may either be …","An owning iterator over a toml::Map’s entries.","An iterator over a toml::Map’s entries.","A mutable iterator over a toml::Map’s entries.","An iterator over a toml::Map’s keys.","Represents a TOML key/value type.","An occupied Entry.","An occupied Entry. It is part of the <code>Entry</code> enum.","A vacant Entry.","A vacant Entry. It is part of the <code>Entry</code> enum.","An iterator over a toml::Map’s values.","","","","","","","","","","","","","","","","","","","Clears the map, removing all values.","","","Returns true if the map contains a value for the specified …","","","Gets the given key’s corresponding entry in the map for …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","","","Inserts a key-value pair into the map.","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry with the <code>OccupiedEntry</code>’s …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Converts the entry into a mutable reference to its value.","Returns true if the map contains no elements.","Gets an iterator over the entries of the map.","Gets a mutable iterator over the entries of the map.","Returns a reference to this entry’s key.","Gets a reference to the key that would be used when …","Gets a reference to the key in the entry.","Gets an iterator over the keys of the map.","Returns the number of elements in the map.","","","","","","Makes a new empty Map.","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Removes a key from the map, returning the value at the key …","Takes the value of the entry out of the map, and returns …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets an iterator over the values of the map.","Makes a new empty Map with the given initial capacity.","","","A custom error which could be generated when serializing a …","A serialized date was invalid.","Errors that can occur when serializing a type.","The key of all TOML maps must be strings, but …","A serialized number was invalid.","Serialization implementation for TOML.","None was attempted to be serialized, but it’s not …","Indicates that a Rust type was requested to be serialized …","All values in a TOML table must be emitted before further …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new serializer which will emit TOML into the …","Instantiate a “pretty” formatter","Enable or Disable pretty arrays","Set the indent for pretty arrays","Specify whether to use a trailing comma when serializing …","Enable or Disable pretty strings","Enable or Disable Literal strings for pretty strings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convenience function to serialize items in a map in an …","","Serialize the given data structure as a String of TOML.","","Serialize the given data structure as a “pretty” …","Serialize the given data structure as a TOML byte vector.","","","","","","","","Type representing a TOML array, payload of the <code>Value::Array</code>…","Represents a TOML array","Represents a TOML boolean","Offset between local time and UTC","A parsed TOML date value","A parsed TOML datetime value","Represents a TOML datetime","Error returned from parsing a <code>Datetime</code> in the <code>FromStr</code> …","","Represents a TOML float","Types that can be used to index a <code>toml::Value</code>","Represents a TOML integer","","A parsed TOML time offset","Represents a TOML string","Type representing a TOML table, payload of the <code>Value::Table</code>…","Represents a TOML table","A parsed TOML time value","Representation of a TOML value.","A suffix which, when applied to a time, denotes a UTC …","Extracts the array value if it is an array.","Extracts the array value if it is an array.","Extracts the boolean value if it is a boolean.","Extracts the datetime value if it is a datetime.","Extracts the float value if it is a float.","Extracts the integer value if it is an integer.","Extracts the string of this value if it is a string.","Extracts the table value if it is a table.","Extracts the table value if it is a table.","","","","","","","","","","","","","","","","","","","","","","","","","Optional date. Required for: <em>Offset Date-Time</em>, <em>Local </em>…","Day: 1 to {28, 29, 30, 31} (based on month/year)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Index into a TOML array or map. A string index can be used …","Mutably index into a TOML array or map. A string index can …","Hour: 0 to 23","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Tests whether this value is an array.","Tests whether this value is a boolean.","Tests whether this value is a datetime.","Tests whether this value is a float.","Tests whether this value is an integer.","Tests if this value is a string.","Tests whether this value is a table.","Minute: 0 to 59","Month: 1 to 12","Nanosecond: 0 to 999_999_999","Optional offset. Required for: <em>Offset Date-Time</em>.","Tests whether this and another value have the same type.","Second: 0 to {58, 59, 60} (based on leap second rules)","","","Optional time. Required for: <em>Offset Date-Time</em>, <em>Local </em>…","","","","","","","","","","","","","","Convert a <code>T</code> into <code>toml::Value</code> which is an enum that can …","","","","","","","Interpret a <code>toml::Value</code> as an instance of type <code>T</code>.","","","","","","","","","","","","Returns a human-readable representation of the type of …","Year: four digits","Hours: -12 to +12","Minutes: 0 to 59","","","","","","",""],"i":[0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,0,0,2,2,2,2,2,0,2,0,2,2,2,2,0,0,0,0,2,2,2,0,0,0,21,19,21,19,19,19,19,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,19,19,19,21,19,0,0,21,19,21,19,21,21,21,19,19,21,19,21,19,21,19,0,0,0,0,0,0,24,0,24,0,0,23,24,27,26,28,29,31,30,32,23,24,27,26,28,29,31,30,32,23,23,23,23,23,23,23,23,23,23,23,24,27,26,28,29,31,30,32,23,23,26,23,26,23,23,23,27,26,23,24,27,26,28,29,31,30,32,23,23,23,28,29,31,30,32,26,23,23,23,24,27,26,23,23,28,29,31,30,32,23,28,29,31,30,32,28,29,31,30,32,24,24,23,26,23,28,29,31,30,32,23,23,24,27,26,28,29,31,30,32,23,24,27,26,28,29,31,30,32,23,24,27,26,28,29,31,30,32,23,23,58,59,33,33,0,33,33,0,33,33,33,34,33,34,33,33,33,33,33,33,33,34,33,34,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,33,0,33,0,0,34,33,34,33,34,33,60,0,22,22,52,0,0,22,0,0,22,0,22,0,0,22,0,22,0,0,52,22,22,22,22,22,22,22,22,22,22,47,49,50,51,52,22,47,49,50,51,52,22,47,49,50,51,52,22,47,49,50,51,52,47,50,22,47,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,47,50,51,52,22,22,47,47,49,49,50,51,52,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,47,49,50,51,52,22,47,22,22,51,22,22,22,47,49,50,51,52,22,22,22,22,22,22,22,22,51,50,51,47,22,51,22,47,47,22,47,49,50,51,52,22,47,49,50,51,52,22,22,47,49,50,51,52,22,22,47,49,50,51,52,22,47,49,50,51,52,22,50,61,61,62,63,64,65,66,67,68],"f":[0,0,0,0,[[[2,[1]]],3],[[]],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[[2,[5]],[2,[5]]],6],0,[[],[[7,[2]]]],[2,8],[[[2,[9]],[2,[9]]],10],[[[2,[11]],12],13],[[]],0,0,[2],[2],[[[2,[14]]]],[[]],[2],0,[[[2,[15]],[2,[15]]],[[16,[6]]]],0,[[[2,[17]]],7],[2],[2,8],[[]],0,0,0,0,[[],7],[[],7],[[],18],0,0,0,[[]],[[]],[[]],[[]],[19,19],[[]],[20,19],[21,[[7,[19]]]],[21,7],[21,7],[21,7],[21,7],[[21,3],[[7,[19]]]],[21,7],[21,7],[21,7],[21,7],[21,7],[21,7],[21,7],[21,7],[21,7],[[21,3],7],[21,7],[21,7],[21,7],[21,7],[[21,3],[[7,[19]]]],[[21,8],7],[[21,3,8],7],[21,7],[21,7],[21,7],[21,7],[21,7],[[21,3],7],[21,[[7,[19]]]],[[19,19],10],[[19,12],13],[[19,12],13],[[]],[[]],[[],[[7,[19]]]],[3,[[7,[19]]]],[[]],[[]],[21],[19,16],[3,21],[[21,10]],[[21,10]],[[]],[[],1],[[],7],[[],7],[[],7],[[],7],[[],18],[[],18],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[23,[1,22]]]],[[[23,[1,22]]],[[23,[1,22]]]],[[]],[[[23,[1,22]]],10],[[],[[23,[1,22]]]],[[],[[7,[[23,[1,22]]]]]],[[[23,[1,22]]],24],[[[23,[1,22]],[23,[1,22]]],10],[[[23,[1,22]]]],[[[23,[1,22]],12],[[7,[25]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[23,[1,22]]]],[[[23,[1,22]]],[[16,[22]]]],[26,22],[[[23,[1,22]]],[[16,[22]]]],[26,22],[[[23,[1,22]]],22],[[[23,[1,22]]],22],[[[23,[1,22]],1,22],[[16,[22]]]],[[27,22],22],[[26,22],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23],[[[23,[1,22]]]],[23],[[]],[[]],[[]],[[]],[[]],[26,22],[[[23,[1,22]]],10],[[[23,[1,22]]],28],[[[23,[1,22]]],29],[24,1],[27,1],[26,1],[[[23,[1,22]]],30],[[[23,[1,22]]],8],[28,8],[29,8],[31,8],[30,8],[32,8],[[],[[23,[1,22]]]],[28,16],[29,16],[31,16],[30,16],[32,16],[28,16],[29,16],[31,16],[30,16],[32,16],[[24,22],22],[24,22],[[[23,[1,22]]],[[16,[22]]]],[26,22],[[[23,[1,22]]],7],[28],[29],[31],[30],[32],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[[23,[1,22]]],32],[8,[[23,[1,22]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[33,33],[[]],[20,33],[[33,33],10],[[33,12],13],[[33,12],13],[[]],[[]],[[]],[[]],[1,34],[1,34],[[34,10],34],[[34,8],34],[[34,10],34],[[34,10],34],[[34,10],34],[[34,10],7],[34,7],[[34,35],7],[[34,36],7],[[34,37],7],[[34,38],7],[[34,39],7],[[34,40],7],[[34,41],7],[[34,[16,[8]]],7],[[34,3],7],[[34,3,42,3],7],[34,7],[[34,[16,[8]]],7],[34,7],[[34,3],7],[[34,3,8],7],[[34,3,42,3,8],7],[[34,8],7],[[34,3,8],7],[[34,3,42,3,8],7],[[34,43],7],[[34,42],7],[[34,44],7],[[34,45],7],[34,7],[[34,3],7],[[34,3,42,3],7],[[],7],[[]],[[],[[7,[1,33]]]],[[],1],[[],[[7,[1,33]]]],[[],[[7,[[46,[45]],33]]]],[[],7],[[],7],[[],7],[[],7],[[],18],[[],18],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[22,[[16,[46]]]],[22,[[16,[46]]]],[22,[[16,[10]]]],[22,[[16,[47]]]],[22,[[16,[37]]]],[22,[[16,[40]]]],[22,[[16,[3]]]],[22,[[16,[48]]]],[22,[[16,[48]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22,22],[47,47],[49,49],[50,50],[51,51],[52,52],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],[[7,[22]]]],[[],[[7,[47]]]],[22,[[7,[19]]]],[22,7],[22,7],[22,7],[22,7],[[22,3],[[7,[19]]]],[22,7],[22,7],[22,7],[22,7],[22,7],[22,7],[22,7],[22,7],[22,7],[[22,3],[[7,[19]]]],[22,[[7,[19]]]],[22,7],[22,7],[22,7],[[22,3],7],[[22,8],7],[[22,3,8],7],[22,7],[22,7],[22,7],[22,7],[22,7],[[22,3],7],[[22,22],10],[[47,47],10],[[50,50],10],[[51,51],10],[[52,52],10],[[22,12],13],[[22,12],13],[[47,12],13],[[47,12],13],[[49,12],13],[[49,12],13],[[50,12],13],[[51,12],13],[[52,12],13],[[[55,[[0,[[53,[1]],14,54]],[53,[22]]]]],22],[41,22],[48,22],[36,22],[37,22],[47,22],[42,22],[10,22],[[]],[45,22],[3,22],[[[46,[[53,[22]]]]],22],[39,22],[40,22],[1,22],[[[56,[[53,[1]],[53,[22]]]]],22],[[]],[[]],[[]],[[]],[[]],[3,[[7,[22]]]],[3,[[7,[47,49]]]],[[22,57],[[16,[22]]]],[[22,57],[[16,[22]]]],0,[22,22],[22,22],[[]],[[]],[[]],[[]],[[]],[[]],[22,22],[22,10],[22,10],[22,10],[22,10],[22,10],[22,10],[22,10],0,0,0,0,[[22,22],10],0,[22,7],[47,7],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],7],[[],[[7,[22,33]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[22,[[7,[19]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[22,3],0,0,0,0,0,0,0,0,0,0],"p":[[3,"String"],[3,"Spanned"],[15,"str"],[8,"Clone"],[8,"Ord"],[4,"Ordering"],[4,"Result"],[15,"usize"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Hash"],[8,"PartialOrd"],[4,"Option"],[8,"Serialize"],[3,"TypeId"],[3,"Error"],[8,"Display"],[3,"Deserializer"],[4,"Value"],[3,"Map"],[4,"Entry"],[3,"Error"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"IntoIter"],[3,"Values"],[4,"Error"],[3,"Serializer"],[15,"char"],[15,"f32"],[15,"f64"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"u32"],[15,"u16"],[15,"u64"],[15,"u8"],[3,"Vec"],[3,"Datetime"],[6,"Table"],[3,"DatetimeParseError"],[3,"Date"],[3,"Time"],[4,"Offset"],[8,"Into"],[8,"Eq"],[3,"HashMap"],[3,"BTreeMap"],[8,"Index"],[13,"Vacant"],[13,"Occupied"],[13,"Custom"],[13,"Custom"],[13,"String"],[13,"Integer"],[13,"Float"],[13,"Boolean"],[13,"Datetime"],[13,"Array"],[13,"Table"]]},\
"tribe_contract":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"typenum":{"doc":"This crate provides type-level numbers evaluated at …","t":[2,2,2,3,6,3,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,2,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,2,2,0,14,14,0,11,11,11,11,11,11,11,11,11,11,11,11,14,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,0,14,0,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,2,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,11,11,11,2,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,8,18,18,18,18,18,18,18,18,18,18,8,8,8,8,8,18,18,18,18,18,18,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8,8,8,8,8,8,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,8,6,16,16,2,8,6,3,3,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ATerm","B0","B1","Equal","False","Greater","Less","N1","N10","N100","N1000","N10000","N100000","N1000000","N10000000","N100000000","N1000000000","N10000000000","N100000000000","N1000000000000","N10000000000000","N100000000000000","N1000000000000000","N10000000000000000","N100000000000000000","N1000000000000000000","N1001","N1002","N1003","N1004","N1005","N1006","N1007","N1008","N1009","N101","N1010","N1011","N1012","N1013","N1014","N1015","N1016","N1017","N1018","N1019","N102","N1020","N1021","N1022","N1023","N1024","N103","N104","N1048576","N105","N106","N107","N1073741824","N108","N109","N1099511627776","N11","N110","N111","N112","N1125899906842624","N113","N114","N115","N1152921504606846976","N116","N117","N118","N119","N12","N120","N121","N122","N123","N124","N125","N126","N127","N128","N129","N13","N130","N131","N131072","N132","N133","N134","N134217728","N135","N136","N137","N137438953472","N138","N139","N14","N140","N140737488355328","N141","N142","N143","N144","N144115188075855872","N145","N146","N147","N148","N149","N15","N150","N151","N152","N153","N154","N155","N156","N157","N158","N159","N16","N160","N161","N162","N163","N16384","N164","N165","N166","N167","N16777216","N168","N169","N17","N170","N171","N17179869184","N172","N173","N174","N175","N17592186044416","N176","N177","N178","N179","N18","N180","N18014398509481984","N181","N182","N183","N184","N185","N186","N187","N188","N189","N19","N190","N191","N192","N193","N194","N195","N196","N197","N198","N199","N2","N20","N200","N201","N202","N203","N204","N2048","N205","N206","N207","N208","N209","N2097152","N21","N210","N211","N212","N213","N214","N2147483648","N215","N216","N217","N218","N219","N2199023255552","N22","N220","N221","N222","N223","N224","N225","N2251799813685248","N226","N227","N228","N229","N23","N230","N2305843009213693952","N231","N232","N233","N234","N235","N236","N237","N238","N239","N24","N240","N241","N242","N243","N244","N245","N246","N247","N248","N249","N25","N250","N251","N252","N253","N254","N255","N256","N257","N258","N259","N26","N260","N261","N262","N262144","N263","N264","N265","N266","N267","N268","N268435456","N269","N27","N270","N271","N272","N273","N274","N274877906944","N275","N276","N277","N278","N279","N28","N280","N281","N281474976710656","N282","N283","N284","N285","N286","N287","N288","N288230376151711744","N289","N29","N290","N291","N292","N293","N294","N295","N296","N297","N298","N299","N3","N30","N300","N301","N302","N303","N304","N305","N306","N307","N308","N309","N31","N310","N311","N312","N313","N314","N315","N316","N317","N318","N319","N32","N320","N321","N322","N323","N324","N325","N326","N327","N32768","N328","N329","N33","N330","N331","N332","N333","N334","N335","N33554432","N336","N337","N338","N339","N34","N340","N341","N342","N343","N34359738368","N344","N345","N346","N347","N348","N349","N35","N350","N351","N35184372088832","N352","N353","N354","N355","N356","N357","N358","N359","N36","N360","N36028797018963968","N361","N362","N363","N364","N365","N366","N367","N368","N369","N37","N370","N371","N372","N373","N374","N375","N376","N377","N378","N379","N38","N380","N381","N382","N383","N384","N385","N386","N387","N388","N389","N39","N390","N391","N392","N393","N394","N395","N396","N397","N398","N399","N4","N40","N400","N401","N402","N403","N404","N405","N406","N407","N408","N409","N4096","N41","N410","N411","N412","N413","N414","N415","N416","N417","N418","N419","N4194304","N42","N420","N421","N422","N423","N424","N425","N426","N427","N428","N429","N4294967296","N43","N430","N431","N432","N433","N434","N435","N436","N437","N438","N439","N4398046511104","N44","N440","N441","N442","N443","N444","N445","N446","N447","N448","N449","N45","N450","N4503599627370496","N451","N452","N453","N454","N455","N456","N457","N458","N459","N46","N460","N461","N4611686018427387904","N462","N463","N464","N465","N466","N467","N468","N469","N47","N470","N471","N472","N473","N474","N475","N476","N477","N478","N479","N48","N480","N481","N482","N483","N484","N485","N486","N487","N488","N489","N49","N490","N491","N492","N493","N494","N495","N496","N497","N498","N499","N5","N50","N500","N501","N502","N503","N504","N505","N506","N507","N508","N509","N51","N510","N511","N512","N513","N514","N515","N516","N517","N518","N519","N52","N520","N521","N522","N523","N524","N524288","N525","N526","N527","N528","N529","N53","N530","N531","N532","N533","N534","N535","N536","N536870912","N537","N538","N539","N54","N540","N541","N542","N543","N544","N545","N546","N547","N548","N549","N549755813888","N55","N550","N551","N552","N553","N554","N555","N556","N557","N558","N559","N56","N560","N561","N562","N562949953421312","N563","N564","N565","N566","N567","N568","N569","N57","N570","N571","N572","N573","N574","N575","N576","N576460752303423488","N577","N578","N579","N58","N580","N581","N582","N583","N584","N585","N586","N587","N588","N589","N59","N590","N591","N592","N593","N594","N595","N596","N597","N598","N599","N6","N60","N600","N601","N602","N603","N604","N605","N606","N607","N608","N609","N61","N610","N611","N612","N613","N614","N615","N616","N617","N618","N619","N62","N620","N621","N622","N623","N624","N625","N626","N627","N628","N629","N63","N630","N631","N632","N633","N634","N635","N636","N637","N638","N639","N64","N640","N641","N642","N643","N644","N645","N646","N647","N648","N649","N65","N650","N651","N652","N653","N654","N655","N65536","N656","N657","N658","N659","N66","N660","N661","N662","N663","N664","N665","N666","N667","N668","N669","N67","N670","N671","N67108864","N672","N673","N674","N675","N676","N677","N678","N679","N68","N680","N681","N682","N683","N684","N685","N686","N687","N68719476736","N688","N689","N69","N690","N691","N692","N693","N694","N695","N696","N697","N698","N699","N7","N70","N700","N701","N702","N703","N70368744177664","N704","N705","N706","N707","N708","N709","N71","N710","N711","N712","N713","N714","N715","N716","N717","N718","N719","N72","N720","N72057594037927936","N721","N722","N723","N724","N725","N726","N727","N728","N729","N73","N730","N731","N732","N733","N734","N735","N736","N737","N738","N739","N74","N740","N741","N742","N743","N744","N745","N746","N747","N748","N749","N75","N750","N751","N752","N753","N754","N755","N756","N757","N758","N759","N76","N760","N761","N762","N763","N764","N765","N766","N767","N768","N769","N77","N770","N771","N772","N773","N774","N775","N776","N777","N778","N779","N78","N780","N781","N782","N783","N784","N785","N786","N787","N788","N789","N79","N790","N791","N792","N793","N794","N795","N796","N797","N798","N799","N8","N80","N800","N801","N802","N803","N804","N805","N806","N807","N808","N809","N81","N810","N811","N812","N813","N814","N815","N816","N817","N818","N819","N8192","N82","N820","N821","N822","N823","N824","N825","N826","N827","N828","N829","N83","N830","N831","N832","N833","N834","N835","N836","N837","N838","N8388608","N839","N84","N840","N841","N842","N843","N844","N845","N846","N847","N848","N849","N85","N850","N851","N852","N853","N854","N855","N856","N857","N858","N8589934592","N859","N86","N860","N861","N862","N863","N864","N865","N866","N867","N868","N869","N87","N870","N871","N872","N873","N874","N875","N876","N877","N878","N879","N8796093022208","N88","N880","N881","N882","N883","N884","N885","N886","N887","N888","N889","N89","N890","N891","N892","N893","N894","N895","N896","N897","N898","N899","N9","N90","N900","N9007199254740992","N901","N902","N903","N904","N905","N906","N907","N908","N909","N91","N910","N911","N912","N913","N914","N915","N916","N917","N918","N919","N92","N920","N921","N922","N923","N924","N925","N926","N927","N928","N929","N93","N930","N931","N932","N933","N934","N935","N936","N937","N938","N939","N94","N940","N941","N942","N943","N944","N945","N946","N947","N948","N949","N95","N950","N951","N952","N953","N954","N955","N956","N957","N958","N959","N96","N960","N961","N962","N963","N964","N965","N966","N967","N968","N969","N97","N970","N971","N972","N973","N974","N975","N976","N977","N978","N979","N98","N980","N981","N982","N983","N984","N985","N986","N987","N988","N989","N99","N990","N991","N992","N993","N994","N995","N996","N997","N998","N999","NInt","P1","P10","P100","P1000","P10000","P100000","P1000000","P10000000","P100000000","P1000000000","P10000000000","P100000000000","P1000000000000","P10000000000000","P100000000000000","P1000000000000000","P10000000000000000","P100000000000000000","P1000000000000000000","P1001","P1002","P1003","P1004","P1005","P1006","P1007","P1008","P1009","P101","P1010","P1011","P1012","P1013","P1014","P1015","P1016","P1017","P1018","P1019","P102","P1020","P1021","P1022","P1023","P1024","P103","P104","P1048576","P105","P106","P107","P1073741824","P108","P109","P1099511627776","P11","P110","P111","P112","P1125899906842624","P113","P114","P115","P1152921504606846976","P116","P117","P118","P119","P12","P120","P121","P122","P123","P124","P125","P126","P127","P128","P129","P13","P130","P131","P131072","P132","P133","P134","P134217728","P135","P136","P137","P137438953472","P138","P139","P14","P140","P140737488355328","P141","P142","P143","P144","P144115188075855872","P145","P146","P147","P148","P149","P15","P150","P151","P152","P153","P154","P155","P156","P157","P158","P159","P16","P160","P161","P162","P163","P16384","P164","P165","P166","P167","P16777216","P168","P169","P17","P170","P171","P17179869184","P172","P173","P174","P175","P17592186044416","P176","P177","P178","P179","P18","P180","P18014398509481984","P181","P182","P183","P184","P185","P186","P187","P188","P189","P19","P190","P191","P192","P193","P194","P195","P196","P197","P198","P199","P2","P20","P200","P201","P202","P203","P204","P2048","P205","P206","P207","P208","P209","P2097152","P21","P210","P211","P212","P213","P214","P2147483648","P215","P216","P217","P218","P219","P2199023255552","P22","P220","P221","P222","P223","P224","P225","P2251799813685248","P226","P227","P228","P229","P23","P230","P2305843009213693952","P231","P232","P233","P234","P235","P236","P237","P238","P239","P24","P240","P241","P242","P243","P244","P245","P246","P247","P248","P249","P25","P250","P251","P252","P253","P254","P255","P256","P257","P258","P259","P26","P260","P261","P262","P262144","P263","P264","P265","P266","P267","P268","P268435456","P269","P27","P270","P271","P272","P273","P274","P274877906944","P275","P276","P277","P278","P279","P28","P280","P281","P281474976710656","P282","P283","P284","P285","P286","P287","P288","P288230376151711744","P289","P29","P290","P291","P292","P293","P294","P295","P296","P297","P298","P299","P3","P30","P300","P301","P302","P303","P304","P305","P306","P307","P308","P309","P31","P310","P311","P312","P313","P314","P315","P316","P317","P318","P319","P32","P320","P321","P322","P323","P324","P325","P326","P327","P32768","P328","P329","P33","P330","P331","P332","P333","P334","P335","P33554432","P336","P337","P338","P339","P34","P340","P341","P342","P343","P34359738368","P344","P345","P346","P347","P348","P349","P35","P350","P351","P35184372088832","P352","P353","P354","P355","P356","P357","P358","P359","P36","P360","P36028797018963968","P361","P362","P363","P364","P365","P366","P367","P368","P369","P37","P370","P371","P372","P373","P374","P375","P376","P377","P378","P379","P38","P380","P381","P382","P383","P384","P385","P386","P387","P388","P389","P39","P390","P391","P392","P393","P394","P395","P396","P397","P398","P399","P4","P40","P400","P401","P402","P403","P404","P405","P406","P407","P408","P409","P4096","P41","P410","P411","P412","P413","P414","P415","P416","P417","P418","P419","P4194304","P42","P420","P421","P422","P423","P424","P425","P426","P427","P428","P429","P4294967296","P43","P430","P431","P432","P433","P434","P435","P436","P437","P438","P439","P4398046511104","P44","P440","P441","P442","P443","P444","P445","P446","P447","P448","P449","P45","P450","P4503599627370496","P451","P452","P453","P454","P455","P456","P457","P458","P459","P46","P460","P461","P4611686018427387904","P462","P463","P464","P465","P466","P467","P468","P469","P47","P470","P471","P472","P473","P474","P475","P476","P477","P478","P479","P48","P480","P481","P482","P483","P484","P485","P486","P487","P488","P489","P49","P490","P491","P492","P493","P494","P495","P496","P497","P498","P499","P5","P50","P500","P501","P502","P503","P504","P505","P506","P507","P508","P509","P51","P510","P511","P512","P513","P514","P515","P516","P517","P518","P519","P52","P520","P521","P522","P523","P524","P524288","P525","P526","P527","P528","P529","P53","P530","P531","P532","P533","P534","P535","P536","P536870912","P537","P538","P539","P54","P540","P541","P542","P543","P544","P545","P546","P547","P548","P549","P549755813888","P55","P550","P551","P552","P553","P554","P555","P556","P557","P558","P559","P56","P560","P561","P562","P562949953421312","P563","P564","P565","P566","P567","P568","P569","P57","P570","P571","P572","P573","P574","P575","P576","P576460752303423488","P577","P578","P579","P58","P580","P581","P582","P583","P584","P585","P586","P587","P588","P589","P59","P590","P591","P592","P593","P594","P595","P596","P597","P598","P599","P6","P60","P600","P601","P602","P603","P604","P605","P606","P607","P608","P609","P61","P610","P611","P612","P613","P614","P615","P616","P617","P618","P619","P62","P620","P621","P622","P623","P624","P625","P626","P627","P628","P629","P63","P630","P631","P632","P633","P634","P635","P636","P637","P638","P639","P64","P640","P641","P642","P643","P644","P645","P646","P647","P648","P649","P65","P650","P651","P652","P653","P654","P655","P65536","P656","P657","P658","P659","P66","P660","P661","P662","P663","P664","P665","P666","P667","P668","P669","P67","P670","P671","P67108864","P672","P673","P674","P675","P676","P677","P678","P679","P68","P680","P681","P682","P683","P684","P685","P686","P687","P68719476736","P688","P689","P69","P690","P691","P692","P693","P694","P695","P696","P697","P698","P699","P7","P70","P700","P701","P702","P703","P70368744177664","P704","P705","P706","P707","P708","P709","P71","P710","P711","P712","P713","P714","P715","P716","P717","P718","P719","P72","P720","P72057594037927936","P721","P722","P723","P724","P725","P726","P727","P728","P729","P73","P730","P731","P732","P733","P734","P735","P736","P737","P738","P739","P74","P740","P741","P742","P743","P744","P745","P746","P747","P748","P749","P75","P750","P751","P752","P753","P754","P755","P756","P757","P758","P759","P76","P760","P761","P762","P763","P764","P765","P766","P767","P768","P769","P77","P770","P771","P772","P773","P774","P775","P776","P777","P778","P779","P78","P780","P781","P782","P783","P784","P785","P786","P787","P788","P789","P79","P790","P791","P792","P793","P794","P795","P796","P797","P798","P799","P8","P80","P800","P801","P802","P803","P804","P805","P806","P807","P808","P809","P81","P810","P811","P812","P813","P814","P815","P816","P817","P818","P819","P8192","P82","P820","P821","P822","P823","P824","P825","P826","P827","P828","P829","P83","P830","P831","P832","P833","P834","P835","P836","P837","P838","P8388608","P839","P84","P840","P841","P842","P843","P844","P845","P846","P847","P848","P849","P85","P850","P851","P852","P853","P854","P855","P856","P857","P858","P8589934592","P859","P86","P860","P861","P862","P863","P864","P865","P866","P867","P868","P869","P87","P870","P871","P872","P873","P874","P875","P876","P877","P878","P879","P8796093022208","P88","P880","P881","P882","P883","P884","P885","P886","P887","P888","P889","P89","P890","P891","P892","P893","P894","P895","P896","P897","P898","P899","P9","P90","P900","P9007199254740992","P901","P902","P903","P904","P905","P906","P907","P908","P909","P91","P910","P911","P912","P913","P914","P915","P916","P917","P918","P919","P92","P920","P921","P922","P923","P924","P925","P926","P927","P928","P929","P93","P930","P931","P932","P933","P934","P935","P936","P937","P938","P939","P94","P940","P941","P942","P943","P944","P945","P946","P947","P948","P949","P95","P950","P951","P952","P953","P954","P955","P956","P957","P958","P959","P96","P960","P961","P962","P963","P964","P965","P966","P967","P968","P969","P97","P970","P971","P972","P973","P974","P975","P976","P977","P978","P979","P98","P980","P981","P982","P983","P984","P985","P986","P987","P988","P989","P99","P990","P991","P992","P993","P994","P995","P996","P997","P998","P999","PInt","TArr","True","U0","U1","U10","U100","U1000","U10000","U100000","U1000000","U10000000","U100000000","U1000000000","U10000000000","U100000000000","U1000000000000","U10000000000000","U100000000000000","U1000000000000000","U10000000000000000","U100000000000000000","U1000000000000000000","U10000000000000000000","U1001","U1002","U1003","U1004","U1005","U1006","U1007","U1008","U1009","U101","U1010","U1011","U1012","U1013","U1014","U1015","U1016","U1017","U1018","U1019","U102","U1020","U1021","U1022","U1023","U1024","U103","U104","U1048576","U105","U106","U107","U1073741824","U108","U109","U1099511627776","U11","U110","U111","U112","U1125899906842624","U113","U114","U115","U1152921504606846976","U116","U117","U118","U119","U12","U120","U121","U122","U123","U124","U125","U126","U127","U128","U129","U13","U130","U131","U131072","U132","U133","U134","U134217728","U135","U136","U137","U137438953472","U138","U139","U14","U140","U140737488355328","U141","U142","U143","U144","U144115188075855872","U145","U146","U147","U148","U149","U15","U150","U151","U152","U153","U154","U155","U156","U157","U158","U159","U16","U160","U161","U162","U163","U16384","U164","U165","U166","U167","U16777216","U168","U169","U17","U170","U171","U17179869184","U172","U173","U174","U175","U17592186044416","U176","U177","U178","U179","U18","U180","U18014398509481984","U181","U182","U183","U184","U185","U186","U187","U188","U189","U19","U190","U191","U192","U193","U194","U195","U196","U197","U198","U199","U2","U20","U200","U201","U202","U203","U204","U2048","U205","U206","U207","U208","U209","U2097152","U21","U210","U211","U212","U213","U214","U2147483648","U215","U216","U217","U218","U219","U2199023255552","U22","U220","U221","U222","U223","U224","U225","U2251799813685248","U226","U227","U228","U229","U23","U230","U2305843009213693952","U231","U232","U233","U234","U235","U236","U237","U238","U239","U24","U240","U241","U242","U243","U244","U245","U246","U247","U248","U249","U25","U250","U251","U252","U253","U254","U255","U256","U257","U258","U259","U26","U260","U261","U262","U262144","U263","U264","U265","U266","U267","U268","U268435456","U269","U27","U270","U271","U272","U273","U274","U274877906944","U275","U276","U277","U278","U279","U28","U280","U281","U281474976710656","U282","U283","U284","U285","U286","U287","U288","U288230376151711744","U289","U29","U290","U291","U292","U293","U294","U295","U296","U297","U298","U299","U3","U30","U300","U301","U302","U303","U304","U305","U306","U307","U308","U309","U31","U310","U311","U312","U313","U314","U315","U316","U317","U318","U319","U32","U320","U321","U322","U323","U324","U325","U326","U327","U32768","U328","U329","U33","U330","U331","U332","U333","U334","U335","U33554432","U336","U337","U338","U339","U34","U340","U341","U342","U343","U34359738368","U344","U345","U346","U347","U348","U349","U35","U350","U351","U35184372088832","U352","U353","U354","U355","U356","U357","U358","U359","U36","U360","U36028797018963968","U361","U362","U363","U364","U365","U366","U367","U368","U369","U37","U370","U371","U372","U373","U374","U375","U376","U377","U378","U379","U38","U380","U381","U382","U383","U384","U385","U386","U387","U388","U389","U39","U390","U391","U392","U393","U394","U395","U396","U397","U398","U399","U4","U40","U400","U401","U402","U403","U404","U405","U406","U407","U408","U409","U4096","U41","U410","U411","U412","U413","U414","U415","U416","U417","U418","U419","U4194304","U42","U420","U421","U422","U423","U424","U425","U426","U427","U428","U429","U4294967296","U43","U430","U431","U432","U433","U434","U435","U436","U437","U438","U439","U4398046511104","U44","U440","U441","U442","U443","U444","U445","U446","U447","U448","U449","U45","U450","U4503599627370496","U451","U452","U453","U454","U455","U456","U457","U458","U459","U46","U460","U461","U4611686018427387904","U462","U463","U464","U465","U466","U467","U468","U469","U47","U470","U471","U472","U473","U474","U475","U476","U477","U478","U479","U48","U480","U481","U482","U483","U484","U485","U486","U487","U488","U489","U49","U490","U491","U492","U493","U494","U495","U496","U497","U498","U499","U5","U50","U500","U501","U502","U503","U504","U505","U506","U507","U508","U509","U51","U510","U511","U512","U513","U514","U515","U516","U517","U518","U519","U52","U520","U521","U522","U523","U524","U524288","U525","U526","U527","U528","U529","U53","U530","U531","U532","U533","U534","U535","U536","U536870912","U537","U538","U539","U54","U540","U541","U542","U543","U544","U545","U546","U547","U548","U549","U549755813888","U55","U550","U551","U552","U553","U554","U555","U556","U557","U558","U559","U56","U560","U561","U562","U562949953421312","U563","U564","U565","U566","U567","U568","U569","U57","U570","U571","U572","U573","U574","U575","U576","U576460752303423488","U577","U578","U579","U58","U580","U581","U582","U583","U584","U585","U586","U587","U588","U589","U59","U590","U591","U592","U593","U594","U595","U596","U597","U598","U599","U6","U60","U600","U601","U602","U603","U604","U605","U606","U607","U608","U609","U61","U610","U611","U612","U613","U614","U615","U616","U617","U618","U619","U62","U620","U621","U622","U623","U624","U625","U626","U627","U628","U629","U63","U630","U631","U632","U633","U634","U635","U636","U637","U638","U639","U64","U640","U641","U642","U643","U644","U645","U646","U647","U648","U649","U65","U650","U651","U652","U653","U654","U655","U65536","U656","U657","U658","U659","U66","U660","U661","U662","U663","U664","U665","U666","U667","U668","U669","U67","U670","U671","U67108864","U672","U673","U674","U675","U676","U677","U678","U679","U68","U680","U681","U682","U683","U684","U685","U686","U687","U68719476736","U688","U689","U69","U690","U691","U692","U693","U694","U695","U696","U697","U698","U699","U7","U70","U700","U701","U702","U703","U70368744177664","U704","U705","U706","U707","U708","U709","U71","U710","U711","U712","U713","U714","U715","U716","U717","U718","U719","U72","U720","U72057594037927936","U721","U722","U723","U724","U725","U726","U727","U728","U729","U73","U730","U731","U732","U733","U734","U735","U736","U737","U738","U739","U74","U740","U741","U742","U743","U744","U745","U746","U747","U748","U749","U75","U750","U751","U752","U753","U754","U755","U756","U757","U758","U759","U76","U760","U761","U762","U763","U764","U765","U766","U767","U768","U769","U77","U770","U771","U772","U773","U774","U775","U776","U777","U778","U779","U78","U780","U781","U782","U783","U784","U785","U786","U787","U788","U789","U79","U790","U791","U792","U793","U794","U795","U796","U797","U798","U799","U8","U80","U800","U801","U802","U803","U804","U805","U806","U807","U808","U809","U81","U810","U811","U812","U813","U814","U815","U816","U817","U818","U819","U8192","U82","U820","U821","U822","U823","U824","U825","U826","U827","U828","U829","U83","U830","U831","U832","U833","U834","U835","U836","U837","U838","U8388608","U839","U84","U840","U841","U842","U843","U844","U845","U846","U847","U848","U849","U85","U850","U851","U852","U853","U854","U855","U856","U857","U858","U8589934592","U859","U86","U860","U861","U862","U863","U864","U865","U866","U867","U868","U869","U87","U870","U871","U872","U873","U874","U875","U876","U877","U878","U879","U8796093022208","U88","U880","U881","U882","U883","U884","U885","U886","U887","U888","U889","U89","U890","U891","U892","U893","U894","U895","U896","U897","U898","U899","U9","U90","U900","U9007199254740992","U901","U902","U903","U904","U905","U906","U907","U908","U909","U91","U910","U911","U912","U913","U914","U915","U916","U917","U918","U919","U92","U920","U921","U922","U9223372036854775808","U923","U924","U925","U926","U927","U928","U929","U93","U930","U931","U932","U933","U934","U935","U936","U937","U938","U939","U94","U940","U941","U942","U943","U944","U945","U946","U947","U948","U949","U95","U950","U951","U952","U953","U954","U955","U956","U957","U958","U959","U96","U960","U961","U962","U963","U964","U965","U966","U967","U968","U969","U97","U970","U971","U972","U973","U974","U975","U976","U977","U978","U979","U98","U980","U981","U982","U983","U984","U985","U986","U987","U988","U989","U99","U990","U991","U992","U993","U994","U995","U996","U997","U998","U999","UInt","UTerm","Z0","array","assert_type","assert_type_eq","bit","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","cmp","consts","default","default","default","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","int","into","into","into","marker_traits","op","operator_aliases","partial_cmp","partial_cmp","partial_cmp","tarr","to_ordering","to_ordering","to_ordering","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_operators","uint","ATerm","TArr","add","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","div","div","eq","eq","fmt","fmt","from","from","hash","hash","into","into","len","len","mul","mul","neg","neg","partial_cmp","partial_cmp","partial_div","partial_div","rem","rem","sub","sub","try_from","try_from","try_into","try_into","type_id","type_id","B0","B1","Bit","bitand","bitand","bitand","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","hash","hash","into","into","max","max","max","max","min","min","min","min","new","new","new","new","not","not","partial_cmp","partial_cmp","to_bool","to_bool","to_u8","to_u8","try_from","try_from","try_into","try_into","type_id","type_id","B0","B1","False","N1","N10","N100","N1000","N10000","N100000","N1000000","N10000000","N100000000","N1000000000","N10000000000","N100000000000","N1000000000000","N10000000000000","N100000000000000","N1000000000000000","N10000000000000000","N100000000000000000","N1000000000000000000","N1001","N1002","N1003","N1004","N1005","N1006","N1007","N1008","N1009","N101","N1010","N1011","N1012","N1013","N1014","N1015","N1016","N1017","N1018","N1019","N102","N1020","N1021","N1022","N1023","N1024","N103","N104","N1048576","N105","N106","N107","N1073741824","N108","N109","N1099511627776","N11","N110","N111","N112","N1125899906842624","N113","N114","N115","N1152921504606846976","N116","N117","N118","N119","N12","N120","N121","N122","N123","N124","N125","N126","N127","N128","N129","N13","N130","N131","N131072","N132","N133","N134","N134217728","N135","N136","N137","N137438953472","N138","N139","N14","N140","N140737488355328","N141","N142","N143","N144","N144115188075855872","N145","N146","N147","N148","N149","N15","N150","N151","N152","N153","N154","N155","N156","N157","N158","N159","N16","N160","N161","N162","N163","N16384","N164","N165","N166","N167","N16777216","N168","N169","N17","N170","N171","N17179869184","N172","N173","N174","N175","N17592186044416","N176","N177","N178","N179","N18","N180","N18014398509481984","N181","N182","N183","N184","N185","N186","N187","N188","N189","N19","N190","N191","N192","N193","N194","N195","N196","N197","N198","N199","N2","N20","N200","N201","N202","N203","N204","N2048","N205","N206","N207","N208","N209","N2097152","N21","N210","N211","N212","N213","N214","N2147483648","N215","N216","N217","N218","N219","N2199023255552","N22","N220","N221","N222","N223","N224","N225","N2251799813685248","N226","N227","N228","N229","N23","N230","N2305843009213693952","N231","N232","N233","N234","N235","N236","N237","N238","N239","N24","N240","N241","N242","N243","N244","N245","N246","N247","N248","N249","N25","N250","N251","N252","N253","N254","N255","N256","N257","N258","N259","N26","N260","N261","N262","N262144","N263","N264","N265","N266","N267","N268","N268435456","N269","N27","N270","N271","N272","N273","N274","N274877906944","N275","N276","N277","N278","N279","N28","N280","N281","N281474976710656","N282","N283","N284","N285","N286","N287","N288","N288230376151711744","N289","N29","N290","N291","N292","N293","N294","N295","N296","N297","N298","N299","N3","N30","N300","N301","N302","N303","N304","N305","N306","N307","N308","N309","N31","N310","N311","N312","N313","N314","N315","N316","N317","N318","N319","N32","N320","N321","N322","N323","N324","N325","N326","N327","N32768","N328","N329","N33","N330","N331","N332","N333","N334","N335","N33554432","N336","N337","N338","N339","N34","N340","N341","N342","N343","N34359738368","N344","N345","N346","N347","N348","N349","N35","N350","N351","N35184372088832","N352","N353","N354","N355","N356","N357","N358","N359","N36","N360","N36028797018963968","N361","N362","N363","N364","N365","N366","N367","N368","N369","N37","N370","N371","N372","N373","N374","N375","N376","N377","N378","N379","N38","N380","N381","N382","N383","N384","N385","N386","N387","N388","N389","N39","N390","N391","N392","N393","N394","N395","N396","N397","N398","N399","N4","N40","N400","N401","N402","N403","N404","N405","N406","N407","N408","N409","N4096","N41","N410","N411","N412","N413","N414","N415","N416","N417","N418","N419","N4194304","N42","N420","N421","N422","N423","N424","N425","N426","N427","N428","N429","N4294967296","N43","N430","N431","N432","N433","N434","N435","N436","N437","N438","N439","N4398046511104","N44","N440","N441","N442","N443","N444","N445","N446","N447","N448","N449","N45","N450","N4503599627370496","N451","N452","N453","N454","N455","N456","N457","N458","N459","N46","N460","N461","N4611686018427387904","N462","N463","N464","N465","N466","N467","N468","N469","N47","N470","N471","N472","N473","N474","N475","N476","N477","N478","N479","N48","N480","N481","N482","N483","N484","N485","N486","N487","N488","N489","N49","N490","N491","N492","N493","N494","N495","N496","N497","N498","N499","N5","N50","N500","N501","N502","N503","N504","N505","N506","N507","N508","N509","N51","N510","N511","N512","N513","N514","N515","N516","N517","N518","N519","N52","N520","N521","N522","N523","N524","N524288","N525","N526","N527","N528","N529","N53","N530","N531","N532","N533","N534","N535","N536","N536870912","N537","N538","N539","N54","N540","N541","N542","N543","N544","N545","N546","N547","N548","N549","N549755813888","N55","N550","N551","N552","N553","N554","N555","N556","N557","N558","N559","N56","N560","N561","N562","N562949953421312","N563","N564","N565","N566","N567","N568","N569","N57","N570","N571","N572","N573","N574","N575","N576","N576460752303423488","N577","N578","N579","N58","N580","N581","N582","N583","N584","N585","N586","N587","N588","N589","N59","N590","N591","N592","N593","N594","N595","N596","N597","N598","N599","N6","N60","N600","N601","N602","N603","N604","N605","N606","N607","N608","N609","N61","N610","N611","N612","N613","N614","N615","N616","N617","N618","N619","N62","N620","N621","N622","N623","N624","N625","N626","N627","N628","N629","N63","N630","N631","N632","N633","N634","N635","N636","N637","N638","N639","N64","N640","N641","N642","N643","N644","N645","N646","N647","N648","N649","N65","N650","N651","N652","N653","N654","N655","N65536","N656","N657","N658","N659","N66","N660","N661","N662","N663","N664","N665","N666","N667","N668","N669","N67","N670","N671","N67108864","N672","N673","N674","N675","N676","N677","N678","N679","N68","N680","N681","N682","N683","N684","N685","N686","N687","N68719476736","N688","N689","N69","N690","N691","N692","N693","N694","N695","N696","N697","N698","N699","N7","N70","N700","N701","N702","N703","N70368744177664","N704","N705","N706","N707","N708","N709","N71","N710","N711","N712","N713","N714","N715","N716","N717","N718","N719","N72","N720","N72057594037927936","N721","N722","N723","N724","N725","N726","N727","N728","N729","N73","N730","N731","N732","N733","N734","N735","N736","N737","N738","N739","N74","N740","N741","N742","N743","N744","N745","N746","N747","N748","N749","N75","N750","N751","N752","N753","N754","N755","N756","N757","N758","N759","N76","N760","N761","N762","N763","N764","N765","N766","N767","N768","N769","N77","N770","N771","N772","N773","N774","N775","N776","N777","N778","N779","N78","N780","N781","N782","N783","N784","N785","N786","N787","N788","N789","N79","N790","N791","N792","N793","N794","N795","N796","N797","N798","N799","N8","N80","N800","N801","N802","N803","N804","N805","N806","N807","N808","N809","N81","N810","N811","N812","N813","N814","N815","N816","N817","N818","N819","N8192","N82","N820","N821","N822","N823","N824","N825","N826","N827","N828","N829","N83","N830","N831","N832","N833","N834","N835","N836","N837","N838","N8388608","N839","N84","N840","N841","N842","N843","N844","N845","N846","N847","N848","N849","N85","N850","N851","N852","N853","N854","N855","N856","N857","N858","N8589934592","N859","N86","N860","N861","N862","N863","N864","N865","N866","N867","N868","N869","N87","N870","N871","N872","N873","N874","N875","N876","N877","N878","N879","N8796093022208","N88","N880","N881","N882","N883","N884","N885","N886","N887","N888","N889","N89","N890","N891","N892","N893","N894","N895","N896","N897","N898","N899","N9","N90","N900","N9007199254740992","N901","N902","N903","N904","N905","N906","N907","N908","N909","N91","N910","N911","N912","N913","N914","N915","N916","N917","N918","N919","N92","N920","N921","N922","N923","N924","N925","N926","N927","N928","N929","N93","N930","N931","N932","N933","N934","N935","N936","N937","N938","N939","N94","N940","N941","N942","N943","N944","N945","N946","N947","N948","N949","N95","N950","N951","N952","N953","N954","N955","N956","N957","N958","N959","N96","N960","N961","N962","N963","N964","N965","N966","N967","N968","N969","N97","N970","N971","N972","N973","N974","N975","N976","N977","N978","N979","N98","N980","N981","N982","N983","N984","N985","N986","N987","N988","N989","N99","N990","N991","N992","N993","N994","N995","N996","N997","N998","N999","P1","P10","P100","P1000","P10000","P100000","P1000000","P10000000","P100000000","P1000000000","P10000000000","P100000000000","P1000000000000","P10000000000000","P100000000000000","P1000000000000000","P10000000000000000","P100000000000000000","P1000000000000000000","P1001","P1002","P1003","P1004","P1005","P1006","P1007","P1008","P1009","P101","P1010","P1011","P1012","P1013","P1014","P1015","P1016","P1017","P1018","P1019","P102","P1020","P1021","P1022","P1023","P1024","P103","P104","P1048576","P105","P106","P107","P1073741824","P108","P109","P1099511627776","P11","P110","P111","P112","P1125899906842624","P113","P114","P115","P1152921504606846976","P116","P117","P118","P119","P12","P120","P121","P122","P123","P124","P125","P126","P127","P128","P129","P13","P130","P131","P131072","P132","P133","P134","P134217728","P135","P136","P137","P137438953472","P138","P139","P14","P140","P140737488355328","P141","P142","P143","P144","P144115188075855872","P145","P146","P147","P148","P149","P15","P150","P151","P152","P153","P154","P155","P156","P157","P158","P159","P16","P160","P161","P162","P163","P16384","P164","P165","P166","P167","P16777216","P168","P169","P17","P170","P171","P17179869184","P172","P173","P174","P175","P17592186044416","P176","P177","P178","P179","P18","P180","P18014398509481984","P181","P182","P183","P184","P185","P186","P187","P188","P189","P19","P190","P191","P192","P193","P194","P195","P196","P197","P198","P199","P2","P20","P200","P201","P202","P203","P204","P2048","P205","P206","P207","P208","P209","P2097152","P21","P210","P211","P212","P213","P214","P2147483648","P215","P216","P217","P218","P219","P2199023255552","P22","P220","P221","P222","P223","P224","P225","P2251799813685248","P226","P227","P228","P229","P23","P230","P2305843009213693952","P231","P232","P233","P234","P235","P236","P237","P238","P239","P24","P240","P241","P242","P243","P244","P245","P246","P247","P248","P249","P25","P250","P251","P252","P253","P254","P255","P256","P257","P258","P259","P26","P260","P261","P262","P262144","P263","P264","P265","P266","P267","P268","P268435456","P269","P27","P270","P271","P272","P273","P274","P274877906944","P275","P276","P277","P278","P279","P28","P280","P281","P281474976710656","P282","P283","P284","P285","P286","P287","P288","P288230376151711744","P289","P29","P290","P291","P292","P293","P294","P295","P296","P297","P298","P299","P3","P30","P300","P301","P302","P303","P304","P305","P306","P307","P308","P309","P31","P310","P311","P312","P313","P314","P315","P316","P317","P318","P319","P32","P320","P321","P322","P323","P324","P325","P326","P327","P32768","P328","P329","P33","P330","P331","P332","P333","P334","P335","P33554432","P336","P337","P338","P339","P34","P340","P341","P342","P343","P34359738368","P344","P345","P346","P347","P348","P349","P35","P350","P351","P35184372088832","P352","P353","P354","P355","P356","P357","P358","P359","P36","P360","P36028797018963968","P361","P362","P363","P364","P365","P366","P367","P368","P369","P37","P370","P371","P372","P373","P374","P375","P376","P377","P378","P379","P38","P380","P381","P382","P383","P384","P385","P386","P387","P388","P389","P39","P390","P391","P392","P393","P394","P395","P396","P397","P398","P399","P4","P40","P400","P401","P402","P403","P404","P405","P406","P407","P408","P409","P4096","P41","P410","P411","P412","P413","P414","P415","P416","P417","P418","P419","P4194304","P42","P420","P421","P422","P423","P424","P425","P426","P427","P428","P429","P4294967296","P43","P430","P431","P432","P433","P434","P435","P436","P437","P438","P439","P4398046511104","P44","P440","P441","P442","P443","P444","P445","P446","P447","P448","P449","P45","P450","P4503599627370496","P451","P452","P453","P454","P455","P456","P457","P458","P459","P46","P460","P461","P4611686018427387904","P462","P463","P464","P465","P466","P467","P468","P469","P47","P470","P471","P472","P473","P474","P475","P476","P477","P478","P479","P48","P480","P481","P482","P483","P484","P485","P486","P487","P488","P489","P49","P490","P491","P492","P493","P494","P495","P496","P497","P498","P499","P5","P50","P500","P501","P502","P503","P504","P505","P506","P507","P508","P509","P51","P510","P511","P512","P513","P514","P515","P516","P517","P518","P519","P52","P520","P521","P522","P523","P524","P524288","P525","P526","P527","P528","P529","P53","P530","P531","P532","P533","P534","P535","P536","P536870912","P537","P538","P539","P54","P540","P541","P542","P543","P544","P545","P546","P547","P548","P549","P549755813888","P55","P550","P551","P552","P553","P554","P555","P556","P557","P558","P559","P56","P560","P561","P562","P562949953421312","P563","P564","P565","P566","P567","P568","P569","P57","P570","P571","P572","P573","P574","P575","P576","P576460752303423488","P577","P578","P579","P58","P580","P581","P582","P583","P584","P585","P586","P587","P588","P589","P59","P590","P591","P592","P593","P594","P595","P596","P597","P598","P599","P6","P60","P600","P601","P602","P603","P604","P605","P606","P607","P608","P609","P61","P610","P611","P612","P613","P614","P615","P616","P617","P618","P619","P62","P620","P621","P622","P623","P624","P625","P626","P627","P628","P629","P63","P630","P631","P632","P633","P634","P635","P636","P637","P638","P639","P64","P640","P641","P642","P643","P644","P645","P646","P647","P648","P649","P65","P650","P651","P652","P653","P654","P655","P65536","P656","P657","P658","P659","P66","P660","P661","P662","P663","P664","P665","P666","P667","P668","P669","P67","P670","P671","P67108864","P672","P673","P674","P675","P676","P677","P678","P679","P68","P680","P681","P682","P683","P684","P685","P686","P687","P68719476736","P688","P689","P69","P690","P691","P692","P693","P694","P695","P696","P697","P698","P699","P7","P70","P700","P701","P702","P703","P70368744177664","P704","P705","P706","P707","P708","P709","P71","P710","P711","P712","P713","P714","P715","P716","P717","P718","P719","P72","P720","P72057594037927936","P721","P722","P723","P724","P725","P726","P727","P728","P729","P73","P730","P731","P732","P733","P734","P735","P736","P737","P738","P739","P74","P740","P741","P742","P743","P744","P745","P746","P747","P748","P749","P75","P750","P751","P752","P753","P754","P755","P756","P757","P758","P759","P76","P760","P761","P762","P763","P764","P765","P766","P767","P768","P769","P77","P770","P771","P772","P773","P774","P775","P776","P777","P778","P779","P78","P780","P781","P782","P783","P784","P785","P786","P787","P788","P789","P79","P790","P791","P792","P793","P794","P795","P796","P797","P798","P799","P8","P80","P800","P801","P802","P803","P804","P805","P806","P807","P808","P809","P81","P810","P811","P812","P813","P814","P815","P816","P817","P818","P819","P8192","P82","P820","P821","P822","P823","P824","P825","P826","P827","P828","P829","P83","P830","P831","P832","P833","P834","P835","P836","P837","P838","P8388608","P839","P84","P840","P841","P842","P843","P844","P845","P846","P847","P848","P849","P85","P850","P851","P852","P853","P854","P855","P856","P857","P858","P8589934592","P859","P86","P860","P861","P862","P863","P864","P865","P866","P867","P868","P869","P87","P870","P871","P872","P873","P874","P875","P876","P877","P878","P879","P8796093022208","P88","P880","P881","P882","P883","P884","P885","P886","P887","P888","P889","P89","P890","P891","P892","P893","P894","P895","P896","P897","P898","P899","P9","P90","P900","P9007199254740992","P901","P902","P903","P904","P905","P906","P907","P908","P909","P91","P910","P911","P912","P913","P914","P915","P916","P917","P918","P919","P92","P920","P921","P922","P923","P924","P925","P926","P927","P928","P929","P93","P930","P931","P932","P933","P934","P935","P936","P937","P938","P939","P94","P940","P941","P942","P943","P944","P945","P946","P947","P948","P949","P95","P950","P951","P952","P953","P954","P955","P956","P957","P958","P959","P96","P960","P961","P962","P963","P964","P965","P966","P967","P968","P969","P97","P970","P971","P972","P973","P974","P975","P976","P977","P978","P979","P98","P980","P981","P982","P983","P984","P985","P986","P987","P988","P989","P99","P990","P991","P992","P993","P994","P995","P996","P997","P998","P999","True","U0","U1","U10","U100","U1000","U10000","U100000","U1000000","U10000000","U100000000","U1000000000","U10000000000","U100000000000","U1000000000000","U10000000000000","U100000000000000","U1000000000000000","U10000000000000000","U100000000000000000","U1000000000000000000","U10000000000000000000","U1001","U1002","U1003","U1004","U1005","U1006","U1007","U1008","U1009","U101","U1010","U1011","U1012","U1013","U1014","U1015","U1016","U1017","U1018","U1019","U102","U1020","U1021","U1022","U1023","U1024","U103","U104","U1048576","U105","U106","U107","U1073741824","U108","U109","U1099511627776","U11","U110","U111","U112","U1125899906842624","U113","U114","U115","U1152921504606846976","U116","U117","U118","U119","U12","U120","U121","U122","U123","U124","U125","U126","U127","U128","U129","U13","U130","U131","U131072","U132","U133","U134","U134217728","U135","U136","U137","U137438953472","U138","U139","U14","U140","U140737488355328","U141","U142","U143","U144","U144115188075855872","U145","U146","U147","U148","U149","U15","U150","U151","U152","U153","U154","U155","U156","U157","U158","U159","U16","U160","U161","U162","U163","U16384","U164","U165","U166","U167","U16777216","U168","U169","U17","U170","U171","U17179869184","U172","U173","U174","U175","U17592186044416","U176","U177","U178","U179","U18","U180","U18014398509481984","U181","U182","U183","U184","U185","U186","U187","U188","U189","U19","U190","U191","U192","U193","U194","U195","U196","U197","U198","U199","U2","U20","U200","U201","U202","U203","U204","U2048","U205","U206","U207","U208","U209","U2097152","U21","U210","U211","U212","U213","U214","U2147483648","U215","U216","U217","U218","U219","U2199023255552","U22","U220","U221","U222","U223","U224","U225","U2251799813685248","U226","U227","U228","U229","U23","U230","U2305843009213693952","U231","U232","U233","U234","U235","U236","U237","U238","U239","U24","U240","U241","U242","U243","U244","U245","U246","U247","U248","U249","U25","U250","U251","U252","U253","U254","U255","U256","U257","U258","U259","U26","U260","U261","U262","U262144","U263","U264","U265","U266","U267","U268","U268435456","U269","U27","U270","U271","U272","U273","U274","U274877906944","U275","U276","U277","U278","U279","U28","U280","U281","U281474976710656","U282","U283","U284","U285","U286","U287","U288","U288230376151711744","U289","U29","U290","U291","U292","U293","U294","U295","U296","U297","U298","U299","U3","U30","U300","U301","U302","U303","U304","U305","U306","U307","U308","U309","U31","U310","U311","U312","U313","U314","U315","U316","U317","U318","U319","U32","U320","U321","U322","U323","U324","U325","U326","U327","U32768","U328","U329","U33","U330","U331","U332","U333","U334","U335","U33554432","U336","U337","U338","U339","U34","U340","U341","U342","U343","U34359738368","U344","U345","U346","U347","U348","U349","U35","U350","U351","U35184372088832","U352","U353","U354","U355","U356","U357","U358","U359","U36","U360","U36028797018963968","U361","U362","U363","U364","U365","U366","U367","U368","U369","U37","U370","U371","U372","U373","U374","U375","U376","U377","U378","U379","U38","U380","U381","U382","U383","U384","U385","U386","U387","U388","U389","U39","U390","U391","U392","U393","U394","U395","U396","U397","U398","U399","U4","U40","U400","U401","U402","U403","U404","U405","U406","U407","U408","U409","U4096","U41","U410","U411","U412","U413","U414","U415","U416","U417","U418","U419","U4194304","U42","U420","U421","U422","U423","U424","U425","U426","U427","U428","U429","U4294967296","U43","U430","U431","U432","U433","U434","U435","U436","U437","U438","U439","U4398046511104","U44","U440","U441","U442","U443","U444","U445","U446","U447","U448","U449","U45","U450","U4503599627370496","U451","U452","U453","U454","U455","U456","U457","U458","U459","U46","U460","U461","U4611686018427387904","U462","U463","U464","U465","U466","U467","U468","U469","U47","U470","U471","U472","U473","U474","U475","U476","U477","U478","U479","U48","U480","U481","U482","U483","U484","U485","U486","U487","U488","U489","U49","U490","U491","U492","U493","U494","U495","U496","U497","U498","U499","U5","U50","U500","U501","U502","U503","U504","U505","U506","U507","U508","U509","U51","U510","U511","U512","U513","U514","U515","U516","U517","U518","U519","U52","U520","U521","U522","U523","U524","U524288","U525","U526","U527","U528","U529","U53","U530","U531","U532","U533","U534","U535","U536","U536870912","U537","U538","U539","U54","U540","U541","U542","U543","U544","U545","U546","U547","U548","U549","U549755813888","U55","U550","U551","U552","U553","U554","U555","U556","U557","U558","U559","U56","U560","U561","U562","U562949953421312","U563","U564","U565","U566","U567","U568","U569","U57","U570","U571","U572","U573","U574","U575","U576","U576460752303423488","U577","U578","U579","U58","U580","U581","U582","U583","U584","U585","U586","U587","U588","U589","U59","U590","U591","U592","U593","U594","U595","U596","U597","U598","U599","U6","U60","U600","U601","U602","U603","U604","U605","U606","U607","U608","U609","U61","U610","U611","U612","U613","U614","U615","U616","U617","U618","U619","U62","U620","U621","U622","U623","U624","U625","U626","U627","U628","U629","U63","U630","U631","U632","U633","U634","U635","U636","U637","U638","U639","U64","U640","U641","U642","U643","U644","U645","U646","U647","U648","U649","U65","U650","U651","U652","U653","U654","U655","U65536","U656","U657","U658","U659","U66","U660","U661","U662","U663","U664","U665","U666","U667","U668","U669","U67","U670","U671","U67108864","U672","U673","U674","U675","U676","U677","U678","U679","U68","U680","U681","U682","U683","U684","U685","U686","U687","U68719476736","U688","U689","U69","U690","U691","U692","U693","U694","U695","U696","U697","U698","U699","U7","U70","U700","U701","U702","U703","U70368744177664","U704","U705","U706","U707","U708","U709","U71","U710","U711","U712","U713","U714","U715","U716","U717","U718","U719","U72","U720","U72057594037927936","U721","U722","U723","U724","U725","U726","U727","U728","U729","U73","U730","U731","U732","U733","U734","U735","U736","U737","U738","U739","U74","U740","U741","U742","U743","U744","U745","U746","U747","U748","U749","U75","U750","U751","U752","U753","U754","U755","U756","U757","U758","U759","U76","U760","U761","U762","U763","U764","U765","U766","U767","U768","U769","U77","U770","U771","U772","U773","U774","U775","U776","U777","U778","U779","U78","U780","U781","U782","U783","U784","U785","U786","U787","U788","U789","U79","U790","U791","U792","U793","U794","U795","U796","U797","U798","U799","U8","U80","U800","U801","U802","U803","U804","U805","U806","U807","U808","U809","U81","U810","U811","U812","U813","U814","U815","U816","U817","U818","U819","U8192","U82","U820","U821","U822","U823","U824","U825","U826","U827","U828","U829","U83","U830","U831","U832","U833","U834","U835","U836","U837","U838","U8388608","U839","U84","U840","U841","U842","U843","U844","U845","U846","U847","U848","U849","U85","U850","U851","U852","U853","U854","U855","U856","U857","U858","U8589934592","U859","U86","U860","U861","U862","U863","U864","U865","U866","U867","U868","U869","U87","U870","U871","U872","U873","U874","U875","U876","U877","U878","U879","U8796093022208","U88","U880","U881","U882","U883","U884","U885","U886","U887","U888","U889","U89","U890","U891","U892","U893","U894","U895","U896","U897","U898","U899","U9","U90","U900","U9007199254740992","U901","U902","U903","U904","U905","U906","U907","U908","U909","U91","U910","U911","U912","U913","U914","U915","U916","U917","U918","U919","U92","U920","U921","U922","U9223372036854775808","U923","U924","U925","U926","U927","U928","U929","U93","U930","U931","U932","U933","U934","U935","U936","U937","U938","U939","U94","U940","U941","U942","U943","U944","U945","U946","U947","U948","U949","U95","U950","U951","U952","U953","U954","U955","U956","U957","U958","U959","U96","U960","U961","U962","U963","U964","U965","U966","U967","U968","U969","U97","U970","U971","U972","U973","U974","U975","U976","U977","U978","U979","U98","U980","U981","U982","U983","U984","U985","U986","U987","U988","U989","U99","U990","U991","U992","U993","U994","U995","U996","U997","U998","U999","Z0","powi","powi","powi","Integer","NInt","PInt","Z0","add","add","add","add","add","add","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","default","default","default","div","div","div","div","div","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","max","max","max","max","max","max","max","max","max","min","min","min","min","min","min","min","min","min","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","neg","neg","neg","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_div","partial_div","partial_div","powi","powi","powi","powi","powi","powi","powi","powi","rem","rem","rem","rem","rem","sub","sub","sub","sub","sub","sub","sub","sub","sub","to_i16","to_i16","to_i16","to_i32","to_i32","to_i32","to_i64","to_i64","to_i64","to_i8","to_i8","to_i8","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_isize","to_isize","to_isize","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BOOL","Bit","I16","I16","I32","I32","I64","I64","I8","I8","ISIZE","ISIZE","Integer","NonZero","Ord","PowerOfTwo","TypeArray","U16","U32","U64","U8","U8","USIZE","Unsigned","Zero","new","to_bool","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i8","to_i8","to_isize","to_isize","to_ordering","to_u16","to_u32","to_u64","to_u8","to_u8","to_usize","AbsVal","Add1","And","Compare","Cube","Diff","Double","Eq","Exp","Gcf","Gr","GrEq","Le","LeEq","Length","Log2","Maximum","Minimum","Mod","Negate","NotEq","Or","PartialQuot","Prod","Quot","Shleft","Shright","Sqrt","Square","Sub1","Sum","Xor","Abs","Cmp","Gcd","IsEqual","IsGreater","IsGreaterOrEqual","IsLess","IsLessOrEqual","IsNotEqual","Len","Logarithm2","Max","Min","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","PartialDiv","Pow","Same","SquareRoot","ToInt","is_equal","is_greater","is_greater_or_equal","is_less","is_less_or_equal","is_not_equal","len","max","min","partial_div","powi","to_int","GetBit","GetBitOut","Output","Output","PowerOfTwo","SetBit","SetBitOut","UInt","UTerm","Unsigned","add","add","add","add","add","add","add","add","add","add","add","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","div","div","eq","eq","fmt","fmt","from","from","hash","hash","into","into","len","len","max","max","min","min","mul","mul","mul","mul","mul","mul","mul","mul","new","new","partial_cmp","partial_cmp","partial_div","partial_div","powi","powi","rem","rem","set_bit","set_bit","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","sub","sub","sub","sub","sub","sub","sub","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i8","to_i8","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_isize","to_isize","to_u16","to_u16","to_u32","to_u32","to_u64","to_u64","to_u8","to_u8","to_usize","to_usize","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["typenumtypenum::array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::bit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::conststypenum::int","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::marker_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::operator_aliases","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::type_operators","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::uint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","A potential output from <code>Cmp</code>, this is the type equivalent …","","A potential output from <code>Cmp</code>, this is the type equivalent …","A potential output from <code>Cmp</code>, this is the type equivalent …type-level array of type-level numbers.","Asserts that a type is <code>True</code>, aka <code>B1</code>.","Asserts that two types are the same.","Type-level bits.","","","","","","","","","","","","","A convenience macro for comparing type numbers. Use <code>op!</code> …","Type aliases for many constants.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Type-level signed integers.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","All of the <strong>marker traits</strong> used in typenum.","Convenient type operations.","Aliases for the type operators used in this crate. Their …","","","","Create a new type-level arrray. Only usable on Rust 1.13.0 …","","","","","","","","","","","","","Useful <strong>type operators</strong> that are not defined in <code>core::ops</code>.","Type-level unsigned integers.","The terminating type for type arrays.","<code>TArr</code> is a type that acts as an array of types. It is …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","The type-level bit 0.","The type-level bit 1.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Instantiates a singleton representing this bit.","Instantiates a singleton representing this bitype-level signed integers with negative sign.","Type-level signed integers with positive sign.","The type-level signed integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this strictly …","Instantiates a singleton representing this strictly …","Instantiates a singleton representing the integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <strong>marker trait</strong> for compile time bits.","","","","","","","","","","","The <strong>marker trait</strong> for compile time signed integers.","A <strong>marker trait</strong> to designate that a type is not zero. All …","A <strong>Marker trait</strong> for the types <code>Greater</code>, <code>Equal</code>, and <code>Less</code>.","The <strong>marker trait</strong> for type-level numbers which are a power …","The <strong>marker trait</strong> for type-level arrays of type-level …","","","","","","","The <strong>marker trait</strong> for compile time unsigned integers.","A <strong>marker trait</strong> to designate that a type is zero. Only <code>B0</code>, …","Instantiates a singleton representing this bit.","","","","","","","","","","","","","","","","","","","Alias for the associated type of <code>Abs</code>: …","Alias to make it easy to add 1: …","Alias for the associated type of <code>BitAnd</code>: …","Alias for the associated type of <code>Cmp</code>: …","Alias to make it easy to cube. …","Alias for the associated type of <code>Sub</code>: …","Alias to make it easy to multiply by 2. …","Alias for the associated type of <code>IsEqual</code>: …","Alias for the associated type of <code>Pow</code>: …","Alias for the associated type of <code>Gcd</code>: …","Alias for the associated type of <code>IsGreater</code>: …","Alias for the associated type of <code>IsGreaterOrEqual</code>: …","Alias for the associated type of <code>IsLess</code>: …","Alias for the associated type of <code>IsLessOrEqual</code>: …","Alias for the associated type of <code>Len</code>: …","Alias for the associated type of <code>Logarithm2</code>: …","Alias for the associated type of <code>Max</code>: …","Alias for the associated type of <code>Min</code>: …","Alias for the associated type of <code>Rem</code>: …","Alias for the associated type of <code>Neg</code>: …","Alias for the associated type of <code>IsNotEqual</code>: …","Alias for the associated type of <code>BitOr</code>: …","Alias for the associated type of <code>PartialDiv</code>: …","Alias for the associated type of <code>Mul</code>: …","Alias for the associated type of <code>Div</code>: …","Alias for the associated type of <code>Shl</code>: …","Alias for the associated type of <code>Shr</code>: …","Alias for the associated type of <code>SquareRoot</code>: …","Alias to make it easy to square. …","Alias to make it easy to subtract 1: …","Alias for the associated type of <code>Add</code>: …","Alias for the associated type of <code>BitXor</code>: …","A <strong>type operator</strong> that returns the absolute value.","A <strong>type operator</strong> for comparing <code>Self</code> and <code>Rhs</code>. It provides a …","A <strong>type operator</strong> that computes the greatest common divisor …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self == Rhs</code>, …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt; Rhs</code>, otherwise …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt;= Rhs</code>, …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt; Rhs</code>, otherwise …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt;= Rhs</code>, …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self != Rhs</code>, …","A <strong>type operator</strong> that gives the length of an <code>Array</code> or the …","A <strong>type operator</strong> for taking the integer binary logarithm of …","A <strong>type operator</strong> that returns the maximum of <code>Self</code> and <code>Rhs</code>.","A <strong>type operator</strong> that returns the minimum of <code>Self</code> and <code>Rhs</code>.","Should always be <code>Self</code>","The absolute value.","The result of the exponentiation.","The result of the comparison. It should only ever be one …","The length as a type-level unsigned integer.","The type of the result of the division","The type of the minimum of <code>Self</code> and <code>Rhs</code>","The type of the maximum of <code>Self</code> and <code>Rhs</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The result of the integer square root.","The result of the integer binary logarithm.","The greatest common divisor.","Division as a partial function. This <strong>type operator</strong> …","A <strong>type operator</strong> that provides exponentiation by repeated …","A <strong>type operator</strong> that ensures that <code>Rhs</code> is the same as <code>Self</code>, …","A <strong>type operator</strong> for taking the integer square root of <code>Self</code>.","A <strong>type operator</strong> for taking a concrete integer value from a …","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","This function isn’t used in this crate, but may be …","Method returning the maximum","Method returning the minimum","Method for performing the division","This function isn’t used in this crate, but may be …","Method returning the concrete value for the type.","","","","","","A <strong>type operator</strong> that, when implemented for unsigned …","Alias for the result of calling <code>SetBit</code>: …","<code>UInt</code> is defined recursively, where <code>B</code> is the least …","The terminating type for <code>UInt</code>; it always comes after the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Instantiates a singleton representing this unsigned …","Instantiates a singleton representing this unsigned …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,1,2,3,0,0,0,1,2,3,0,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,0,0,0,19,21,21,19,19,21,19,19,21,21,19,21,19,21,19,21,19,21,19,21,19,21,19,21,19,21,19,21,19,21,19,19,21,21,19,19,21,21,19,19,21,21,19,21,19,21,19,21,19,21,19,21,19,21,19,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,27,27,0,0,0,0,29,29,29,26,26,26,30,29,26,30,29,26,30,29,26,30,29,26,30,29,26,30,29,29,26,26,30,29,26,30,29,26,30,29,26,30,29,26,30,29,26,30,29,29,29,26,26,26,30,30,30,29,29,29,26,26,26,30,30,30,29,29,29,29,29,26,26,26,26,26,30,30,30,29,26,30,29,26,30,29,26,30,29,26,30,29,29,26,26,26,30,30,30,29,29,26,26,30,29,29,29,26,26,26,30,30,30,29,26,30,29,26,30,29,26,30,29,26,30,29,29,29,29,26,26,26,26,30,30,30,30,29,26,30,29,26,30,29,26,30,29,26,30,20,0,24,31,24,31,24,31,24,31,24,31,0,0,0,0,0,24,24,24,20,24,24,0,0,20,20,24,31,24,31,24,31,24,31,24,31,43,24,24,24,20,24,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,0,0,0,0,0,53,54,57,52,55,56,48,51,50,49,46,61,0,0,62,63,0,0,0,0,0,0,28,28,28,28,28,28,28,28,42,42,42,28,42,28,28,28,28,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,28,28,28,28,42,42,42,28,42,28,42,28,42,28,42,28,42,28,42,28,28,28,28,42,42,42,28,28,28,28,42,42,42,28,28,28,28,28,42,42,28,42,28,42,28,42,28,42,28,28,28,28,28,28,28,28,28,42,42,42,42,42,42,42,42,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42],"fp":[[3,"Greater"],[3,"Less"],[3,"Equal"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"ATerm"],[3,"TArr"],[8,"Clone"],[8,"Ord"],[8,"PartialEq"],[8,"Debug"],[8,"Hash"],[8,"PartialOrd"],[3,"B0"],[8,"Bit"],[3,"B1"],[15,"u8"],[6,"P1"],[8,"Unsigned"],[8,"NonZero"],[3,"NInt"],[6,"N1"],[3,"UInt"],[3,"PInt"],[3,"Z0"],[8,"Integer"],[8,"Default"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"usize"],[3,"UTerm"],[8,"Ord"],[8,"Same"],[8,"Abs"],[8,"Pow"],[8,"Cmp"],[8,"Len"],[8,"PartialDiv"],[8,"Min"],[8,"Max"],[8,"IsLess"],[8,"IsEqual"],[8,"IsGreater"],[8,"IsLessOrEqual"],[8,"IsNotEqual"],[8,"IsGreaterOrEqual"],[8,"SquareRoot"],[8,"Logarithm2"],[8,"Gcd"],[8,"ToInt"],[8,"GetBit"],[8,"SetBit"]]},\
"unicode_ident":{"doc":"github crates-io docs-rs","t":[5,5],"n":["is_xid_continue","is_xid_start"],"q":["unicode_ident",""],"d":["",""],"i":[0,0],"f":[[1,2],[1,2]],"p":[[15,"char"],[15,"bool"]]},\
"unicode_xid":{"doc":"Determine if a <code>char</code> is a valid identifier for a parser …","t":[17,8,10,10],"n":["UNICODE_VERSION","UnicodeXID","is_xid_continue","is_xid_start"],"q":["unicode_xid","","",""],"d":["The version of Unicode that this version of unicode-xid is …","Methods for determining if a character is a valid …","Returns whether the specified <code>char</code> satisfies the ‘…","Returns whether the specified character satisfies the ‘…"],"i":[0,0,2,2],"f":[0,0,[[],1],[[],1]],"p":[[15,"bool"],[8,"UnicodeXID"]]},\
"wyz":{"doc":"<code>wyz</code> – myrrlyn’s wyzyrdly library","t":[0,0,0,0,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,18,3,18,16,3,3,8,3,18,18,16,6,8,18,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,3,3,8,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,10,10],"n":["bidi","comu","fmt","range","Bidi","BidiIterator","bidi","borrow","borrow_mut","count","from","into","into_iter","last","len","new","next","next_back","nth","nth_back","size_hint","try_from","try_into","type_id","Address","CONTAINS_MUTABILITY","Const","DANGLING","ElementAddr","Frozen","Mut","Mutability","NullPtrError","PEANO_NUMBER","RENDER","Ref","Reference","Referential","SELF","SliceReferential","add","align_offset","as_mut","as_ref","assert_mut","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","copy_from","copy_from_nonoverlapping","copy_to","copy_to_nonoverlapping","default","default","default","drop_in_place","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","freeze","freeze","from","from","from","from","from","from","from","from_raw_parts","from_raw_parts","from_raw_parts","from_raw_parts","from_ref","from_ref","from_ref","from_ref","hash","hash","hash","hash","hash","immut","into","into","into","into","into","into_inner","new","offset","offset_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","read","read_unaligned","read_volatile","replace","sub","swap","thaw","thaw","to_const","to_mut","to_ref","to_ref","to_ref","to_ref","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","wrapping_add","wrapping_offset","wrapping_sub","write","write_unaligned","write_volatile","0","0","0","0","0","0","0","0","0","FmtBinary","FmtDisplay","FmtForward","FmtList","FmtLowerExp","FmtLowerHex","FmtOctal","FmtPointer","FmtUpperExp","FmtUpperHex","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt_binary","fmt_display","fmt_list","fmt_lower_exp","fmt_lower_hex","fmt_octal","fmt_pointer","fmt_upper_exp","fmt_upper_hex","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","RangeExt","intersection","normalize","union"],"q":["wyz","","","","wyz::bidi","","","","","","","","","","","","","","","","","","","","wyz::comu","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","wyz::fmt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","wyz::range","","",""],"d":["A bidirectional iterator that only checks its direction …","Trait-level <code>co</code>nst/<code>mu</code>table tracking.","Format forwarding","Range utilities.","An iterator that conditionally reverses itself upon …","Extension trait that provides <code>.bidi()</code> for all double-ended …","Conditionally reverses the direction of iteration.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Applies the <code>Bidi</code> adapter to a double-ended iterator and …","","","","","","","","","A generic non-null pointer with type-system mutability …","Marks whether this type contains mutability permissions …","A basic <code>const</code> marker.","The dangling pointer.","The type of the element pointer.","A frozen wrapper over some other <code>Mutability</code> marker.","A basic <code>mut</code> marker.","Generalized mutability permissions.","<code>Address</code> cannot be constructed over null pointers.","Counts the layers of <code>Frozen&lt;&gt;</code> wrapping around a base <code>Const</code> …","One of <code>*const</code> or <code>*mut</code>.","The created reference type. Must be one of <code>&amp;T</code> or <code>&amp;mut T</code>.","A generically-mutable reference.","Allows an <code>Address</code> to produce an ordinary reference.","Allow instances to be constructed generically.","Allows an <code>Address&lt;M, [T]&gt;</code> to produce an ordinary slice …","Applies <code>&lt;*T&gt;::add</code>.","Applies <code>&lt;*T&gt;::align_offset</code>.","Applies <code>&lt;*T&gt;::as_mut</code>.","Applies <code>&lt;*T&gt;::as_ref</code>.","Force an <code>Address&lt;Const&gt;</code> to be <code>Address&lt;Mut&gt;</code>.","","","","","","","","","","","Applies <code>&lt;*T&gt;::cast</code>.","","","","","","","","","","","Applies <code>&lt;*T&gt;::copy_from</code>.","Applies <code>&lt;*T&gt;::copy_from_nonoverlapping</code>.","Applies <code>&lt;*T&gt;::copy_to</code>.","Applies <code>&lt;*T&gt;::copy_to_nonoverlapping</code>.","","","","Applies <code>&lt;*T&gt;::drop_in_place</code>.","","","","","","","","","","","","","Freeze this type, wrapping it in a <code>const</code> marker that may …","Freezes the <code>Address</code> so that it is read-only.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs an ordinary slice reference from a base-address …","","","","Converts a reference back into an <code>Address</code>.","","","","","","","","","Permanently converts an <code>Address&lt;_&gt;</code> into an <code>Address&lt;Const&gt;</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Removes the <code>Address</code> type marker, returning the original …","Constructs a new <code>Address</code> over some pointer value.","Applies <code>&lt;*T&gt;::offset</code>.","Applies <code>&lt;*T&gt;::offset_from</code>.","","","","","","Applies <code>&lt;*T&gt;::read</code>.","Applies <code>&lt;*T&gt;::read_unaligned</code>.","Applies <code>&lt;*T&gt;::read_volatile</code>.","Applies <code>&lt;*T&gt;::replace</code>.","Applies <code>&lt;*T&gt;::sub</code>.","Applies <code>&lt;*T&gt;::swap</code>.","Thaw a previously-frozen type, removing its <code>Frozen</code> marker …","Thaws the <code>Address</code> to its original mutability permission.","Gets the address as a read-only pointer.","Gets the address as a write-capable pointer.","Converts the <code>Address</code> to a reference.","","","","","","","","","","","","","","","","","","","","","Applies <code>&lt;*T&gt;::wrapping_add</code>.","Applies <code>&lt;*T&gt;::wrapping_offset</code>.","Applies <code>&lt;*T&gt;::wrapping_sub</code>.","Applies <code>&lt;*T&gt;::write</code>.","Applies <code>&lt;*T&gt;::write_unaligned</code>.","Applies <code>&lt;*T&gt;::write_volatile</code>.","","","","","","","","","","Forwards a type’s <code>Binary</code> formatting implementation to …","Forwards a type’s <code>Display</code> formatting implementation to …","Wraps any value with a format-forward to <code>Debug</code>.","Renders each element of a stream into a list.","Forwards a type’s <code>LowerExp</code> formatting implementation to …","Forwards a type’s <code>LowerHex</code> formatting implementation to …","Forwards a type’s <code>Octal</code> formatting implementation to …","Forwards a type’s <code>Pointer</code> formatting implementation to …","Forwards a type’s <code>UpperExp</code> formatting implementation to …","Forwards a type’s <code>UpperHex</code> formatting implementation to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Causes <code>self</code> to use its <code>Binary</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>Display</code> implementation when <code>Debug</code>…","Formats each item in a sequence.","Causes <code>self</code> to use its <code>LowerExp</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>LowerHex</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>Octal</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>Pointer</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>UpperExp</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>UpperHex</code> implementation when <code>Debug</code>…","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extension methods for working with various range types.","Finds the intersection between two range-likes. The …","Normalizes a range-like type to a canonical half-open <code>Range</code>…","Finds the union between two range-likes. The produced <code>Range</code>…"],"i":[0,0,0,0,0,0,44,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,15,0,7,45,0,0,0,0,15,15,46,0,0,15,0,7,7,7,7,7,7,9,8,11,12,7,9,8,11,12,7,7,9,8,11,12,7,9,8,11,12,7,7,7,7,9,8,11,7,7,9,8,11,12,7,7,9,8,11,12,12,15,7,7,7,7,9,8,11,12,45,7,7,7,46,7,7,7,7,9,8,11,12,7,7,9,8,11,12,7,7,7,7,7,9,8,11,12,7,7,7,7,7,7,15,7,7,7,46,7,7,7,7,7,7,9,8,11,12,7,9,8,11,12,7,9,8,11,12,7,7,7,7,7,7,26,28,29,31,33,35,37,39,41,0,0,0,0,0,0,0,0,0,0,26,28,29,31,33,35,37,39,41,26,28,29,31,33,35,37,39,41,26,28,29,31,33,35,37,39,41,26,28,29,31,33,35,37,39,41,26,28,29,31,33,35,37,39,41,26,28,29,31,33,35,37,39,41,26,26,26,26,26,26,26,26,26,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,31,31,31,31,31,31,31,31,31,33,33,33,33,33,33,33,33,33,35,35,35,35,35,35,35,35,35,37,37,37,37,37,37,37,37,37,39,39,39,39,39,39,39,39,39,41,41,41,41,41,41,41,41,41,47,47,47,47,47,47,47,47,47,26,28,29,31,33,35,37,39,41,26,28,29,31,33,35,37,39,41,26,28,29,31,33,35,37,39,41,26,28,29,31,33,35,37,39,41,26,28,29,31,33,35,37,39,41,0,48,48,48],"f":[0,0,0,0,0,0,[1,2],[[]],[[]],[2,3],[[]],[[]],[[]],[2,4],[2,3],[1,2],[2,4],[2,4],[[2,3],4],[[2,3],4],[2],[[],5],[[],5],[[],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[7,3],7],[[7,3],3],[[[7,[8]]],4],[7,4],[7,[[7,[8]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,7],[7,7],[9,9],[8,8],[[[11,[10]]],[[11,[10]]]],[12,12],[[7,7],13],[[9,9],13],[[8,8],13],[[[11,[14]],11],13],[[12,12],13],[[[7,[8]],[7,[15]],3]],[[[7,[8]],[7,[15]],3]],[[7,[7,[8]],3]],[[7,[7,[8]],3]],[[],9],[[],8],[[],[[11,[16]]]],[[[7,[8]]]],[[7,7],1],[[9,9],1],[[8,8],1],[[[11,[17]],11],1],[[12,12],1],[[7,18],19],[[7,18],19],[[9,18],19],[[8,18],19],[[[11,[20]],18],19],[[12,18],19],[[12,18],19],[[],11],[7,[[7,[11]]]],[[]],[[],[[7,[9]]]],[[],[[7,[8]]]],[[]],[[]],[[]],[[]],[3],[3],[3],[3],[[]],[[],[[7,[11]]]],[[],[[7,[8]]]],[[],[[7,[9]]]],[7],[9],[8],[[[11,[21]]]],[12],[7,[[7,[9]]]],[[]],[[]],[[]],[[]],[[]],[7,22],[22,7],[[7,23],7],[[7,7],23],[[7,7],[[4,[13]]]],[[9,9],[[4,[13]]]],[[8,8],[[4,[13]]]],[[[11,[24]],11],[[4,[13]]]],[[12,12],[[4,[13]]]],[7],[7],[7],[[[7,[8]]]],[[7,3],7],[[[7,[8]],[7,[8]]]],[11],[[[7,[11]]],7],[7],[[[7,[8]]]],[[]],[[[7,[8]]]],[[[7,[9]]]],[[[7,[11]]]],[[],5],[[],[[5,[[7,[9]]]]]],[[],[[5,[[7,[8]]]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[],6],[[],6],[[7,3],7],[[7,23],7],[[7,3],7],[[[7,[8]]]],[[[7,[8]]]],[[[7,[8]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[26,[25]]]],[[[28,[27]]]],[29],[[[31,[30]]]],[[[33,[32]]]],[[[35,[34]]]],[[[37,[36]]]],[[[39,[38]]]],[[[41,[40]]]],[[[26,[25]]]],[[[28,[27]]]],[29],[[[31,[30]]]],[[[33,[32]]]],[[[35,[34]]]],[[[37,[36]]]],[[[39,[38]]]],[[[41,[40]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[26,[25]]]],[[[28,[27]]]],[29],[[[31,[30]]]],[[[33,[32]]]],[[[35,[34]]]],[[[37,[36]]]],[[[39,[38]]]],[[[41,[40]]]],[[[26,[25]]]],[[[28,[27]]]],[29],[[[31,[30]]]],[[[33,[32]]]],[[[35,[34]]]],[[[37,[36]]]],[[[39,[38]]]],[[[41,[40]]]],[[[26,[[0,[25,34]]]],18],19],[[[26,[[0,[25,32]]]],18],19],[[[26,[[0,[25,30]]]],18],19],[[[26,[[0,[25,27]]]],18],19],[[[26,[25]],18],19],[[[26,[[0,[25,25]]]],18],19],[[[26,[[0,[25,36]]]],18],19],[[[26,[[0,[25,38]]]],18],19],[[[26,[[0,[25,40]]]],18],19],[[[28,[[0,[27,38]]]],18],19],[[[28,[[0,[27,36]]]],18],19],[[[28,[[0,[27,30]]]],18],19],[[[28,[[0,[27,32]]]],18],19],[[[28,[[0,[27,40]]]],18],19],[[[28,[[0,[27,34]]]],18],19],[[[28,[[0,[27,25]]]],18],19],[[[28,[27]],18],19],[[[28,[[0,[27,27]]]],18],19],[[29,18],19],[[29,18],19],[[29,18],19],[[29,18],19],[[29,18],19],[[29,18],19],[[29,18],19],[[29,18],19],[[[31,[[0,[30,30]]]],18],19],[[[31,[[0,[30,25]]]],18],19],[[[31,[30]],18],19],[[[31,[[0,[30,27]]]],18],19],[[[31,[[0,[30,32]]]],18],19],[[[31,[[0,[30,34]]]],18],19],[[[31,[[0,[30,36]]]],18],19],[[[31,[[0,[30,38]]]],18],19],[[[31,[[0,[30,40]]]],18],19],[[[33,[[0,[32,25]]]],18],19],[[[33,[[0,[32,40]]]],18],19],[[[33,[[0,[32,38]]]],18],19],[[[33,[[0,[32,36]]]],18],19],[[[33,[[0,[32,34]]]],18],19],[[[33,[[0,[32,32]]]],18],19],[[[33,[[0,[32,30]]]],18],19],[[[33,[[0,[32,27]]]],18],19],[[[33,[32]],18],19],[[[35,[[0,[34,25]]]],18],19],[[[35,[34]],18],19],[[[35,[[0,[34,40]]]],18],19],[[[35,[[0,[34,38]]]],18],19],[[[35,[[0,[34,36]]]],18],19],[[[35,[[0,[34,34]]]],18],19],[[[35,[[0,[34,32]]]],18],19],[[[35,[[0,[34,30]]]],18],19],[[[35,[[0,[34,27]]]],18],19],[[[37,[[0,[36,40]]]],18],19],[[[37,[[0,[36,38]]]],18],19],[[[37,[[0,[36,36]]]],18],19],[[[37,[[0,[36,34]]]],18],19],[[[37,[[0,[36,32]]]],18],19],[[[37,[[0,[36,30]]]],18],19],[[[37,[[0,[36,27]]]],18],19],[[[37,[36]],18],19],[[[37,[[0,[36,25]]]],18],19],[[[39,[[0,[38,27]]]],18],19],[[[39,[[0,[38,32]]]],18],19],[[[39,[38]],18],19],[[[39,[[0,[38,25]]]],18],19],[[[39,[[0,[38,30]]]],18],19],[[[39,[[0,[38,36]]]],18],19],[[[39,[[0,[38,34]]]],18],19],[[[39,[[0,[38,40]]]],18],19],[[[39,[[0,[38,38]]]],18],19],[[[41,[[0,[40,38]]]],18],19],[[[41,[[0,[40,30]]]],18],19],[[[41,[[0,[40,32]]]],18],19],[[[41,[[0,[40,34]]]],18],19],[[[41,[[0,[40,36]]]],18],19],[[[41,[[0,[40,40]]]],18],19],[[[41,[[0,[40,27]]]],18],19],[[[41,[[0,[40,25]]]],18],19],[[[41,[40]],18],19],[[],26],[[],28],[[],29],[[],31],[[],33],[[],35],[[],37],[[],39],[[],41],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[[],[[4,[42]]]],[[[43,[4]],[43,[4]]],42],[[],[[4,[42]]]]],"p":[[15,"bool"],[3,"Bidi"],[15,"usize"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"Address"],[3,"Mut"],[3,"Const"],[8,"Clone"],[3,"Frozen"],[3,"NullPtrError"],[4,"Ordering"],[8,"Ord"],[8,"Mutability"],[8,"Default"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"Hash"],[3,"NonNull"],[15,"isize"],[8,"PartialOrd"],[8,"Binary"],[3,"FmtBinary"],[8,"Display"],[3,"FmtDisplay"],[3,"FmtList"],[8,"LowerExp"],[3,"FmtLowerExp"],[8,"LowerHex"],[3,"FmtLowerHex"],[8,"Octal"],[3,"FmtOctal"],[8,"Pointer"],[3,"FmtPointer"],[8,"UpperExp"],[3,"FmtUpperExp"],[8,"UpperHex"],[3,"FmtUpperHex"],[3,"Range"],[8,"Into"],[8,"BidiIterator"],[8,"SliceReferential"],[8,"Referential"],[8,"FmtForward"],[8,"RangeExt"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
