window.SIDEBAR_ITEMS = {"fn":[["advance_block","Advances the chain by a single block."],["assert_contract_termination","Tests if a contract terminates successfully after `self.env().terminate()` has been called."],["callee","Gets the currently set callee."],["count_used_storage_cells","Returns the amount of storage cells used by the account `account_id`."],["default_accounts","Returns the default accounts for testing purposes: Alice, Bob, Charlie, Django, Eve and Frank."],["get_account_balance","Returns the balance of the account."],["get_contract_storage_rw","Returns the total number of reads and writes of the contractâ€™s storage."],["recorded_debug_messages","Returns the contents of the past performed environmental debug messages in order."],["recorded_events","Returns the recorded emitted events in order."],["register_chain_extension","Registers a new chain extension."],["run_test","Runs the given closure test function with the default configuration for the off-chain environment."],["set_account_balance","Sets the balance of the account to the given balance."],["set_balance","Sets the balance of `account_id` to `new_balance`."],["set_block_entropy","Set the entropy hash of the current block."],["set_callee","Sets the callee for the next call."],["set_caller","Sets a caller for the next call."],["set_clear_storage_disabled","Set to true to disable clearing storage"],["set_value_transferred","Sets the value transferred from the caller to the callee as part of the call."]],"struct":[["CallData","The raw ABI respecting input data to a call."],["DefaultAccounts","The default accounts."],["EmittedEvent","Record for an emitted event."]],"trait":[["ChainExtension","Types implementing this trait can be used as chain extensions."]]};