window.SIDEBAR_ITEMS = {"constant":[["FOOTPRINT_CLEANUP_THRESHOLD","This constant is used by some types to make sure that cleaning up behind them won’t become way too expensive. Since we are missing Substrate’s storage bulk removal feature we cannot do better than this at the moment. The number is arbitrarily chosen. Might need adjustments later."]],"derive":[["PackedLayout","Derives `ink_storage`’s `PackedLayout` trait for the given `struct` or `enum`."],["SpreadAllocate","Derives `ink_storage`’s `SpreadAllocate` trait for the given `struct`."],["SpreadLayout","Derives `ink_storage`’s `SpreadLayout` trait for the given `struct` or `enum`."],["StorageLayout","Derives `ink_storage`’s `StorageLayout` trait for the given `struct` or `enum`."]],"fn":[["allocate_packed_root","Allocates an instance of type `T` to the contract storage using packed layout."],["allocate_spread_root","Pulls an instance of type `T` from the contract storage using spread layout."],["clear_packed_root","Clears the entity from the contract storage using packed layout."],["clear_spread_root","Clears the entity from the contract storage using spread layout."],["forward_allocate_packed","Allocates an instance of type `T` in packed fashion to the contract storage."],["forward_clear_packed","Clears an instance of type `T` in packed fashion from the contract storage."],["forward_pull_packed","Pulls an instance of type `T` in packed fashion from the contract storage."],["forward_push_packed","Pushes an instance of type `T` in packed fashion to the contract storage."],["pull_packed_root","Pulls an instance of type `T` from the contract storage using packed layout."],["pull_spread_root","Pulls an instance of type `T` from the contract storage using spread layout."],["push_packed_root","Pushes the entity to the contract storage using packed layout."],["push_packed_root_return_size","Pushes the entity to the contract storage using packed layout and returns the size of the pre-existing value if any."],["push_spread_root","Pushes the entity to the contract storage using spread layout."]],"struct":[["KeyPtr","A key pointer."]],"trait":[["ExtKeyPtr","Extension trait to make `KeyPtr` simpler to use for `T: SpreadLayout` types."],["LayoutCryptoHasher","Types implementing this trait are supported layouting crypto hashers."],["PackedAllocate","Types that can be default initialized to a single storage cell."],["PackedLayout","Types that can be stored to and loaded from a single contract storage cell."],["SpreadAllocate","Types that can be default initialized to some area of the contract storage."],["SpreadLayout","Types that can be stored to and loaded from the contract storage."],["StorageLayout","Implemented by types that have a storage layout."]]};