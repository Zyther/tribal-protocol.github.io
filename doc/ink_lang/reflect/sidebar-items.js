window.SIDEBAR_ITEMS = {"enum":[["DispatchError","An error that can occur during dispatch of ink! dispatchables."]],"struct":[["TraitDefinitionRegistry","Type that is guaranteed by ink! to implement all ink! trait definitions."]],"trait":[["ContractAmountDispatchables","Reflects the number of dispatchable ink! messages and constructors respectively."],["ContractConstructorDecoder","Generated type used to decode all dispatchable ink! constructors of the ink! smart contract."],["ContractDispatchableConstructors","Reflects the sequence of all dispatchable ink! constructors of the ink! smart contract."],["ContractDispatchableMessages","Reflects the sequence of all dispatchable ink! messages of the ink! smart contract."],["ContractEnv","Stores the used host environment type of the ink! smart contract."],["ContractEventBase","Defines a base event type for the contract."],["ContractMessageDecoder","Generated type used to decode all dispatchable ink! messages of the ink! smart contract."],["ContractName","Stores the name of the ink! smart contract."],["ContractReference","Refers to the generated ink! smart contract reference type."],["DecodeDispatch","Decodes an ink! dispatch input into a known selector and its expected parameters."],["DispatchableConstructorInfo","Stores various information of the respective dispatchable ink! constructor."],["DispatchableMessageInfo","Stores various information of the respective dispatchable ink! message."],["ExecuteDispatchable","Starts the execution of the respective ink! message or constructor call."],["TraitInfo","Captures info about an ink! trait definition."],["TraitMessageInfo","Stores information for every ink! trait message of an ink! trait definition."]]};